# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 54
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_core.serialization import StructureBase
from autoscript_core.common import DataType, DataTypeDefinition
import autoscript_sdb_microscope_client.structures


class Point(StructureBase):    
    """
    The structure representing a 2D point.
    
    :param float x: The X coordinate of a point.
    
    :param float y: The Y coordinate of a point.
    """
    def __init__(self, x=0.0, y=0.0):
        super(Point, self).__init__("Point")

        self._init_item(1, DataType.DOUBLE, x, False)
        self._init_item(2, DataType.DOUBLE, y, False)

    def _has_x(self):
        return self._has_item(1)

    @property
    def x(self) -> 'float':        
        """
        The X coordinate of a point.
        """
        return self._get_item(1)

    @x.setter
    def x(self, value):        
        """
        The X coordinate of a point.
        """
        self._set_item(1, value)

    def _has_y(self):
        return self._has_item(2)

    @property
    def y(self) -> 'float':        
        """
        The Y coordinate of a point.
        """
        return self._get_item(2)

    @y.setter
    def y(self, value):        
        """
        The Y coordinate of a point.
        """
        self._set_item(2, value)



class Rectangle(StructureBase):    
    """
    The structure representing a rectangular shape.
    
    :param float left: The left side of a rectangle.
    
    :param float top: The top side of a rectangle.
    
    :param float width: The width of a rectangle.
    
    :param float height: The height of a rectangle.
    """
    def __init__(self, left=0.0, top=0.0, width=0.0, height=0.0):
        super(Rectangle, self).__init__("Rectangle")

        self._init_item(1, DataType.DOUBLE, left, False)
        self._init_item(2, DataType.DOUBLE, top, False)
        self._init_item(3, DataType.DOUBLE, width, False)
        self._init_item(4, DataType.DOUBLE, height, False)

    def _has_left(self):
        return self._has_item(1)

    @property
    def left(self) -> 'float':        
        """
        The left side of a rectangle.
        """
        return self._get_item(1)

    @left.setter
    def left(self, value):        
        """
        The left side of a rectangle.
        """
        self._set_item(1, value)

    def _has_top(self):
        return self._has_item(2)

    @property
    def top(self) -> 'float':        
        """
        The top side of a rectangle.
        """
        return self._get_item(2)

    @top.setter
    def top(self, value):        
        """
        The top side of a rectangle.
        """
        self._set_item(2, value)

    def _has_width(self):
        return self._has_item(3)

    @property
    def width(self) -> 'float':        
        """
        The width of a rectangle.
        """
        return self._get_item(3)

    @width.setter
    def width(self, value):        
        """
        The width of a rectangle.
        """
        self._set_item(3, value)

    def _has_height(self):
        return self._has_item(4)

    @property
    def height(self) -> 'float':        
        """
        The height of a rectangle.
        """
        return self._get_item(4)

    @height.setter
    def height(self, value):        
        """
        The height of a rectangle.
        """
        self._set_item(4, value)



class Limits(StructureBase):    
    """
    The structure representing limits of a scalar quantity.
    
    :param float min: Minimal value.
    
    :param float max: Maximal value.
    """
    def __init__(self, min=0.0, max=0.0):
        super(Limits, self).__init__("Limits")

        self._init_item(1, DataType.DOUBLE, min, False)
        self._init_item(2, DataType.DOUBLE, max, False)

    def _has_min(self):
        return self._has_item(1)

    @property
    def min(self) -> 'float':        
        """
        Minimal value.
        """
        return self._get_item(1)

    @min.setter
    def min(self, value):        
        """
        Minimal value.
        """
        self._set_item(1, value)

    def _has_max(self):
        return self._has_item(2)

    @property
    def max(self) -> 'float':        
        """
        Maximal value.
        """
        return self._get_item(2)

    @max.setter
    def max(self, value):        
        """
        Maximal value.
        """
        self._set_item(2, value)



class Limits2d(StructureBase):    
    """
    The structure representing limits of a 2D quantity.
    
    :param Limits limits_x: Limits in X direction.
    
    :param Limits limits_y: Limits in Y direction.
    """
    def __init__(self, limits_x=None, limits_y=None):
        super(Limits2d, self).__init__("Limits2d")

        self._init_item(1, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Limits"), limits_x, False)
        self._init_item(2, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Limits"), limits_y, False)

    def _has_limits_x(self):
        return self._has_item(1)

    @property
    def limits_x(self) -> 'Limits':        
        """
        Limits in X direction.
        """
        return self._get_item(1)

    @limits_x.setter
    def limits_x(self, value):        
        """
        Limits in X direction.
        """
        self._set_item(1, value)

    def _has_limits_y(self):
        return self._has_item(2)

    @property
    def limits_y(self) -> 'Limits':        
        """
        Limits in Y direction.
        """
        return self._get_item(2)

    @limits_y.setter
    def limits_y(self, value):        
        """
        Limits in Y direction.
        """
        self._set_item(2, value)



class GrabFrameSettings(StructureBase):    
    """
    The structure representing additional settings for a grab frame action.
    
    :param str resolution: The resolution of the image. You can use ScanningResolution enumeration to access few preset resolutions.
    
    :param float dwell_time: The time the beam spends on a single pixel.
    
    :param int bit_depth: The number of bits representing one pixel. It can be either 8 or 16 bits for grayscale and 24 for RGB.
    
    :param Rectangle reduced_area: The rectangular area which should be grabbed specified in reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
    
    :param int line_integration: If the number is > 1, each line scan is repeated several times (from 2 to 255) before proceeding to the next line. Signal data collected from these passes are integrated and shown as an actual image line. The default is 1.
    
    :param int scan_interlacing: If the number is > 1, scanning splits an imaging area into blocks defined by the number of lines (from 2 to 8). In the first instance, the first line of each block is scanned, then the second one, etc. This imaging method significantly reduces sample charging. The default is 1.
    
    :param str preview_resolution: The resolution of the preview image. This property is applied only for large images (any side is longer than maximum predefined resolution side). In that case only preview is returned.
    """
    def __init__(self, resolution=None, dwell_time=None, bit_depth=None, reduced_area=None, line_integration=None, scan_interlacing=None, preview_resolution=None):
        super(GrabFrameSettings, self).__init__("GrabFrameSettings")

        self._init_item(6, DataType.STRING, resolution, True)
        self._init_item(7, DataType.DOUBLE, dwell_time, True)
        self._init_item(1, DataType.INT32, bit_depth, True)
        self._init_item(2, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Rectangle"), reduced_area, True)
        self._init_item(3, DataType.INT32, line_integration, True)
        self._init_item(5, DataType.INT32, scan_interlacing, True)
        self._init_item(8, DataType.STRING, preview_resolution, True)

    def _has_resolution(self):
        return self._has_item(6)

    @property
    def resolution(self) -> 'str':        
        """
        The resolution of the image. You can use ScanningResolution enumeration to access few preset resolutions.
        """
        return self._get_item(6)

    @resolution.setter
    def resolution(self, value):        
        """
        The resolution of the image. You can use ScanningResolution enumeration to access few preset resolutions.
        """
        self._set_item(6, value)

    def _has_dwell_time(self):
        return self._has_item(7)

    @property
    def dwell_time(self) -> 'float':        
        """
        The time the beam spends on a single pixel.
        """
        return self._get_item(7)

    @dwell_time.setter
    def dwell_time(self, value):        
        """
        The time the beam spends on a single pixel.
        """
        self._set_item(7, value)

    def _has_bit_depth(self):
        return self._has_item(1)

    @property
    def bit_depth(self) -> 'int':        
        """
        The number of bits representing one pixel. It can be either 8 or 16 bits for grayscale and 24 for RGB.
        """
        return self._get_item(1)

    @bit_depth.setter
    def bit_depth(self, value):        
        """
        The number of bits representing one pixel. It can be either 8 or 16 bits for grayscale and 24 for RGB.
        """
        self._set_item(1, value)

    def _has_reduced_area(self):
        return self._has_item(2)

    @property
    def reduced_area(self) -> 'Rectangle':        
        """
        The rectangular area which should be grabbed specified in reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
        """
        return self._get_item(2)

    @reduced_area.setter
    def reduced_area(self, value):        
        """
        The rectangular area which should be grabbed specified in reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
        """
        self._set_item(2, value)

    def _has_line_integration(self):
        return self._has_item(3)

    @property
    def line_integration(self) -> 'int':        
        """
        If the number is > 1, each line scan is repeated several times (from 2 to 255) before proceeding to the next line. Signal data collected from these passes are integrated and shown as an actual image line. The default is 1.
        """
        return self._get_item(3)

    @line_integration.setter
    def line_integration(self, value):        
        """
        If the number is > 1, each line scan is repeated several times (from 2 to 255) before proceeding to the next line. Signal data collected from these passes are integrated and shown as an actual image line. The default is 1.
        """
        self._set_item(3, value)

    def _has_scan_interlacing(self):
        return self._has_item(5)

    @property
    def scan_interlacing(self) -> 'int':        
        """
        If the number is > 1, scanning splits an imaging area into blocks defined by the number of lines (from 2 to 8). In the first instance, the first line of each block is scanned, then the second one, etc. This imaging method significantly reduces sample charging. The default is 1.
        """
        return self._get_item(5)

    @scan_interlacing.setter
    def scan_interlacing(self, value):        
        """
        If the number is > 1, scanning splits an imaging area into blocks defined by the number of lines (from 2 to 8). In the first instance, the first line of each block is scanned, then the second one, etc. This imaging method significantly reduces sample charging. The default is 1.
        """
        self._set_item(5, value)

    def _has_preview_resolution(self):
        return self._has_item(8)

    @property
    def preview_resolution(self) -> 'str':        
        """
        The resolution of the preview image. This property is applied only for large images (any side is longer than maximum predefined resolution side). In that case only preview is returned.
        """
        return self._get_item(8)

    @preview_resolution.setter
    def preview_resolution(self, value):        
        """
        The resolution of the preview image. This property is applied only for large images (any side is longer than maximum predefined resolution side). In that case only preview is returned.
        """
        self._set_item(8, value)



class RunAutoSourceTiltSettings(StructureBase):    
    """
    Settings for automatic source tilt adjustment routines.
    
    :param str method: Method to be used during the routine.
    
    :param float contrast: Detector contrast to be used during the routine.
    
    :param float brightness: Detector brightness to be used during the routine.
    
    :param float dwell_time: Dwell time to be used during the routine.
    
    :param str resolution: Resolution to be used during the routine.
    """
    def __init__(self, method=None, contrast=None, brightness=None, dwell_time=None, resolution=None):
        super(RunAutoSourceTiltSettings, self).__init__("RunAutoSourceTiltSettings")

        self._init_item(1, DataType.STRING, method, True)
        self._init_item(2, DataType.DOUBLE, contrast, True)
        self._init_item(3, DataType.DOUBLE, brightness, True)
        self._init_item(4, DataType.DOUBLE, dwell_time, True)
        self._init_item(5, DataType.STRING, resolution, True)

    def _has_method(self):
        return self._has_item(1)

    @property
    def method(self) -> 'str':        
        """
        Method to be used during the routine.
        """
        return self._get_item(1)

    @method.setter
    def method(self, value):        
        """
        Method to be used during the routine.
        """
        self._set_item(1, value)

    def _has_contrast(self):
        return self._has_item(2)

    @property
    def contrast(self) -> 'float':        
        """
        Detector contrast to be used during the routine.
        """
        return self._get_item(2)

    @contrast.setter
    def contrast(self, value):        
        """
        Detector contrast to be used during the routine.
        """
        self._set_item(2, value)

    def _has_brightness(self):
        return self._has_item(3)

    @property
    def brightness(self) -> 'float':        
        """
        Detector brightness to be used during the routine.
        """
        return self._get_item(3)

    @brightness.setter
    def brightness(self, value):        
        """
        Detector brightness to be used during the routine.
        """
        self._set_item(3, value)

    def _has_dwell_time(self):
        return self._has_item(4)

    @property
    def dwell_time(self) -> 'float':        
        """
        Dwell time to be used during the routine.
        """
        return self._get_item(4)

    @dwell_time.setter
    def dwell_time(self, value):        
        """
        Dwell time to be used during the routine.
        """
        self._set_item(4, value)

    def _has_resolution(self):
        return self._has_item(5)

    @property
    def resolution(self) -> 'str':        
        """
        Resolution to be used during the routine.
        """
        return self._get_item(5)

    @resolution.setter
    def resolution(self, value):        
        """
        Resolution to be used during the routine.
        """
        self._set_item(5, value)



class RunAutoCbSettings(StructureBase):    
    """
    Settings for automatic brightness and contrast adjustment routines.
    
    :param float black_target: Grayscale level at which the black pixels should be placed. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
    
    :param float white_target: Grayscale level at which the white pixels should be placed. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
    
    :param str method: Method to be used during the routine.
    
    :param bool calibrate_detector: Force detector calibration prior to running the routine. Normally, it is sufficient to calibrate the detector only once. Using this option, you can make the routine more robust in exchange for a slightly longer duration.
    
    :param float dwell_time: Dwell time to be used during the routine.
    
    :param int line_integration: Line integration to be used during the routine.
    
    :param float max_black_clipping: Maximum percentage of black pixels which can be clipped during the routine. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
    
    :param float max_white_clipping: Maximum percentage of white pixels which can be clipped during the routine. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
    
    :param int number_of_frames: Number of frames to be used during the routine.
    
    :param str resolution: Resolution to be used during the routine.
    
    :param float brightness_target: Brightness level at which the median brightness pixels should be placed. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
    """
    def __init__(self, black_target=None, white_target=None, method=None, calibrate_detector=None, dwell_time=None, line_integration=None, max_black_clipping=None, max_white_clipping=None, number_of_frames=None, resolution=None, brightness_target=None):
        super(RunAutoCbSettings, self).__init__("RunAutoCbSettings")

        self._init_item(1, DataType.DOUBLE, black_target, True)
        self._init_item(2, DataType.DOUBLE, white_target, True)
        self._init_item(3, DataType.STRING, method, True)
        self._init_item(4, DataType.BOOL, calibrate_detector, True)
        self._init_item(5, DataType.DOUBLE, dwell_time, True)
        self._init_item(6, DataType.INT32, line_integration, True)
        self._init_item(7, DataType.DOUBLE, max_black_clipping, True)
        self._init_item(8, DataType.DOUBLE, max_white_clipping, True)
        self._init_item(9, DataType.INT32, number_of_frames, True)
        self._init_item(10, DataType.STRING, resolution, True)
        self._init_item(11, DataType.DOUBLE, brightness_target, True)

    def _has_black_target(self):
        return self._has_item(1)

    @property
    def black_target(self) -> 'float':        
        """
        Grayscale level at which the black pixels should be placed. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
        """
        return self._get_item(1)

    @black_target.setter
    def black_target(self, value):        
        """
        Grayscale level at which the black pixels should be placed. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
        """
        self._set_item(1, value)

    def _has_white_target(self):
        return self._has_item(2)

    @property
    def white_target(self) -> 'float':        
        """
        Grayscale level at which the white pixels should be placed. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
        """
        return self._get_item(2)

    @white_target.setter
    def white_target(self, value):        
        """
        Grayscale level at which the white pixels should be placed. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
        """
        self._set_item(2, value)

    def _has_method(self):
        return self._has_item(3)

    @property
    def method(self) -> 'str':        
        """
        Method to be used during the routine.
        """
        return self._get_item(3)

    @method.setter
    def method(self, value):        
        """
        Method to be used during the routine.
        """
        self._set_item(3, value)

    def _has_calibrate_detector(self):
        return self._has_item(4)

    @property
    def calibrate_detector(self) -> 'bool':        
        """
        Force detector calibration prior to running the routine. Normally, it is sufficient to calibrate the detector only once. Using this option, you can make the routine more robust in exchange for a slightly longer duration.
        """
        return self._get_item(4)

    @calibrate_detector.setter
    def calibrate_detector(self, value):        
        """
        Force detector calibration prior to running the routine. Normally, it is sufficient to calibrate the detector only once. Using this option, you can make the routine more robust in exchange for a slightly longer duration.
        """
        self._set_item(4, value)

    def _has_dwell_time(self):
        return self._has_item(5)

    @property
    def dwell_time(self) -> 'float':        
        """
        Dwell time to be used during the routine.
        """
        return self._get_item(5)

    @dwell_time.setter
    def dwell_time(self, value):        
        """
        Dwell time to be used during the routine.
        """
        self._set_item(5, value)

    def _has_line_integration(self):
        return self._has_item(6)

    @property
    def line_integration(self) -> 'int':        
        """
        Line integration to be used during the routine.
        """
        return self._get_item(6)

    @line_integration.setter
    def line_integration(self, value):        
        """
        Line integration to be used during the routine.
        """
        self._set_item(6, value)

    def _has_max_black_clipping(self):
        return self._has_item(7)

    @property
    def max_black_clipping(self) -> 'float':        
        """
        Maximum percentage of black pixels which can be clipped during the routine. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
        """
        return self._get_item(7)

    @max_black_clipping.setter
    def max_black_clipping(self, value):        
        """
        Maximum percentage of black pixels which can be clipped during the routine. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
        """
        self._set_item(7, value)

    def _has_max_white_clipping(self):
        return self._has_item(8)

    @property
    def max_white_clipping(self) -> 'float':        
        """
        Maximum percentage of white pixels which can be clipped during the routine. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
        """
        return self._get_item(8)

    @max_white_clipping.setter
    def max_white_clipping(self, value):        
        """
        Maximum percentage of white pixels which can be clipped during the routine. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
        """
        self._set_item(8, value)

    def _has_number_of_frames(self):
        return self._has_item(9)

    @property
    def number_of_frames(self) -> 'int':        
        """
        Number of frames to be used during the routine.
        """
        return self._get_item(9)

    @number_of_frames.setter
    def number_of_frames(self, value):        
        """
        Number of frames to be used during the routine.
        """
        self._set_item(9, value)

    def _has_resolution(self):
        return self._has_item(10)

    @property
    def resolution(self) -> 'str':        
        """
        Resolution to be used during the routine.
        """
        return self._get_item(10)

    @resolution.setter
    def resolution(self, value):        
        """
        Resolution to be used during the routine.
        """
        self._set_item(10, value)

    def _has_brightness_target(self):
        return self._has_item(11)

    @property
    def brightness_target(self) -> 'float':        
        """
        Brightness level at which the median brightness pixels should be placed. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
        """
        return self._get_item(11)

    @brightness_target.setter
    def brightness_target(self, value):        
        """
        Brightness level at which the median brightness pixels should be placed. The value is expected to be in the range between [0, 1] corresponding to 0% - 100%.
        """
        self._set_item(11, value)



class RunAutoFocusSettings(StructureBase):    
    """
    Settings for automatic focus routines.
    
    :param str method: Method to be used during the routine.
    
    :param float dwell_time: Dwell time to be used during the routine.
    
    :param float horizontal_field_width: Horizontal field width to be used during the routine.
    
    :param int line_integration: Line integration to be used during the routine.
    
    :param int number_of_frames: Number of frames to be used during the routine.
    
    :param Rectangle reduced_area: Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
    
    :param str resolution: Resolution to be used during the routine.
    
    :param float working_distance_step: Initial working distance step to be used by the routine while searching for the optimal focus setting.
    """
    def __init__(self, method=None, dwell_time=None, horizontal_field_width=None, line_integration=None, number_of_frames=None, reduced_area=None, resolution=None, working_distance_step=None):
        super(RunAutoFocusSettings, self).__init__("RunAutoFocusSettings")

        self._init_item(1, DataType.STRING, method, True)
        self._init_item(2, DataType.DOUBLE, dwell_time, True)
        self._init_item(3, DataType.DOUBLE, horizontal_field_width, True)
        self._init_item(5, DataType.INT32, line_integration, True)
        self._init_item(6, DataType.INT32, number_of_frames, True)
        self._init_item(7, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Rectangle"), reduced_area, True)
        self._init_item(8, DataType.STRING, resolution, True)
        self._init_item(9, DataType.DOUBLE, working_distance_step, True)

    def _has_method(self):
        return self._has_item(1)

    @property
    def method(self) -> 'str':        
        """
        Method to be used during the routine.
        """
        return self._get_item(1)

    @method.setter
    def method(self, value):        
        """
        Method to be used during the routine.
        """
        self._set_item(1, value)

    def _has_dwell_time(self):
        return self._has_item(2)

    @property
    def dwell_time(self) -> 'float':        
        """
        Dwell time to be used during the routine.
        """
        return self._get_item(2)

    @dwell_time.setter
    def dwell_time(self, value):        
        """
        Dwell time to be used during the routine.
        """
        self._set_item(2, value)

    def _has_horizontal_field_width(self):
        return self._has_item(3)

    @property
    def horizontal_field_width(self) -> 'float':        
        """
        Horizontal field width to be used during the routine.
        """
        return self._get_item(3)

    @horizontal_field_width.setter
    def horizontal_field_width(self, value):        
        """
        Horizontal field width to be used during the routine.
        """
        self._set_item(3, value)

    def _has_line_integration(self):
        return self._has_item(5)

    @property
    def line_integration(self) -> 'int':        
        """
        Line integration to be used during the routine.
        """
        return self._get_item(5)

    @line_integration.setter
    def line_integration(self, value):        
        """
        Line integration to be used during the routine.
        """
        self._set_item(5, value)

    def _has_number_of_frames(self):
        return self._has_item(6)

    @property
    def number_of_frames(self) -> 'int':        
        """
        Number of frames to be used during the routine.
        """
        return self._get_item(6)

    @number_of_frames.setter
    def number_of_frames(self, value):        
        """
        Number of frames to be used during the routine.
        """
        self._set_item(6, value)

    def _has_reduced_area(self):
        return self._has_item(7)

    @property
    def reduced_area(self) -> 'Rectangle':        
        """
        Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
        """
        return self._get_item(7)

    @reduced_area.setter
    def reduced_area(self, value):        
        """
        Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
        """
        self._set_item(7, value)

    def _has_resolution(self):
        return self._has_item(8)

    @property
    def resolution(self) -> 'str':        
        """
        Resolution to be used during the routine.
        """
        return self._get_item(8)

    @resolution.setter
    def resolution(self, value):        
        """
        Resolution to be used during the routine.
        """
        self._set_item(8, value)

    def _has_working_distance_step(self):
        return self._has_item(9)

    @property
    def working_distance_step(self) -> 'float':        
        """
        Initial working distance step to be used by the routine while searching for the optimal focus setting.
        """
        return self._get_item(9)

    @working_distance_step.setter
    def working_distance_step(self, value):        
        """
        Initial working distance step to be used by the routine while searching for the optimal focus setting.
        """
        self._set_item(9, value)



class RunAutoLensAlignmentSettings(StructureBase):    
    """
    Settings for automatic lens alignment adjustment routines.
    
    :param str method: Method to be used during the routine.
    
    :param float dwell_time: Dwell time to be used during the routine.
    
    :param int line_integration: Line integration to be used during the routine.
    
    :param str modulation_type: Modulation type to be used during the routine.
    
    :param int number_of_frames: Number of frames to be used during the routine.
    
    :param Rectangle reduced_area: Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
    
    :param str resolution: Resolution to be used during the routine.
    """
    def __init__(self, method=None, dwell_time=None, line_integration=None, modulation_type=None, number_of_frames=None, reduced_area=None, resolution=None):
        super(RunAutoLensAlignmentSettings, self).__init__("RunAutoLensAlignmentSettings")

        self._init_item(1, DataType.STRING, method, True)
        self._init_item(2, DataType.DOUBLE, dwell_time, True)
        self._init_item(3, DataType.INT32, line_integration, True)
        self._init_item(4, DataType.STRING, modulation_type, True)
        self._init_item(5, DataType.INT32, number_of_frames, True)
        self._init_item(6, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Rectangle"), reduced_area, True)
        self._init_item(7, DataType.STRING, resolution, True)

    def _has_method(self):
        return self._has_item(1)

    @property
    def method(self) -> 'str':        
        """
        Method to be used during the routine.
        """
        return self._get_item(1)

    @method.setter
    def method(self, value):        
        """
        Method to be used during the routine.
        """
        self._set_item(1, value)

    def _has_dwell_time(self):
        return self._has_item(2)

    @property
    def dwell_time(self) -> 'float':        
        """
        Dwell time to be used during the routine.
        """
        return self._get_item(2)

    @dwell_time.setter
    def dwell_time(self, value):        
        """
        Dwell time to be used during the routine.
        """
        self._set_item(2, value)

    def _has_line_integration(self):
        return self._has_item(3)

    @property
    def line_integration(self) -> 'int':        
        """
        Line integration to be used during the routine.
        """
        return self._get_item(3)

    @line_integration.setter
    def line_integration(self, value):        
        """
        Line integration to be used during the routine.
        """
        self._set_item(3, value)

    def _has_modulation_type(self):
        return self._has_item(4)

    @property
    def modulation_type(self) -> 'str':        
        """
        Modulation type to be used during the routine.
        """
        return self._get_item(4)

    @modulation_type.setter
    def modulation_type(self, value):        
        """
        Modulation type to be used during the routine.
        """
        self._set_item(4, value)

    def _has_number_of_frames(self):
        return self._has_item(5)

    @property
    def number_of_frames(self) -> 'int':        
        """
        Number of frames to be used during the routine.
        """
        return self._get_item(5)

    @number_of_frames.setter
    def number_of_frames(self, value):        
        """
        Number of frames to be used during the routine.
        """
        self._set_item(5, value)

    def _has_reduced_area(self):
        return self._has_item(6)

    @property
    def reduced_area(self) -> 'Rectangle':        
        """
        Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
        """
        return self._get_item(6)

    @reduced_area.setter
    def reduced_area(self, value):        
        """
        Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
        """
        self._set_item(6, value)

    def _has_resolution(self):
        return self._has_item(7)

    @property
    def resolution(self) -> 'str':        
        """
        Resolution to be used during the routine.
        """
        return self._get_item(7)

    @resolution.setter
    def resolution(self, value):        
        """
        Resolution to be used during the routine.
        """
        self._set_item(7, value)



class RunAutoStigmatorCenteringSettings(StructureBase):    
    """
    Settings for automatic brightness and contrast adjustment routines.
    
    :param str method: Method to be used during the routine.
    
    :param float dwell_time: Dwell time to be used during the routine.
    
    :param int line_integration: Line integration to be used during the routine.
    
    :param int number_of_frames: Number of frames to be used during the routine.
    
    :param Rectangle reduced_area: Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
    
    :param str resolution: Resolution to be used during the routine.
    """
    def __init__(self, method=None, dwell_time=None, line_integration=None, number_of_frames=None, reduced_area=None, resolution=None):
        super(RunAutoStigmatorCenteringSettings, self).__init__("RunAutoStigmatorCenteringSettings")

        self._init_item(1, DataType.STRING, method, True)
        self._init_item(2, DataType.DOUBLE, dwell_time, True)
        self._init_item(3, DataType.INT32, line_integration, True)
        self._init_item(4, DataType.INT32, number_of_frames, True)
        self._init_item(5, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Rectangle"), reduced_area, True)
        self._init_item(6, DataType.STRING, resolution, True)

    def _has_method(self):
        return self._has_item(1)

    @property
    def method(self) -> 'str':        
        """
        Method to be used during the routine.
        """
        return self._get_item(1)

    @method.setter
    def method(self, value):        
        """
        Method to be used during the routine.
        """
        self._set_item(1, value)

    def _has_dwell_time(self):
        return self._has_item(2)

    @property
    def dwell_time(self) -> 'float':        
        """
        Dwell time to be used during the routine.
        """
        return self._get_item(2)

    @dwell_time.setter
    def dwell_time(self, value):        
        """
        Dwell time to be used during the routine.
        """
        self._set_item(2, value)

    def _has_line_integration(self):
        return self._has_item(3)

    @property
    def line_integration(self) -> 'int':        
        """
        Line integration to be used during the routine.
        """
        return self._get_item(3)

    @line_integration.setter
    def line_integration(self, value):        
        """
        Line integration to be used during the routine.
        """
        self._set_item(3, value)

    def _has_number_of_frames(self):
        return self._has_item(4)

    @property
    def number_of_frames(self) -> 'int':        
        """
        Number of frames to be used during the routine.
        """
        return self._get_item(4)

    @number_of_frames.setter
    def number_of_frames(self, value):        
        """
        Number of frames to be used during the routine.
        """
        self._set_item(4, value)

    def _has_reduced_area(self):
        return self._has_item(5)

    @property
    def reduced_area(self) -> 'Rectangle':        
        """
        Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
        """
        return self._get_item(5)

    @reduced_area.setter
    def reduced_area(self, value):        
        """
        Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
        """
        self._set_item(5, value)

    def _has_resolution(self):
        return self._has_item(6)

    @property
    def resolution(self) -> 'str':        
        """
        Resolution to be used during the routine.
        """
        return self._get_item(6)

    @resolution.setter
    def resolution(self, value):        
        """
        Resolution to be used during the routine.
        """
        self._set_item(6, value)



class RunAutoStigmatorSettings(StructureBase):    
    """
    Settings for automatic stigmator adjustment routines.
    
    :param str method: Method to be used during the routine.
    
    :param float dwell_time: Dwell time to be used during the routine.
    
    :param float horizontal_field_width: Horizontal field width to be used during the routine.
    
    :param int line_integration: Line integration to be used during the routine.
    
    :param int number_of_frames: Number of frames to be used during the routine.
    
    :param Rectangle reduced_area: Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
    
    :param str resolution: Resolution to be used during the routine.
    
    :param float stigmation_step: Initial stigmation step to be used by the routine while searching for the optimal stigmator setting.
    """
    def __init__(self, method=None, dwell_time=None, horizontal_field_width=None, line_integration=None, number_of_frames=None, reduced_area=None, resolution=None, stigmation_step=None):
        super(RunAutoStigmatorSettings, self).__init__("RunAutoStigmatorSettings")

        self._init_item(1, DataType.STRING, method, True)
        self._init_item(2, DataType.DOUBLE, dwell_time, True)
        self._init_item(3, DataType.DOUBLE, horizontal_field_width, True)
        self._init_item(4, DataType.INT32, line_integration, True)
        self._init_item(5, DataType.INT32, number_of_frames, True)
        self._init_item(6, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Rectangle"), reduced_area, True)
        self._init_item(7, DataType.STRING, resolution, True)
        self._init_item(8, DataType.DOUBLE, stigmation_step, True)

    def _has_method(self):
        return self._has_item(1)

    @property
    def method(self) -> 'str':        
        """
        Method to be used during the routine.
        """
        return self._get_item(1)

    @method.setter
    def method(self, value):        
        """
        Method to be used during the routine.
        """
        self._set_item(1, value)

    def _has_dwell_time(self):
        return self._has_item(2)

    @property
    def dwell_time(self) -> 'float':        
        """
        Dwell time to be used during the routine.
        """
        return self._get_item(2)

    @dwell_time.setter
    def dwell_time(self, value):        
        """
        Dwell time to be used during the routine.
        """
        self._set_item(2, value)

    def _has_horizontal_field_width(self):
        return self._has_item(3)

    @property
    def horizontal_field_width(self) -> 'float':        
        """
        Horizontal field width to be used during the routine.
        """
        return self._get_item(3)

    @horizontal_field_width.setter
    def horizontal_field_width(self, value):        
        """
        Horizontal field width to be used during the routine.
        """
        self._set_item(3, value)

    def _has_line_integration(self):
        return self._has_item(4)

    @property
    def line_integration(self) -> 'int':        
        """
        Line integration to be used during the routine.
        """
        return self._get_item(4)

    @line_integration.setter
    def line_integration(self, value):        
        """
        Line integration to be used during the routine.
        """
        self._set_item(4, value)

    def _has_number_of_frames(self):
        return self._has_item(5)

    @property
    def number_of_frames(self) -> 'int':        
        """
        Number of frames to be used during the routine.
        """
        return self._get_item(5)

    @number_of_frames.setter
    def number_of_frames(self, value):        
        """
        Number of frames to be used during the routine.
        """
        self._set_item(5, value)

    def _has_reduced_area(self):
        return self._has_item(6)

    @property
    def reduced_area(self) -> 'Rectangle':        
        """
        Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
        """
        return self._get_item(6)

    @reduced_area.setter
    def reduced_area(self, value):        
        """
        Reduced area to be used during the routine specified in Reduce area coordinate system. In this system point [0,0] means left-top image corner and point [1, 1] right-bottom image corner.
        """
        self._set_item(6, value)

    def _has_resolution(self):
        return self._has_item(7)

    @property
    def resolution(self) -> 'str':        
        """
        Resolution to be used during the routine.
        """
        return self._get_item(7)

    @resolution.setter
    def resolution(self, value):        
        """
        Resolution to be used during the routine.
        """
        self._set_item(7, value)

    def _has_stigmation_step(self):
        return self._has_item(8)

    @property
    def stigmation_step(self) -> 'float':        
        """
        Initial stigmation step to be used by the routine while searching for the optimal stigmator setting.
        """
        return self._get_item(8)

    @stigmation_step.setter
    def stigmation_step(self, value):        
        """
        Initial stigmation step to be used by the routine while searching for the optimal stigmator setting.
        """
        self._set_item(8, value)



class CompustagePosition(StructureBase):    
    """
    The structure representing a compustage position.
    
    :param float x: X coordinate.
    
    :param float y: Y coordinate.
    
    :param float z: Z coordinate.
    
    :param float a: Alpha coordinate.
    
    :param float b: Beta coordinate.
    """
    def __init__(self, x=None, y=None, z=None, a=None, b=None):
        super(CompustagePosition, self).__init__("CompustagePosition")

        self._init_item(1, DataType.DOUBLE, x, True)
        self._init_item(2, DataType.DOUBLE, y, True)
        self._init_item(3, DataType.DOUBLE, z, True)
        self._init_item(4, DataType.DOUBLE, a, True)
        self._init_item(5, DataType.DOUBLE, b, True)

    def _has_x(self):
        return self._has_item(1)

    @property
    def x(self) -> 'float':        
        """
        X coordinate.
        """
        return self._get_item(1)

    @x.setter
    def x(self, value):        
        """
        X coordinate.
        """
        self._set_item(1, value)

    def _has_y(self):
        return self._has_item(2)

    @property
    def y(self) -> 'float':        
        """
        Y coordinate.
        """
        return self._get_item(2)

    @y.setter
    def y(self, value):        
        """
        Y coordinate.
        """
        self._set_item(2, value)

    def _has_z(self):
        return self._has_item(3)

    @property
    def z(self) -> 'float':        
        """
        Z coordinate.
        """
        return self._get_item(3)

    @z.setter
    def z(self, value):        
        """
        Z coordinate.
        """
        self._set_item(3, value)

    def _has_a(self):
        return self._has_item(4)

    @property
    def a(self) -> 'float':        
        """
        Alpha coordinate.
        """
        return self._get_item(4)

    @a.setter
    def a(self, value):        
        """
        Alpha coordinate.
        """
        self._set_item(4, value)

    def _has_b(self):
        return self._has_item(5)

    @property
    def b(self) -> 'float':        
        """
        Beta coordinate.
        """
        return self._get_item(5)

    @b.setter
    def b(self, value):        
        """
        Beta coordinate.
        """
        self._set_item(5, value)



class StagePosition(StructureBase):    
    """
    The structure representing a stage position.
    
    :param float x: X coordinate.
    
    :param float y: Y coordinate.
    
    :param float z: Z coordinate.
    
    :param float r: Rotation.
    
    :param float t: Tilt.
    
    :param str coordinate_system: The coordinate system in which the position is specified.
    """
    def __init__(self, x=None, y=None, z=None, r=None, t=None, coordinate_system=None):
        super(StagePosition, self).__init__("StagePosition")

        self._init_item(1, DataType.DOUBLE, x, True)
        self._init_item(2, DataType.DOUBLE, y, True)
        self._init_item(3, DataType.DOUBLE, z, True)
        self._init_item(4, DataType.DOUBLE, r, True)
        self._init_item(5, DataType.DOUBLE, t, True)
        self._init_item(6, DataType.STRING, coordinate_system, False)

    def _has_x(self):
        return self._has_item(1)

    @property
    def x(self) -> 'float':        
        """
        X coordinate.
        """
        return self._get_item(1)

    @x.setter
    def x(self, value):        
        """
        X coordinate.
        """
        self._set_item(1, value)

    def _has_y(self):
        return self._has_item(2)

    @property
    def y(self) -> 'float':        
        """
        Y coordinate.
        """
        return self._get_item(2)

    @y.setter
    def y(self, value):        
        """
        Y coordinate.
        """
        self._set_item(2, value)

    def _has_z(self):
        return self._has_item(3)

    @property
    def z(self) -> 'float':        
        """
        Z coordinate.
        """
        return self._get_item(3)

    @z.setter
    def z(self, value):        
        """
        Z coordinate.
        """
        self._set_item(3, value)

    def _has_r(self):
        return self._has_item(4)

    @property
    def r(self) -> 'float':        
        """
        Rotation.
        """
        return self._get_item(4)

    @r.setter
    def r(self, value):        
        """
        Rotation.
        """
        self._set_item(4, value)

    def _has_t(self):
        return self._has_item(5)

    @property
    def t(self) -> 'float':        
        """
        Tilt.
        """
        return self._get_item(5)

    @t.setter
    def t(self, value):        
        """
        Tilt.
        """
        self._set_item(5, value)

    def _has_coordinate_system(self):
        return self._has_item(6)

    @property
    def coordinate_system(self) -> 'str':        
        """
        The coordinate system in which the position is specified.
        """
        return self._get_item(6)

    @coordinate_system.setter
    def coordinate_system(self, value):        
        """
        The coordinate system in which the position is specified.
        """
        self._set_item(6, value)



class ManipulatorPosition(StructureBase):    
    """
    The structure representing a manipulator position.
    
    :param float x: X coordinate.
    
    :param float y: Y coordinate.
    
    :param float z: Z coordinate.
    
    :param float r: Rotation.
    """
    def __init__(self, x=None, y=None, z=None, r=None):
        super(ManipulatorPosition, self).__init__("ManipulatorPosition")

        self._init_item(1, DataType.DOUBLE, x, True)
        self._init_item(2, DataType.DOUBLE, y, True)
        self._init_item(3, DataType.DOUBLE, z, True)
        self._init_item(4, DataType.DOUBLE, r, True)

    def _has_x(self):
        return self._has_item(1)

    @property
    def x(self) -> 'float':        
        """
        X coordinate.
        """
        return self._get_item(1)

    @x.setter
    def x(self, value):        
        """
        X coordinate.
        """
        self._set_item(1, value)

    def _has_y(self):
        return self._has_item(2)

    @property
    def y(self) -> 'float':        
        """
        Y coordinate.
        """
        return self._get_item(2)

    @y.setter
    def y(self, value):        
        """
        Y coordinate.
        """
        self._set_item(2, value)

    def _has_z(self):
        return self._has_item(3)

    @property
    def z(self) -> 'float':        
        """
        Z coordinate.
        """
        return self._get_item(3)

    @z.setter
    def z(self, value):        
        """
        Z coordinate.
        """
        self._set_item(3, value)

    def _has_r(self):
        return self._has_item(4)

    @property
    def r(self) -> 'float':        
        """
        Rotation.
        """
        return self._get_item(4)

    @r.setter
    def r(self, value):        
        """
        Rotation.
        """
        self._set_item(4, value)



class MoveSettings(StructureBase):    
    """
    The collection of additional options for a stage move.
    
    :param bool rotate_compucentric: The option specifies if compucentric rotation should be used in the move.
    
    :param bool link_z_y: The option specifies if z-y compensation should be used in the move.
    
    :param bool link_z_b: The option specifies if z-beta compensation should be used in the move. Supported for Compustage movements only.
    """
    def __init__(self, rotate_compucentric=None, link_z_y=None, link_z_b=None):
        super(MoveSettings, self).__init__("MoveSettings")

        self._init_item(1, DataType.BOOL, rotate_compucentric, True)
        self._init_item(2, DataType.BOOL, link_z_y, True)
        self._init_item(3, DataType.BOOL, link_z_b, True)

    def _has_rotate_compucentric(self):
        return self._has_item(1)

    @property
    def rotate_compucentric(self) -> 'bool':        
        """
        The option specifies if compucentric rotation should be used in the move.
        """
        return self._get_item(1)

    @rotate_compucentric.setter
    def rotate_compucentric(self, value):        
        """
        The option specifies if compucentric rotation should be used in the move.
        """
        self._set_item(1, value)

    def _has_link_z_y(self):
        return self._has_item(2)

    @property
    def link_z_y(self) -> 'bool':        
        """
        The option specifies if z-y compensation should be used in the move.
        """
        return self._get_item(2)

    @link_z_y.setter
    def link_z_y(self, value):        
        """
        The option specifies if z-y compensation should be used in the move.
        """
        self._set_item(2, value)

    def _has_link_z_b(self):
        return self._has_item(3)

    @property
    def link_z_b(self) -> 'bool':        
        """
        The option specifies if z-beta compensation should be used in the move. Supported for Compustage movements only.
        """
        return self._get_item(3)

    @link_z_b.setter
    def link_z_b(self, value):        
        """
        The option specifies if z-beta compensation should be used in the move. Supported for Compustage movements only.
        """
        self._set_item(3, value)



class ImageMatch(StructureBase):    
    """
    Information about match of a template in an image.
    
    :param Point center: Point structure containing coordinates of the center of the match in the original image, in pixels.
    
    :param float score: Level of confidence with which the template matching algorithm matched the template, in range between [0, 1] corresponding to 0% - 100%.
    """
    def __init__(self, center=None, score=None):
        super(ImageMatch, self).__init__("ImageMatch")

        self._init_item(1, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), center, False)
        self._init_item(2, DataType.DOUBLE, score, True)

    def _has_center(self):
        return self._has_item(1)

    @property
    def center(self) -> 'Point':        
        """
        Point structure containing coordinates of the center of the match in the original image, in pixels.
        """
        return self._get_item(1)

    @center.setter
    def center(self, value):        
        """
        Point structure containing coordinates of the center of the match in the original image, in pixels.
        """
        self._set_item(1, value)

    def _has_score(self):
        return self._has_item(2)

    @property
    def score(self) -> 'float':        
        """
        Level of confidence with which the template matching algorithm matched the template, in range between [0, 1] corresponding to 0% - 100%.
        """
        return self._get_item(2)

    @score.setter
    def score(self, value):        
        """
        Level of confidence with which the template matching algorithm matched the template, in range between [0, 1] corresponding to 0% - 100%.
        """
        self._set_item(2, value)



class StreamPatternDefinition(StructureBase):    
    """
    The definition of a stream pattern.
    
    :param bytes raw_points: Patterning points in a raw form.
    
    :param int repeat_count: The number of patterning cycles.
    
    :param int bit_depth: Bit depth of the point coordinates. It can be either 12 or 16.
    """
    def __init__(self, raw_points=None, repeat_count=0, bit_depth=0):
        super(StreamPatternDefinition, self).__init__("StreamPatternDefinition")

        self._init_item(1, DataType.BYTE_ARRAY, raw_points, False)
        self._init_item(2, DataType.INT32, repeat_count, False)
        self._init_item(3, DataType.INT32, bit_depth, False)

    def _has_raw_points(self):
        return self._has_item(1)

    @property
    def raw_points(self) -> 'bytes':        
        """
        Patterning points in a raw form.
        """
        return self._get_item(1)

    @raw_points.setter
    def raw_points(self, value):        
        """
        Patterning points in a raw form.
        """
        self._set_item(1, value)

    def _has_repeat_count(self):
        return self._has_item(2)

    @property
    def repeat_count(self) -> 'int':        
        """
        The number of patterning cycles.
        """
        return self._get_item(2)

    @repeat_count.setter
    def repeat_count(self, value):        
        """
        The number of patterning cycles.
        """
        self._set_item(2, value)

    def _has_bit_depth(self):
        return self._has_item(3)

    @property
    def bit_depth(self) -> 'int':        
        """
        Bit depth of the point coordinates. It can be either 12 or 16.
        """
        return self._get_item(3)

    @bit_depth.setter
    def bit_depth(self, value):        
        """
        Bit depth of the point coordinates. It can be either 12 or 16.
        """
        self._set_item(3, value)



class StreamPatternPoint(StructureBase):    
    """
    The stream pattern point.
    
    :param int x: The X coordinate of a point.
    
    :param int y: The Y coordinate of a point.
    
    :param float dwell_time: The dwell time in seconds.
    
    :param int flags: The bit mask for additional settings. Blank from file is reverted here.
    """
    def __init__(self, x=0, y=0, dwell_time=0.0, flags=0):
        super(StreamPatternPoint, self).__init__("StreamPatternPoint")

        self._init_item(1, DataType.INT32, x, False)
        self._init_item(2, DataType.INT32, y, False)
        self._init_item(3, DataType.DOUBLE, dwell_time, False)
        self._init_item(4, DataType.INT32, flags, False)

    def _has_x(self):
        return self._has_item(1)

    @property
    def x(self) -> 'int':        
        """
        The X coordinate of a point.
        """
        return self._get_item(1)

    @x.setter
    def x(self, value):        
        """
        The X coordinate of a point.
        """
        self._set_item(1, value)

    def _has_y(self):
        return self._has_item(2)

    @property
    def y(self) -> 'int':        
        """
        The Y coordinate of a point.
        """
        return self._get_item(2)

    @y.setter
    def y(self, value):        
        """
        The Y coordinate of a point.
        """
        self._set_item(2, value)

    def _has_dwell_time(self):
        return self._has_item(3)

    @property
    def dwell_time(self) -> 'float':        
        """
        The dwell time in seconds.
        """
        return self._get_item(3)

    @dwell_time.setter
    def dwell_time(self, value):        
        """
        The dwell time in seconds.
        """
        self._set_item(3, value)

    def _has_flags(self):
        return self._has_item(4)

    @property
    def flags(self) -> 'int':        
        """
        The bit mask for additional settings. Blank from file is reverted here.
        """
        return self._get_item(4)

    @flags.setter
    def flags(self, value):        
        """
        The bit mask for additional settings. Blank from file is reverted here.
        """
        self._set_item(4, value)



class BitmapPatternDefinition(StructureBase):    
    """
    The definition of a bitmap pattern.
    
    :param bytes raw_points: Patterning points in a raw form.
    
    :param int width: The width of the bitmap in pixels.
    
    :param int height: The height of the bitmap in pixels.
    """
    def __init__(self, raw_points=None, width=0, height=0):
        super(BitmapPatternDefinition, self).__init__("BitmapPatternDefinition")

        self._init_item(1, DataType.BYTE_ARRAY, raw_points, False)
        self._init_item(2, DataType.INT32, width, False)
        self._init_item(3, DataType.INT32, height, False)

    def _has_raw_points(self):
        return self._has_item(1)

    @property
    def raw_points(self) -> 'bytes':        
        """
        Patterning points in a raw form.
        """
        return self._get_item(1)

    @raw_points.setter
    def raw_points(self, value):        
        """
        Patterning points in a raw form.
        """
        self._set_item(1, value)

    def _has_width(self):
        return self._has_item(2)

    @property
    def width(self) -> 'int':        
        """
        The width of the bitmap in pixels.
        """
        return self._get_item(2)

    @width.setter
    def width(self, value):        
        """
        The width of the bitmap in pixels.
        """
        self._set_item(2, value)

    def _has_height(self):
        return self._has_item(3)

    @property
    def height(self) -> 'int':        
        """
        The height of the bitmap in pixels.
        """
        return self._get_item(3)

    @height.setter
    def height(self, value):        
        """
        The height of the bitmap in pixels.
        """
        self._set_item(3, value)



class BitmapPatternPoint(StructureBase):    
    """
    The bitmap pattern point.
    
    :param float dwell_time_coefficient: The coefficient used for blue color. Range is <0,1>.
    
    :param int flags: If flags are not zero, dwell time coefficient is used for green and red colors instead.
    """
    def __init__(self, dwell_time_coefficient=0.0, flags=0):
        super(BitmapPatternPoint, self).__init__("BitmapPatternPoint")

        self._init_item(1, DataType.DOUBLE, dwell_time_coefficient, False)
        self._init_item(2, DataType.INT32, flags, False)

    def _has_dwell_time_coefficient(self):
        return self._has_item(1)

    @property
    def dwell_time_coefficient(self) -> 'float':        
        """
        The coefficient used for blue color. Range is <0,1>.
        """
        return self._get_item(1)

    @dwell_time_coefficient.setter
    def dwell_time_coefficient(self, value):        
        """
        The coefficient used for blue color. Range is <0,1>.
        """
        self._set_item(1, value)

    def _has_flags(self):
        return self._has_item(2)

    @property
    def flags(self) -> 'int':        
        """
        If flags are not zero, dwell time coefficient is used for green and red colors instead.
        """
        return self._get_item(2)

    @flags.setter
    def flags(self, value):        
        """
        If flags are not zero, dwell time coefficient is used for green and red colors instead.
        """
        self._set_item(2, value)



class GetRtmPositionSettings(StructureBase):    
    """
    The structure specifying the setting of the get real time positions method.
    
    :param list pattern_ids: Specify which patterns should be used to retrieve positions from the RTM. If the list is empty, all patterns will be used.
    
    :param int coordinate_system: Specify the coordinate system of the retrieved positions.
    """
    def __init__(self, pattern_ids=None, coordinate_system=None):
        super(GetRtmPositionSettings, self).__init__("GetRtmPositionSettings")

        self._init_item(1, DataTypeDefinition(DataType.LIST_PRIMARY_ID, template_argument=DataType.INT32), pattern_ids, True)
        self._init_item(2, DataType.INT32, coordinate_system, True)

    def _has_pattern_ids(self):
        return self._has_item(1)

    @property
    def pattern_ids(self) -> 'List[int]':        
        """
        Specify which patterns should be used to retrieve positions from the RTM. If the list is empty, all patterns will be used.
        """
        return self._get_item(1)

    @pattern_ids.setter
    def pattern_ids(self, value):        
        """
        Specify which patterns should be used to retrieve positions from the RTM. If the list is empty, all patterns will be used.
        """
        self._set_item(1, value)

    def _has_coordinate_system(self):
        return self._has_item(2)

    @property
    def coordinate_system(self) -> 'int':        
        """
        Specify the coordinate system of the retrieved positions.
        """
        return self._get_item(2)

    @coordinate_system.setter
    def coordinate_system(self, value):        
        """
        Specify the coordinate system of the retrieved positions.
        """
        self._set_item(2, value)



class RtmPositionSet(StructureBase):    
    """
    The pattern point positions set.
    
    :param int pattern_id: The ID of the pattern.
    
    :param int coordinate_system: The coordinate system of the pattern point positions.
    
    :param bytes raw_positions: The raw data sent via network.
    """
    def __init__(self, pattern_id=0, coordinate_system=0, raw_positions=None):
        super(RtmPositionSet, self).__init__("RtmPositionSet")

        self._init_item(1, DataType.INT32, pattern_id, False)
        self._init_item(2, DataType.INT32, coordinate_system, False)
        self._init_item(3, DataType.BYTE_ARRAY, raw_positions, False)

    def _has_pattern_id(self):
        return self._has_item(1)

    @property
    def pattern_id(self) -> 'int':        
        """
        The ID of the pattern.
        """
        return self._get_item(1)

    @pattern_id.setter
    def pattern_id(self, value):        
        """
        The ID of the pattern.
        """
        self._set_item(1, value)

    def _has_coordinate_system(self):
        return self._has_item(2)

    @property
    def coordinate_system(self) -> 'int':        
        """
        The coordinate system of the pattern point positions.
        """
        return self._get_item(2)

    @coordinate_system.setter
    def coordinate_system(self, value):        
        """
        The coordinate system of the pattern point positions.
        """
        self._set_item(2, value)

    def _has_raw_positions(self):
        return self._has_item(3)

    @property
    def raw_positions(self) -> 'bytes':        
        """
        The raw data sent via network.
        """
        return self._get_item(3)

    @raw_positions.setter
    def raw_positions(self, value):        
        """
        The raw data sent via network.
        """
        self._set_item(3, value)



class RtmPosition(StructureBase):    
    """
    The pattern point position.
    
    :param int x: The X coordinate of a point.
    
    :param int y: The Y coordinate of a point.
    """
    def __init__(self, x=0, y=0):
        super(RtmPosition, self).__init__("RtmPosition")

        self._init_item(1, DataType.INT32, x, False)
        self._init_item(2, DataType.INT32, y, False)

    def _has_x(self):
        return self._has_item(1)

    @property
    def x(self) -> 'int':        
        """
        The X coordinate of a point.
        """
        return self._get_item(1)

    @x.setter
    def x(self, value):        
        """
        The X coordinate of a point.
        """
        self._set_item(1, value)

    def _has_y(self):
        return self._has_item(2)

    @property
    def y(self) -> 'int':        
        """
        The Y coordinate of a point.
        """
        return self._get_item(2)

    @y.setter
    def y(self, value):        
        """
        The Y coordinate of a point.
        """
        self._set_item(2, value)



class GetRtmDataSettings(StructureBase):    
    """
    The structure specifying the setting of the get_data() method.
    
    :param list pattern_ids: Specify which patterns should be used to retrieve data from the RTM. If the list is empty, all patterns will be used.
    
    :param bool wait_for_next_data: When the flag is set to True, the get_data() function call is waiting for next data. Once the data is available the call returns back to script. When no data was captured and patterning job was finished, None is returned. The flag can be useful for patterning jobs where one pass takes a lot of time and user doesn't want to process the same data twice.
    """
    def __init__(self, pattern_ids=None, wait_for_next_data=None):
        super(GetRtmDataSettings, self).__init__("GetRtmDataSettings")

        self._init_item(1, DataTypeDefinition(DataType.LIST_PRIMARY_ID, template_argument=DataType.INT32), pattern_ids, True)
        self._init_item(2, DataType.BOOL, wait_for_next_data, True)

    def _has_pattern_ids(self):
        return self._has_item(1)

    @property
    def pattern_ids(self) -> 'List[int]':        
        """
        Specify which patterns should be used to retrieve data from the RTM. If the list is empty, all patterns will be used.
        """
        return self._get_item(1)

    @pattern_ids.setter
    def pattern_ids(self, value):        
        """
        Specify which patterns should be used to retrieve data from the RTM. If the list is empty, all patterns will be used.
        """
        self._set_item(1, value)

    def _has_wait_for_next_data(self):
        return self._has_item(2)

    @property
    def wait_for_next_data(self) -> 'bool':        
        """
        When the flag is set to True, the get_data() function call is waiting for next data. Once the data is available the call returns back to script. When no data was captured and patterning job was finished, None is returned. The flag can be useful for patterning jobs where one pass takes a lot of time and user doesn't want to process the same data twice.
        """
        return self._get_item(2)

    @wait_for_next_data.setter
    def wait_for_next_data(self, value):        
        """
        When the flag is set to True, the get_data() function call is waiting for next data. Once the data is available the call returns back to script. When no data was captured and patterning job was finished, None is returned. The flag can be useful for patterning jobs where one pass takes a lot of time and user doesn't want to process the same data twice.
        """
        self._set_item(2, value)



class RtmDataSet(StructureBase):    
    """
    The pattern point data set.
    
    :param int pattern_id: The ID of the pattern.
    
    :param bytes raw_values: The raw data sent via network.
    """
    def __init__(self, pattern_id=0, raw_values=None):
        super(RtmDataSet, self).__init__("RtmDataSet")

        self._init_item(1, DataType.INT32, pattern_id, False)
        self._init_item(2, DataType.BYTE_ARRAY, raw_values, False)

    def _has_pattern_id(self):
        return self._has_item(1)

    @property
    def pattern_id(self) -> 'int':        
        """
        The ID of the pattern.
        """
        return self._get_item(1)

    @pattern_id.setter
    def pattern_id(self, value):        
        """
        The ID of the pattern.
        """
        self._set_item(1, value)

    def _has_raw_values(self):
        return self._has_item(2)

    @property
    def raw_values(self) -> 'bytes':        
        """
        The raw data sent via network.
        """
        return self._get_item(2)

    @raw_values.setter
    def raw_values(self, value):        
        """
        The raw data sent via network.
        """
        self._set_item(2, value)



class LargeImageHeader(StructureBase):
    def __init__(self, image_id=None, preview=None, part_count=0):
        super(LargeImageHeader, self).__init__("LargeImageHeader")

        self._init_item(1, DataType.STRING, image_id, False)
        self._init_item(2, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImage"), preview, False)
        self._init_item(3, DataType.INT32, part_count, False)

    def _has_image_id(self):
        return self._has_item(1)

    @property
    def image_id(self) -> 'str':
        return self._get_item(1)

    @image_id.setter
    def image_id(self, value):
        self._set_item(1, value)

    def _has_preview(self):
        return self._has_item(2)

    @property
    def preview(self) -> 'AdornedImage':
        return self._get_item(2)

    @preview.setter
    def preview(self, value):
        self._set_item(2, value)

    def _has_part_count(self):
        return self._has_item(3)

    @property
    def part_count(self) -> 'int':
        return self._get_item(3)

    @part_count.setter
    def part_count(self, value):
        self._set_item(3, value)



class AdornedImageMetadataOpticsScanFieldSize(StructureBase):
    def __init__(self, width=0.0, height=0.0):
        super(AdornedImageMetadataOpticsScanFieldSize, self).__init__("AdornedImageMetadataOpticsScanFieldSize")

        self._init_item(1, DataType.DOUBLE, width, False)
        self._init_item(2, DataType.DOUBLE, height, False)

    def _has_width(self):
        return self._has_item(1)

    @property
    def width(self) -> 'float':
        return self._get_item(1)

    @width.setter
    def width(self, value):
        self._set_item(1, value)

    def _has_height(self):
        return self._has_item(2)

    @property
    def height(self) -> 'float':
        return self._get_item(2)

    @height.setter
    def height(self, value):
        self._set_item(2, value)



class AdornedImageMetadataAcquisition(StructureBase):
    def __init__(self, acquisition_datetime=None, acquisition_id=None, acquisition_start_datetime=None, beam_type=None, column_type=None, source_type=None):
        super(AdornedImageMetadataAcquisition, self).__init__("AdornedImageMetadataAcquisition")

        self._init_item(1, DataType.STRING, acquisition_datetime, True)
        self._init_item(2, DataType.STRING, acquisition_id, True)
        self._init_item(3, DataType.STRING, acquisition_start_datetime, True)
        self._init_item(4, DataType.STRING, beam_type, True)
        self._init_item(5, DataType.STRING, column_type, True)
        self._init_item(6, DataType.STRING, source_type, True)

    def _has_acquisition_datetime(self):
        return self._has_item(1)

    @property
    def acquisition_datetime(self) -> 'str':
        return self._get_item(1)

    @acquisition_datetime.setter
    def acquisition_datetime(self, value):
        self._set_item(1, value)

    def _has_acquisition_id(self):
        return self._has_item(2)

    @property
    def acquisition_id(self) -> 'str':
        return self._get_item(2)

    @acquisition_id.setter
    def acquisition_id(self, value):
        self._set_item(2, value)

    def _has_acquisition_start_datetime(self):
        return self._has_item(3)

    @property
    def acquisition_start_datetime(self) -> 'str':
        return self._get_item(3)

    @acquisition_start_datetime.setter
    def acquisition_start_datetime(self, value):
        self._set_item(3, value)

    def _has_beam_type(self):
        return self._has_item(4)

    @property
    def beam_type(self) -> 'str':
        return self._get_item(4)

    @beam_type.setter
    def beam_type(self, value):
        self._set_item(4, value)

    def _has_column_type(self):
        return self._has_item(5)

    @property
    def column_type(self) -> 'str':
        return self._get_item(5)

    @column_type.setter
    def column_type(self, value):
        self._set_item(5, value)

    def _has_source_type(self):
        return self._has_item(6)

    @property
    def source_type(self) -> 'str':
        return self._get_item(6)

    @source_type.setter
    def source_type(self, value):
        self._set_item(6, value)



class AdornedImageMetadataBinaryResult(StructureBase):
    def __init__(self, acquisition_unit=None, bits_per_pixel=None, black_level=None, composition_type=None, detector=None, detector_index=None, digital_brightness=None, digital_contrast=None, encoding=None, filter_frame_count=None, filter_type=None, gamma=None, intensity_offset=None, intensity_scale=None, pixel_value_maximum=None, pixel_value_minimum=None, pixel_value_mean=None, pixel_value_standard_deviation=None, recursive_filter_coefficient=None, reference_transformation=None, sharpness=None, sharpness_algorithm=None, sigma=None, white_level=None, acquisition_area=None, image_size=None, offset=None, pixel_size=None):
        super(AdornedImageMetadataBinaryResult, self).__init__("AdornedImageMetadataBinaryResult")

        self._init_item(2, DataType.STRING, acquisition_unit, True)
        self._init_item(3, DataType.INT32, bits_per_pixel, True)
        self._init_item(4, DataType.DOUBLE, black_level, True)
        self._init_item(5, DataType.STRING, composition_type, True)
        self._init_item(6, DataType.STRING, detector, True)
        self._init_item(7, DataType.INT32, detector_index, True)
        self._init_item(8, DataType.DOUBLE, digital_brightness, True)
        self._init_item(9, DataType.DOUBLE, digital_contrast, True)
        self._init_item(10, DataType.STRING, encoding, True)
        self._init_item(11, DataType.INT32, filter_frame_count, True)
        self._init_item(12, DataType.STRING, filter_type, True)
        self._init_item(13, DataType.DOUBLE, gamma, True)
        self._init_item(15, DataType.DOUBLE, intensity_offset, True)
        self._init_item(16, DataType.DOUBLE, intensity_scale, True)
        self._init_item(19, DataType.DOUBLE, pixel_value_maximum, True)
        self._init_item(20, DataType.DOUBLE, pixel_value_minimum, True)
        self._init_item(21, DataType.DOUBLE, pixel_value_mean, True)
        self._init_item(22, DataType.DOUBLE, pixel_value_standard_deviation, True)
        self._init_item(23, DataType.DOUBLE, recursive_filter_coefficient, True)
        self._init_item(24, DataType.STRING, reference_transformation, True)
        self._init_item(25, DataType.DOUBLE, sharpness, True)
        self._init_item(26, DataType.STRING, sharpness_algorithm, True)
        self._init_item(27, DataType.DOUBLE, sigma, True)
        self._init_item(28, DataType.DOUBLE, white_level, True)
        self._init_item(29, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Rectangle"), acquisition_area, True)
        self._init_item(30, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), image_size, True)
        self._init_item(31, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), offset, True)
        self._init_item(32, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), pixel_size, True)

    def _has_acquisition_unit(self):
        return self._has_item(2)

    @property
    def acquisition_unit(self) -> 'str':
        return self._get_item(2)

    @acquisition_unit.setter
    def acquisition_unit(self, value):
        self._set_item(2, value)

    def _has_bits_per_pixel(self):
        return self._has_item(3)

    @property
    def bits_per_pixel(self) -> 'int':
        return self._get_item(3)

    @bits_per_pixel.setter
    def bits_per_pixel(self, value):
        self._set_item(3, value)

    def _has_black_level(self):
        return self._has_item(4)

    @property
    def black_level(self) -> 'float':
        return self._get_item(4)

    @black_level.setter
    def black_level(self, value):
        self._set_item(4, value)

    def _has_composition_type(self):
        return self._has_item(5)

    @property
    def composition_type(self) -> 'str':
        return self._get_item(5)

    @composition_type.setter
    def composition_type(self, value):
        self._set_item(5, value)

    def _has_detector(self):
        return self._has_item(6)

    @property
    def detector(self) -> 'str':
        return self._get_item(6)

    @detector.setter
    def detector(self, value):
        self._set_item(6, value)

    def _has_detector_index(self):
        return self._has_item(7)

    @property
    def detector_index(self) -> 'int':
        return self._get_item(7)

    @detector_index.setter
    def detector_index(self, value):
        self._set_item(7, value)

    def _has_digital_brightness(self):
        return self._has_item(8)

    @property
    def digital_brightness(self) -> 'float':
        return self._get_item(8)

    @digital_brightness.setter
    def digital_brightness(self, value):
        self._set_item(8, value)

    def _has_digital_contrast(self):
        return self._has_item(9)

    @property
    def digital_contrast(self) -> 'float':
        return self._get_item(9)

    @digital_contrast.setter
    def digital_contrast(self, value):
        self._set_item(9, value)

    def _has_encoding(self):
        return self._has_item(10)

    @property
    def encoding(self) -> 'str':
        return self._get_item(10)

    @encoding.setter
    def encoding(self, value):
        self._set_item(10, value)

    def _has_filter_frame_count(self):
        return self._has_item(11)

    @property
    def filter_frame_count(self) -> 'int':
        return self._get_item(11)

    @filter_frame_count.setter
    def filter_frame_count(self, value):
        self._set_item(11, value)

    def _has_filter_type(self):
        return self._has_item(12)

    @property
    def filter_type(self) -> 'str':
        return self._get_item(12)

    @filter_type.setter
    def filter_type(self, value):
        self._set_item(12, value)

    def _has_gamma(self):
        return self._has_item(13)

    @property
    def gamma(self) -> 'float':
        return self._get_item(13)

    @gamma.setter
    def gamma(self, value):
        self._set_item(13, value)

    def _has_intensity_offset(self):
        return self._has_item(15)

    @property
    def intensity_offset(self) -> 'float':
        return self._get_item(15)

    @intensity_offset.setter
    def intensity_offset(self, value):
        self._set_item(15, value)

    def _has_intensity_scale(self):
        return self._has_item(16)

    @property
    def intensity_scale(self) -> 'float':
        return self._get_item(16)

    @intensity_scale.setter
    def intensity_scale(self, value):
        self._set_item(16, value)

    def _has_pixel_value_maximum(self):
        return self._has_item(19)

    @property
    def pixel_value_maximum(self) -> 'float':
        return self._get_item(19)

    @pixel_value_maximum.setter
    def pixel_value_maximum(self, value):
        self._set_item(19, value)

    def _has_pixel_value_minimum(self):
        return self._has_item(20)

    @property
    def pixel_value_minimum(self) -> 'float':
        return self._get_item(20)

    @pixel_value_minimum.setter
    def pixel_value_minimum(self, value):
        self._set_item(20, value)

    def _has_pixel_value_mean(self):
        return self._has_item(21)

    @property
    def pixel_value_mean(self) -> 'float':
        return self._get_item(21)

    @pixel_value_mean.setter
    def pixel_value_mean(self, value):
        self._set_item(21, value)

    def _has_pixel_value_standard_deviation(self):
        return self._has_item(22)

    @property
    def pixel_value_standard_deviation(self) -> 'float':
        return self._get_item(22)

    @pixel_value_standard_deviation.setter
    def pixel_value_standard_deviation(self, value):
        self._set_item(22, value)

    def _has_recursive_filter_coefficient(self):
        return self._has_item(23)

    @property
    def recursive_filter_coefficient(self) -> 'float':
        return self._get_item(23)

    @recursive_filter_coefficient.setter
    def recursive_filter_coefficient(self, value):
        self._set_item(23, value)

    def _has_reference_transformation(self):
        return self._has_item(24)

    @property
    def reference_transformation(self) -> 'str':
        return self._get_item(24)

    @reference_transformation.setter
    def reference_transformation(self, value):
        self._set_item(24, value)

    def _has_sharpness(self):
        return self._has_item(25)

    @property
    def sharpness(self) -> 'float':
        return self._get_item(25)

    @sharpness.setter
    def sharpness(self, value):
        self._set_item(25, value)

    def _has_sharpness_algorithm(self):
        return self._has_item(26)

    @property
    def sharpness_algorithm(self) -> 'str':
        return self._get_item(26)

    @sharpness_algorithm.setter
    def sharpness_algorithm(self, value):
        self._set_item(26, value)

    def _has_sigma(self):
        return self._has_item(27)

    @property
    def sigma(self) -> 'float':
        return self._get_item(27)

    @sigma.setter
    def sigma(self, value):
        self._set_item(27, value)

    def _has_white_level(self):
        return self._has_item(28)

    @property
    def white_level(self) -> 'float':
        return self._get_item(28)

    @white_level.setter
    def white_level(self, value):
        self._set_item(28, value)

    def _has_acquisition_area(self):
        return self._has_item(29)

    @property
    def acquisition_area(self) -> 'Rectangle':
        return self._get_item(29)

    @acquisition_area.setter
    def acquisition_area(self, value):
        self._set_item(29, value)

    def _has_image_size(self):
        return self._has_item(30)

    @property
    def image_size(self) -> 'Point':
        return self._get_item(30)

    @image_size.setter
    def image_size(self, value):
        self._set_item(30, value)

    def _has_offset(self):
        return self._has_item(31)

    @property
    def offset(self) -> 'Point':
        return self._get_item(31)

    @offset.setter
    def offset(self, value):
        self._set_item(31, value)

    def _has_pixel_size(self):
        return self._has_item(32)

    @property
    def pixel_size(self) -> 'Point':
        return self._get_item(32)

    @pixel_size.setter
    def pixel_size(self, value):
        self._set_item(32, value)



class AdornedImageMetadataCore(StructureBase):
    def __init__(self, application_computer_name=None, application_software=None, application_software_version=None, comment=None, file_date_time=None, file_name=None, guid=None, md5_checksum=None, parent_guid=None, private_checksum=None, user_id=None):
        super(AdornedImageMetadataCore, self).__init__("AdornedImageMetadataCore")

        self._init_item(1, DataType.STRING, application_computer_name, True)
        self._init_item(2, DataType.STRING, application_software, True)
        self._init_item(3, DataType.STRING, application_software_version, True)
        self._init_item(4, DataType.STRING, comment, True)
        self._init_item(5, DataType.STRING, file_date_time, True)
        self._init_item(6, DataType.STRING, file_name, True)
        self._init_item(7, DataType.STRING, guid, True)
        self._init_item(8, DataType.BYTE_ARRAY, md5_checksum, True)
        self._init_item(9, DataType.STRING, parent_guid, True)
        self._init_item(10, DataType.BYTE_ARRAY, private_checksum, True)
        self._init_item(11, DataType.STRING, user_id, True)

    def _has_application_computer_name(self):
        return self._has_item(1)

    @property
    def application_computer_name(self) -> 'str':
        return self._get_item(1)

    @application_computer_name.setter
    def application_computer_name(self, value):
        self._set_item(1, value)

    def _has_application_software(self):
        return self._has_item(2)

    @property
    def application_software(self) -> 'str':
        return self._get_item(2)

    @application_software.setter
    def application_software(self, value):
        self._set_item(2, value)

    def _has_application_software_version(self):
        return self._has_item(3)

    @property
    def application_software_version(self) -> 'str':
        return self._get_item(3)

    @application_software_version.setter
    def application_software_version(self, value):
        self._set_item(3, value)

    def _has_comment(self):
        return self._has_item(4)

    @property
    def comment(self) -> 'str':
        return self._get_item(4)

    @comment.setter
    def comment(self, value):
        self._set_item(4, value)

    def _has_file_date_time(self):
        return self._has_item(5)

    @property
    def file_date_time(self) -> 'str':
        return self._get_item(5)

    @file_date_time.setter
    def file_date_time(self, value):
        self._set_item(5, value)

    def _has_file_name(self):
        return self._has_item(6)

    @property
    def file_name(self) -> 'str':
        return self._get_item(6)

    @file_name.setter
    def file_name(self, value):
        self._set_item(6, value)

    def _has_guid(self):
        return self._has_item(7)

    @property
    def guid(self) -> 'str':
        return self._get_item(7)

    @guid.setter
    def guid(self, value):
        self._set_item(7, value)

    def _has_md5_checksum(self):
        return self._has_item(8)

    @property
    def md5_checksum(self) -> 'bytes':
        return self._get_item(8)

    @md5_checksum.setter
    def md5_checksum(self, value):
        self._set_item(8, value)

    def _has_parent_guid(self):
        return self._has_item(9)

    @property
    def parent_guid(self) -> 'str':
        return self._get_item(9)

    @parent_guid.setter
    def parent_guid(self, value):
        self._set_item(9, value)

    def _has_private_checksum(self):
        return self._has_item(10)

    @property
    def private_checksum(self) -> 'bytes':
        return self._get_item(10)

    @private_checksum.setter
    def private_checksum(self, value):
        self._set_item(10, value)

    def _has_user_id(self):
        return self._has_item(11)

    @property
    def user_id(self) -> 'str':
        return self._get_item(11)

    @user_id.setter
    def user_id(self, value):
        self._set_item(11, value)



class AdornedImageMetadataDetector(StructureBase):
    def __init__(self, detector_name=None, detector_type=None, enabled=None, inserted=None):
        super(AdornedImageMetadataDetector, self).__init__("AdornedImageMetadataDetector")

        self._init_item(1, DataType.STRING, detector_name, True)
        self._init_item(2, DataType.STRING, detector_type, True)
        self._init_item(3, DataType.BOOL, enabled, True)
        self._init_item(4, DataType.BOOL, inserted, True)

    def _has_detector_name(self):
        return self._has_item(1)

    @property
    def detector_name(self) -> 'str':
        return self._get_item(1)

    @detector_name.setter
    def detector_name(self, value):
        self._set_item(1, value)

    def _has_detector_type(self):
        return self._has_item(2)

    @property
    def detector_type(self) -> 'str':
        return self._get_item(2)

    @detector_type.setter
    def detector_type(self, value):
        self._set_item(2, value)

    def _has_enabled(self):
        return self._has_item(3)

    @property
    def enabled(self) -> 'bool':
        return self._get_item(3)

    @enabled.setter
    def enabled(self, value):
        self._set_item(3, value)

    def _has_inserted(self):
        return self._has_item(4)

    @property
    def inserted(self) -> 'bool':
        return self._get_item(4)

    @inserted.setter
    def inserted(self, value):
        self._set_item(4, value)



class AdornedImageMetadataEnergyFilterSettings(StructureBase):
    def __init__(self, acceleration_voltage_offset=None, drift_tube_voltage=None, energy_selection_slit_width=None, energy_shift=None, entrance_aperture_diameter=None, entrance_aperture_type=None, energy_selection_slit_inserted=None):
        super(AdornedImageMetadataEnergyFilterSettings, self).__init__("AdornedImageMetadataEnergyFilterSettings")

        self._init_item(1, DataType.DOUBLE, acceleration_voltage_offset, True)
        self._init_item(2, DataType.DOUBLE, drift_tube_voltage, True)
        self._init_item(3, DataType.DOUBLE, energy_selection_slit_width, True)
        self._init_item(4, DataType.DOUBLE, energy_shift, True)
        self._init_item(5, DataType.DOUBLE, entrance_aperture_diameter, True)
        self._init_item(6, DataType.STRING, entrance_aperture_type, True)
        self._init_item(7, DataType.BOOL, energy_selection_slit_inserted, True)

    def _has_acceleration_voltage_offset(self):
        return self._has_item(1)

    @property
    def acceleration_voltage_offset(self) -> 'float':
        return self._get_item(1)

    @acceleration_voltage_offset.setter
    def acceleration_voltage_offset(self, value):
        self._set_item(1, value)

    def _has_drift_tube_voltage(self):
        return self._has_item(2)

    @property
    def drift_tube_voltage(self) -> 'float':
        return self._get_item(2)

    @drift_tube_voltage.setter
    def drift_tube_voltage(self, value):
        self._set_item(2, value)

    def _has_energy_selection_slit_width(self):
        return self._has_item(3)

    @property
    def energy_selection_slit_width(self) -> 'float':
        return self._get_item(3)

    @energy_selection_slit_width.setter
    def energy_selection_slit_width(self, value):
        self._set_item(3, value)

    def _has_energy_shift(self):
        return self._has_item(4)

    @property
    def energy_shift(self) -> 'float':
        return self._get_item(4)

    @energy_shift.setter
    def energy_shift(self, value):
        self._set_item(4, value)

    def _has_entrance_aperture_diameter(self):
        return self._has_item(5)

    @property
    def entrance_aperture_diameter(self) -> 'float':
        return self._get_item(5)

    @entrance_aperture_diameter.setter
    def entrance_aperture_diameter(self, value):
        self._set_item(5, value)

    def _has_entrance_aperture_type(self):
        return self._has_item(6)

    @property
    def entrance_aperture_type(self) -> 'str':
        return self._get_item(6)

    @entrance_aperture_type.setter
    def entrance_aperture_type(self, value):
        self._set_item(6, value)

    def _has_energy_selection_slit_inserted(self):
        return self._has_item(7)

    @property
    def energy_selection_slit_inserted(self) -> 'bool':
        return self._get_item(7)

    @energy_selection_slit_inserted.setter
    def energy_selection_slit_inserted(self, value):
        self._set_item(7, value)



class AdornedImageMetadataGasInjectionSystemGas(StructureBase):
    def __init__(self, crucible_temperature=None, gas_type=None):
        super(AdornedImageMetadataGasInjectionSystemGas, self).__init__("AdornedImageMetadataGasInjectionSystemGas")

        self._init_item(1, DataType.DOUBLE, crucible_temperature, True)
        self._init_item(2, DataType.STRING, gas_type, True)

    def _has_crucible_temperature(self):
        return self._has_item(1)

    @property
    def crucible_temperature(self) -> 'float':
        return self._get_item(1)

    @crucible_temperature.setter
    def crucible_temperature(self, value):
        self._set_item(1, value)

    def _has_gas_type(self):
        return self._has_item(2)

    @property
    def gas_type(self) -> 'str':
        return self._get_item(2)

    @gas_type.setter
    def gas_type(self, value):
        self._set_item(2, value)



class AdornedImageMetadataGasInjectionSystem(StructureBase):
    def __init__(self, gases=None, needle_temperature=None, gas_flow_on=None, heater_on=None, needle_state=None, port_name=None, port_number=None):
        super(AdornedImageMetadataGasInjectionSystem, self).__init__("AdornedImageMetadataGasInjectionSystem")

        self._init_item(1, DataTypeDefinition(DataType.LIST_PRIMARY_ID, template_argument=DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataGasInjectionSystemGas")), gases, False)
        self._init_item(2, DataType.DOUBLE, needle_temperature, True)
        self._init_item(3, DataType.BOOL, gas_flow_on, True)
        self._init_item(4, DataType.BOOL, heater_on, True)
        self._init_item(5, DataType.STRING, needle_state, True)
        self._init_item(6, DataType.STRING, port_name, True)
        self._init_item(7, DataType.INT32, port_number, True)

    def _has_gases(self):
        return self._has_item(1)

    @property
    def gases(self) -> 'List[AdornedImageMetadataGasInjectionSystemGas]':
        return self._get_item(1)

    @gases.setter
    def gases(self, value):
        self._set_item(1, value)

    def _has_needle_temperature(self):
        return self._has_item(2)

    @property
    def needle_temperature(self) -> 'float':
        return self._get_item(2)

    @needle_temperature.setter
    def needle_temperature(self, value):
        self._set_item(2, value)

    def _has_gas_flow_on(self):
        return self._has_item(3)

    @property
    def gas_flow_on(self) -> 'bool':
        return self._get_item(3)

    @gas_flow_on.setter
    def gas_flow_on(self, value):
        self._set_item(3, value)

    def _has_heater_on(self):
        return self._has_item(4)

    @property
    def heater_on(self) -> 'bool':
        return self._get_item(4)

    @heater_on.setter
    def heater_on(self, value):
        self._set_item(4, value)

    def _has_needle_state(self):
        return self._has_item(5)

    @property
    def needle_state(self) -> 'str':
        return self._get_item(5)

    @needle_state.setter
    def needle_state(self, value):
        self._set_item(5, value)

    def _has_port_name(self):
        return self._has_item(6)

    @property
    def port_name(self) -> 'str':
        return self._get_item(6)

    @port_name.setter
    def port_name(self, value):
        self._set_item(6, value)

    def _has_port_number(self):
        return self._has_item(7)

    @property
    def port_number(self) -> 'int':
        return self._get_item(7)

    @port_number.setter
    def port_number(self, value):
        self._set_item(7, value)



class AdornedImageMetadataInstrument(StructureBase):
    def __init__(self, acquisition_server=None, acquisition_server_version=None, computer_name=None, control_software=None, control_software_version=None, instrument_class=None, instrument_id=None, instrument_model=None, manufacturer=None):
        super(AdornedImageMetadataInstrument, self).__init__("AdornedImageMetadataInstrument")

        self._init_item(1, DataType.STRING, acquisition_server, True)
        self._init_item(2, DataType.STRING, acquisition_server_version, True)
        self._init_item(3, DataType.STRING, computer_name, True)
        self._init_item(4, DataType.STRING, control_software, True)
        self._init_item(5, DataType.STRING, control_software_version, True)
        self._init_item(6, DataType.STRING, instrument_class, True)
        self._init_item(7, DataType.STRING, instrument_id, True)
        self._init_item(8, DataType.STRING, instrument_model, True)
        self._init_item(9, DataType.STRING, manufacturer, True)

    def _has_acquisition_server(self):
        return self._has_item(1)

    @property
    def acquisition_server(self) -> 'str':
        return self._get_item(1)

    @acquisition_server.setter
    def acquisition_server(self, value):
        self._set_item(1, value)

    def _has_acquisition_server_version(self):
        return self._has_item(2)

    @property
    def acquisition_server_version(self) -> 'str':
        return self._get_item(2)

    @acquisition_server_version.setter
    def acquisition_server_version(self, value):
        self._set_item(2, value)

    def _has_computer_name(self):
        return self._has_item(3)

    @property
    def computer_name(self) -> 'str':
        return self._get_item(3)

    @computer_name.setter
    def computer_name(self, value):
        self._set_item(3, value)

    def _has_control_software(self):
        return self._has_item(4)

    @property
    def control_software(self) -> 'str':
        return self._get_item(4)

    @control_software.setter
    def control_software(self, value):
        self._set_item(4, value)

    def _has_control_software_version(self):
        return self._has_item(5)

    @property
    def control_software_version(self) -> 'str':
        return self._get_item(5)

    @control_software_version.setter
    def control_software_version(self, value):
        self._set_item(5, value)

    def _has_instrument_class(self):
        return self._has_item(6)

    @property
    def instrument_class(self) -> 'str':
        return self._get_item(6)

    @instrument_class.setter
    def instrument_class(self, value):
        self._set_item(6, value)

    def _has_instrument_id(self):
        return self._has_item(7)

    @property
    def instrument_id(self) -> 'str':
        return self._get_item(7)

    @instrument_id.setter
    def instrument_id(self, value):
        self._set_item(7, value)

    def _has_instrument_model(self):
        return self._has_item(8)

    @property
    def instrument_model(self) -> 'str':
        return self._get_item(8)

    @instrument_model.setter
    def instrument_model(self, value):
        self._set_item(8, value)

    def _has_manufacturer(self):
        return self._has_item(9)

    @property
    def manufacturer(self) -> 'str':
        return self._get_item(9)

    @manufacturer.setter
    def manufacturer(self, value):
        self._set_item(9, value)



class AdornedImageMetadataOpticsAperture(StructureBase):
    def __init__(self, diameter=None, index=None, mechanism_type=None, name=None, number=None, type=None, position_offset=None):
        super(AdornedImageMetadataOpticsAperture, self).__init__("AdornedImageMetadataOpticsAperture")

        self._init_item(1, DataType.DOUBLE, diameter, True)
        self._init_item(3, DataType.INT32, index, True)
        self._init_item(4, DataType.STRING, mechanism_type, True)
        self._init_item(5, DataType.STRING, name, True)
        self._init_item(6, DataType.INT32, number, True)
        self._init_item(7, DataType.STRING, type, True)
        self._init_item(8, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), position_offset, True)

    def _has_diameter(self):
        return self._has_item(1)

    @property
    def diameter(self) -> 'float':
        return self._get_item(1)

    @diameter.setter
    def diameter(self, value):
        self._set_item(1, value)

    def _has_index(self):
        return self._has_item(3)

    @property
    def index(self) -> 'int':
        return self._get_item(3)

    @index.setter
    def index(self, value):
        self._set_item(3, value)

    def _has_mechanism_type(self):
        return self._has_item(4)

    @property
    def mechanism_type(self) -> 'str':
        return self._get_item(4)

    @mechanism_type.setter
    def mechanism_type(self, value):
        self._set_item(4, value)

    def _has_name(self):
        return self._has_item(5)

    @property
    def name(self) -> 'str':
        return self._get_item(5)

    @name.setter
    def name(self, value):
        self._set_item(5, value)

    def _has_number(self):
        return self._has_item(6)

    @property
    def number(self) -> 'int':
        return self._get_item(6)

    @number.setter
    def number(self, value):
        self._set_item(6, value)

    def _has_type(self):
        return self._has_item(7)

    @property
    def type(self) -> 'str':
        return self._get_item(7)

    @type.setter
    def type(self, value):
        self._set_item(7, value)

    def _has_position_offset(self):
        return self._has_item(8)

    @property
    def position_offset(self) -> 'Point':
        return self._get_item(8)

    @position_offset.setter
    def position_offset(self, value):
        self._set_item(8, value)



class AdornedImageMetadataOptics(StructureBase):
    def __init__(self, acceleration_voltage=None, apertures=None, beam_convergence=None, beam_current=None, beam_current_selected=None, beam_diameter=None, camera_length=None, deceleration_voltage=None, defocus=None, emission_current=None, eucentric_working_distance=None, extractor_voltage=None, fib_l0_voltage=None, fib_l1_voltage=None, fib_l2_voltage=None, focus=None, full_scan_field_of_view=None, landing_energy=None, last_measured_screen_current=None, sample_pre_tilt_angle=None, scan_field_of_view=None, screen_current=None, spherical_aberration=None, spot_size=None, stem_focus=None, wehnelt_bias=None, working_distance=None, cross_over_on=None, diffraction_focus=None, eftem_on=None, gun_filament_settings=None, gun_lens_setting=None, high_magnification_mode=None, illumination_intensity_normalized=None, illumination_mode=None, illumination_on=None, illumination_type=None, nominal_magnification=None, objective_lens_mode=None, operation_mode=None, optical_mode=None, probe_mode=None, projector_mode=None, sample_tilt_correction_is_on=None, spot_index=None, tem_operating_sub_mode=None, beam_shift=None, beam_tilt=None, c1_lens_intensity=None, c2_lens_intensity=None, c3_lens_intensity=None, condenser_stigmator_raw=None, diffraction_lens_intensity=None, diffraction_stigmator_raw=None, fib_steering=None, gun_shift_raw=None, gun_stigmator_raw=None, gun_tilt_raw=None, image_shift=None, intermediate_lens_intensity=None, lorentz_lens_intensity=None, mini_condenser_lens_intensity=None, objective_lens_intensity=None, objective_stigmator_raw=None, projector1_lens_intensity=None, projector2_lens_intensity=None, stigmator_raw=None):
        super(AdornedImageMetadataOptics, self).__init__("AdornedImageMetadataOptics")

        self._init_item(1, DataType.DOUBLE, acceleration_voltage, True)
        self._init_item(2, DataTypeDefinition(DataType.LIST_PRIMARY_ID, template_argument=DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataOpticsAperture")), apertures, False)
        self._init_item(3, DataType.DOUBLE, beam_convergence, True)
        self._init_item(4, DataType.DOUBLE, beam_current, True)
        self._init_item(5, DataType.DOUBLE, beam_current_selected, True)
        self._init_item(6, DataType.DOUBLE, beam_diameter, True)
        self._init_item(12, DataType.DOUBLE, camera_length, True)
        self._init_item(14, DataType.DOUBLE, deceleration_voltage, True)
        self._init_item(15, DataType.DOUBLE, defocus, True)
        self._init_item(18, DataType.DOUBLE, emission_current, True)
        self._init_item(19, DataType.DOUBLE, eucentric_working_distance, True)
        self._init_item(20, DataType.DOUBLE, extractor_voltage, True)
        self._init_item(21, DataType.DOUBLE, fib_l0_voltage, True)
        self._init_item(22, DataType.DOUBLE, fib_l1_voltage, True)
        self._init_item(23, DataType.DOUBLE, fib_l2_voltage, True)
        self._init_item(25, DataType.DOUBLE, focus, True)
        self._init_item(26, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataOpticsScanFieldSize"), full_scan_field_of_view, True)
        self._init_item(30, DataType.DOUBLE, landing_energy, True)
        self._init_item(31, DataType.DOUBLE, last_measured_screen_current, True)
        self._init_item(38, DataType.DOUBLE, sample_pre_tilt_angle, True)
        self._init_item(39, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataOpticsScanFieldSize"), scan_field_of_view, True)
        self._init_item(40, DataType.DOUBLE, screen_current, True)
        self._init_item(41, DataType.DOUBLE, spherical_aberration, True)
        self._init_item(42, DataType.DOUBLE, spot_size, True)
        self._init_item(43, DataType.DOUBLE, stem_focus, True)
        self._init_item(44, DataType.DOUBLE, wehnelt_bias, True)
        self._init_item(45, DataType.DOUBLE, working_distance, True)
        self._init_item(46, DataType.BOOL, cross_over_on, True)
        self._init_item(47, DataType.DOUBLE, diffraction_focus, True)
        self._init_item(48, DataType.BOOL, eftem_on, True)
        self._init_item(49, DataType.DOUBLE, gun_filament_settings, True)
        self._init_item(50, DataType.DOUBLE, gun_lens_setting, True)
        self._init_item(53, DataType.STRING, high_magnification_mode, True)
        self._init_item(54, DataType.DOUBLE, illumination_intensity_normalized, True)
        self._init_item(55, DataType.STRING, illumination_mode, True)
        self._init_item(56, DataType.BOOL, illumination_on, True)
        self._init_item(57, DataType.STRING, illumination_type, True)
        self._init_item(58, DataType.DOUBLE, nominal_magnification, True)
        self._init_item(59, DataType.STRING, objective_lens_mode, True)
        self._init_item(60, DataType.STRING, operation_mode, True)
        self._init_item(61, DataType.STRING, optical_mode, True)
        self._init_item(62, DataType.STRING, probe_mode, True)
        self._init_item(63, DataType.STRING, projector_mode, True)
        self._init_item(64, DataType.BOOL, sample_tilt_correction_is_on, True)
        self._init_item(65, DataType.INT32, spot_index, True)
        self._init_item(67, DataType.STRING, tem_operating_sub_mode, True)
        self._init_item(68, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), beam_shift, True)
        self._init_item(69, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), beam_tilt, True)
        self._init_item(70, DataType.DOUBLE, c1_lens_intensity, True)
        self._init_item(71, DataType.DOUBLE, c2_lens_intensity, True)
        self._init_item(72, DataType.DOUBLE, c3_lens_intensity, True)
        self._init_item(73, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), condenser_stigmator_raw, True)
        self._init_item(74, DataType.DOUBLE, diffraction_lens_intensity, True)
        self._init_item(75, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), diffraction_stigmator_raw, True)
        self._init_item(76, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), fib_steering, True)
        self._init_item(77, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), gun_shift_raw, True)
        self._init_item(78, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), gun_stigmator_raw, True)
        self._init_item(79, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), gun_tilt_raw, True)
        self._init_item(80, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), image_shift, True)
        self._init_item(81, DataType.DOUBLE, intermediate_lens_intensity, True)
        self._init_item(82, DataType.DOUBLE, lorentz_lens_intensity, True)
        self._init_item(83, DataType.DOUBLE, mini_condenser_lens_intensity, True)
        self._init_item(84, DataType.DOUBLE, objective_lens_intensity, True)
        self._init_item(85, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), objective_stigmator_raw, True)
        self._init_item(86, DataType.DOUBLE, projector1_lens_intensity, True)
        self._init_item(87, DataType.DOUBLE, projector2_lens_intensity, True)
        self._init_item(88, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Point"), stigmator_raw, True)

    def _has_acceleration_voltage(self):
        return self._has_item(1)

    @property
    def acceleration_voltage(self) -> 'float':
        return self._get_item(1)

    @acceleration_voltage.setter
    def acceleration_voltage(self, value):
        self._set_item(1, value)

    def _has_apertures(self):
        return self._has_item(2)

    @property
    def apertures(self) -> 'List[AdornedImageMetadataOpticsAperture]':
        return self._get_item(2)

    @apertures.setter
    def apertures(self, value):
        self._set_item(2, value)

    def _has_beam_convergence(self):
        return self._has_item(3)

    @property
    def beam_convergence(self) -> 'float':
        return self._get_item(3)

    @beam_convergence.setter
    def beam_convergence(self, value):
        self._set_item(3, value)

    def _has_beam_current(self):
        return self._has_item(4)

    @property
    def beam_current(self) -> 'float':
        return self._get_item(4)

    @beam_current.setter
    def beam_current(self, value):
        self._set_item(4, value)

    def _has_beam_current_selected(self):
        return self._has_item(5)

    @property
    def beam_current_selected(self) -> 'float':
        return self._get_item(5)

    @beam_current_selected.setter
    def beam_current_selected(self, value):
        self._set_item(5, value)

    def _has_beam_diameter(self):
        return self._has_item(6)

    @property
    def beam_diameter(self) -> 'float':
        return self._get_item(6)

    @beam_diameter.setter
    def beam_diameter(self, value):
        self._set_item(6, value)

    def _has_camera_length(self):
        return self._has_item(12)

    @property
    def camera_length(self) -> 'float':
        return self._get_item(12)

    @camera_length.setter
    def camera_length(self, value):
        self._set_item(12, value)

    def _has_deceleration_voltage(self):
        return self._has_item(14)

    @property
    def deceleration_voltage(self) -> 'float':
        return self._get_item(14)

    @deceleration_voltage.setter
    def deceleration_voltage(self, value):
        self._set_item(14, value)

    def _has_defocus(self):
        return self._has_item(15)

    @property
    def defocus(self) -> 'float':
        return self._get_item(15)

    @defocus.setter
    def defocus(self, value):
        self._set_item(15, value)

    def _has_emission_current(self):
        return self._has_item(18)

    @property
    def emission_current(self) -> 'float':
        return self._get_item(18)

    @emission_current.setter
    def emission_current(self, value):
        self._set_item(18, value)

    def _has_eucentric_working_distance(self):
        return self._has_item(19)

    @property
    def eucentric_working_distance(self) -> 'float':
        return self._get_item(19)

    @eucentric_working_distance.setter
    def eucentric_working_distance(self, value):
        self._set_item(19, value)

    def _has_extractor_voltage(self):
        return self._has_item(20)

    @property
    def extractor_voltage(self) -> 'float':
        return self._get_item(20)

    @extractor_voltage.setter
    def extractor_voltage(self, value):
        self._set_item(20, value)

    def _has_fib_l0_voltage(self):
        return self._has_item(21)

    @property
    def fib_l0_voltage(self) -> 'float':
        return self._get_item(21)

    @fib_l0_voltage.setter
    def fib_l0_voltage(self, value):
        self._set_item(21, value)

    def _has_fib_l1_voltage(self):
        return self._has_item(22)

    @property
    def fib_l1_voltage(self) -> 'float':
        return self._get_item(22)

    @fib_l1_voltage.setter
    def fib_l1_voltage(self, value):
        self._set_item(22, value)

    def _has_fib_l2_voltage(self):
        return self._has_item(23)

    @property
    def fib_l2_voltage(self) -> 'float':
        return self._get_item(23)

    @fib_l2_voltage.setter
    def fib_l2_voltage(self, value):
        self._set_item(23, value)

    def _has_focus(self):
        return self._has_item(25)

    @property
    def focus(self) -> 'float':
        return self._get_item(25)

    @focus.setter
    def focus(self, value):
        self._set_item(25, value)

    def _has_full_scan_field_of_view(self):
        return self._has_item(26)

    @property
    def full_scan_field_of_view(self) -> 'AdornedImageMetadataOpticsScanFieldSize':
        return self._get_item(26)

    @full_scan_field_of_view.setter
    def full_scan_field_of_view(self, value):
        self._set_item(26, value)

    def _has_landing_energy(self):
        return self._has_item(30)

    @property
    def landing_energy(self) -> 'float':
        return self._get_item(30)

    @landing_energy.setter
    def landing_energy(self, value):
        self._set_item(30, value)

    def _has_last_measured_screen_current(self):
        return self._has_item(31)

    @property
    def last_measured_screen_current(self) -> 'float':
        return self._get_item(31)

    @last_measured_screen_current.setter
    def last_measured_screen_current(self, value):
        self._set_item(31, value)

    def _has_sample_pre_tilt_angle(self):
        return self._has_item(38)

    @property
    def sample_pre_tilt_angle(self) -> 'float':
        return self._get_item(38)

    @sample_pre_tilt_angle.setter
    def sample_pre_tilt_angle(self, value):
        self._set_item(38, value)

    def _has_scan_field_of_view(self):
        return self._has_item(39)

    @property
    def scan_field_of_view(self) -> 'AdornedImageMetadataOpticsScanFieldSize':
        return self._get_item(39)

    @scan_field_of_view.setter
    def scan_field_of_view(self, value):
        self._set_item(39, value)

    def _has_screen_current(self):
        return self._has_item(40)

    @property
    def screen_current(self) -> 'float':
        return self._get_item(40)

    @screen_current.setter
    def screen_current(self, value):
        self._set_item(40, value)

    def _has_spherical_aberration(self):
        return self._has_item(41)

    @property
    def spherical_aberration(self) -> 'float':
        return self._get_item(41)

    @spherical_aberration.setter
    def spherical_aberration(self, value):
        self._set_item(41, value)

    def _has_spot_size(self):
        return self._has_item(42)

    @property
    def spot_size(self) -> 'float':
        return self._get_item(42)

    @spot_size.setter
    def spot_size(self, value):
        self._set_item(42, value)

    def _has_stem_focus(self):
        return self._has_item(43)

    @property
    def stem_focus(self) -> 'float':
        return self._get_item(43)

    @stem_focus.setter
    def stem_focus(self, value):
        self._set_item(43, value)

    def _has_wehnelt_bias(self):
        return self._has_item(44)

    @property
    def wehnelt_bias(self) -> 'float':
        return self._get_item(44)

    @wehnelt_bias.setter
    def wehnelt_bias(self, value):
        self._set_item(44, value)

    def _has_working_distance(self):
        return self._has_item(45)

    @property
    def working_distance(self) -> 'float':
        return self._get_item(45)

    @working_distance.setter
    def working_distance(self, value):
        self._set_item(45, value)

    def _has_cross_over_on(self):
        return self._has_item(46)

    @property
    def cross_over_on(self) -> 'bool':
        return self._get_item(46)

    @cross_over_on.setter
    def cross_over_on(self, value):
        self._set_item(46, value)

    def _has_diffraction_focus(self):
        return self._has_item(47)

    @property
    def diffraction_focus(self) -> 'float':
        return self._get_item(47)

    @diffraction_focus.setter
    def diffraction_focus(self, value):
        self._set_item(47, value)

    def _has_eftem_on(self):
        return self._has_item(48)

    @property
    def eftem_on(self) -> 'bool':
        return self._get_item(48)

    @eftem_on.setter
    def eftem_on(self, value):
        self._set_item(48, value)

    def _has_gun_filament_settings(self):
        return self._has_item(49)

    @property
    def gun_filament_settings(self) -> 'float':
        return self._get_item(49)

    @gun_filament_settings.setter
    def gun_filament_settings(self, value):
        self._set_item(49, value)

    def _has_gun_lens_setting(self):
        return self._has_item(50)

    @property
    def gun_lens_setting(self) -> 'float':
        return self._get_item(50)

    @gun_lens_setting.setter
    def gun_lens_setting(self, value):
        self._set_item(50, value)

    def _has_high_magnification_mode(self):
        return self._has_item(53)

    @property
    def high_magnification_mode(self) -> 'str':
        return self._get_item(53)

    @high_magnification_mode.setter
    def high_magnification_mode(self, value):
        self._set_item(53, value)

    def _has_illumination_intensity_normalized(self):
        return self._has_item(54)

    @property
    def illumination_intensity_normalized(self) -> 'float':
        return self._get_item(54)

    @illumination_intensity_normalized.setter
    def illumination_intensity_normalized(self, value):
        self._set_item(54, value)

    def _has_illumination_mode(self):
        return self._has_item(55)

    @property
    def illumination_mode(self) -> 'str':
        return self._get_item(55)

    @illumination_mode.setter
    def illumination_mode(self, value):
        self._set_item(55, value)

    def _has_illumination_on(self):
        return self._has_item(56)

    @property
    def illumination_on(self) -> 'bool':
        return self._get_item(56)

    @illumination_on.setter
    def illumination_on(self, value):
        self._set_item(56, value)

    def _has_illumination_type(self):
        return self._has_item(57)

    @property
    def illumination_type(self) -> 'str':
        return self._get_item(57)

    @illumination_type.setter
    def illumination_type(self, value):
        self._set_item(57, value)

    def _has_nominal_magnification(self):
        return self._has_item(58)

    @property
    def nominal_magnification(self) -> 'float':
        return self._get_item(58)

    @nominal_magnification.setter
    def nominal_magnification(self, value):
        self._set_item(58, value)

    def _has_objective_lens_mode(self):
        return self._has_item(59)

    @property
    def objective_lens_mode(self) -> 'str':
        return self._get_item(59)

    @objective_lens_mode.setter
    def objective_lens_mode(self, value):
        self._set_item(59, value)

    def _has_operation_mode(self):
        return self._has_item(60)

    @property
    def operation_mode(self) -> 'str':
        return self._get_item(60)

    @operation_mode.setter
    def operation_mode(self, value):
        self._set_item(60, value)

    def _has_optical_mode(self):
        return self._has_item(61)

    @property
    def optical_mode(self) -> 'str':
        return self._get_item(61)

    @optical_mode.setter
    def optical_mode(self, value):
        self._set_item(61, value)

    def _has_probe_mode(self):
        return self._has_item(62)

    @property
    def probe_mode(self) -> 'str':
        return self._get_item(62)

    @probe_mode.setter
    def probe_mode(self, value):
        self._set_item(62, value)

    def _has_projector_mode(self):
        return self._has_item(63)

    @property
    def projector_mode(self) -> 'str':
        return self._get_item(63)

    @projector_mode.setter
    def projector_mode(self, value):
        self._set_item(63, value)

    def _has_sample_tilt_correction_is_on(self):
        return self._has_item(64)

    @property
    def sample_tilt_correction_is_on(self) -> 'bool':
        return self._get_item(64)

    @sample_tilt_correction_is_on.setter
    def sample_tilt_correction_is_on(self, value):
        self._set_item(64, value)

    def _has_spot_index(self):
        return self._has_item(65)

    @property
    def spot_index(self) -> 'int':
        return self._get_item(65)

    @spot_index.setter
    def spot_index(self, value):
        self._set_item(65, value)

    def _has_tem_operating_sub_mode(self):
        return self._has_item(67)

    @property
    def tem_operating_sub_mode(self) -> 'str':
        return self._get_item(67)

    @tem_operating_sub_mode.setter
    def tem_operating_sub_mode(self, value):
        self._set_item(67, value)

    def _has_beam_shift(self):
        return self._has_item(68)

    @property
    def beam_shift(self) -> 'Point':
        return self._get_item(68)

    @beam_shift.setter
    def beam_shift(self, value):
        self._set_item(68, value)

    def _has_beam_tilt(self):
        return self._has_item(69)

    @property
    def beam_tilt(self) -> 'Point':
        return self._get_item(69)

    @beam_tilt.setter
    def beam_tilt(self, value):
        self._set_item(69, value)

    def _has_c1_lens_intensity(self):
        return self._has_item(70)

    @property
    def c1_lens_intensity(self) -> 'float':
        return self._get_item(70)

    @c1_lens_intensity.setter
    def c1_lens_intensity(self, value):
        self._set_item(70, value)

    def _has_c2_lens_intensity(self):
        return self._has_item(71)

    @property
    def c2_lens_intensity(self) -> 'float':
        return self._get_item(71)

    @c2_lens_intensity.setter
    def c2_lens_intensity(self, value):
        self._set_item(71, value)

    def _has_c3_lens_intensity(self):
        return self._has_item(72)

    @property
    def c3_lens_intensity(self) -> 'float':
        return self._get_item(72)

    @c3_lens_intensity.setter
    def c3_lens_intensity(self, value):
        self._set_item(72, value)

    def _has_condenser_stigmator_raw(self):
        return self._has_item(73)

    @property
    def condenser_stigmator_raw(self) -> 'Point':
        return self._get_item(73)

    @condenser_stigmator_raw.setter
    def condenser_stigmator_raw(self, value):
        self._set_item(73, value)

    def _has_diffraction_lens_intensity(self):
        return self._has_item(74)

    @property
    def diffraction_lens_intensity(self) -> 'float':
        return self._get_item(74)

    @diffraction_lens_intensity.setter
    def diffraction_lens_intensity(self, value):
        self._set_item(74, value)

    def _has_diffraction_stigmator_raw(self):
        return self._has_item(75)

    @property
    def diffraction_stigmator_raw(self) -> 'Point':
        return self._get_item(75)

    @diffraction_stigmator_raw.setter
    def diffraction_stigmator_raw(self, value):
        self._set_item(75, value)

    def _has_fib_steering(self):
        return self._has_item(76)

    @property
    def fib_steering(self) -> 'Point':
        return self._get_item(76)

    @fib_steering.setter
    def fib_steering(self, value):
        self._set_item(76, value)

    def _has_gun_shift_raw(self):
        return self._has_item(77)

    @property
    def gun_shift_raw(self) -> 'Point':
        return self._get_item(77)

    @gun_shift_raw.setter
    def gun_shift_raw(self, value):
        self._set_item(77, value)

    def _has_gun_stigmator_raw(self):
        return self._has_item(78)

    @property
    def gun_stigmator_raw(self) -> 'Point':
        return self._get_item(78)

    @gun_stigmator_raw.setter
    def gun_stigmator_raw(self, value):
        self._set_item(78, value)

    def _has_gun_tilt_raw(self):
        return self._has_item(79)

    @property
    def gun_tilt_raw(self) -> 'Point':
        return self._get_item(79)

    @gun_tilt_raw.setter
    def gun_tilt_raw(self, value):
        self._set_item(79, value)

    def _has_image_shift(self):
        return self._has_item(80)

    @property
    def image_shift(self) -> 'Point':
        return self._get_item(80)

    @image_shift.setter
    def image_shift(self, value):
        self._set_item(80, value)

    def _has_intermediate_lens_intensity(self):
        return self._has_item(81)

    @property
    def intermediate_lens_intensity(self) -> 'float':
        return self._get_item(81)

    @intermediate_lens_intensity.setter
    def intermediate_lens_intensity(self, value):
        self._set_item(81, value)

    def _has_lorentz_lens_intensity(self):
        return self._has_item(82)

    @property
    def lorentz_lens_intensity(self) -> 'float':
        return self._get_item(82)

    @lorentz_lens_intensity.setter
    def lorentz_lens_intensity(self, value):
        self._set_item(82, value)

    def _has_mini_condenser_lens_intensity(self):
        return self._has_item(83)

    @property
    def mini_condenser_lens_intensity(self) -> 'float':
        return self._get_item(83)

    @mini_condenser_lens_intensity.setter
    def mini_condenser_lens_intensity(self, value):
        self._set_item(83, value)

    def _has_objective_lens_intensity(self):
        return self._has_item(84)

    @property
    def objective_lens_intensity(self) -> 'float':
        return self._get_item(84)

    @objective_lens_intensity.setter
    def objective_lens_intensity(self, value):
        self._set_item(84, value)

    def _has_objective_stigmator_raw(self):
        return self._has_item(85)

    @property
    def objective_stigmator_raw(self) -> 'Point':
        return self._get_item(85)

    @objective_stigmator_raw.setter
    def objective_stigmator_raw(self, value):
        self._set_item(85, value)

    def _has_projector1_lens_intensity(self):
        return self._has_item(86)

    @property
    def projector1_lens_intensity(self) -> 'float':
        return self._get_item(86)

    @projector1_lens_intensity.setter
    def projector1_lens_intensity(self, value):
        self._set_item(86, value)

    def _has_projector2_lens_intensity(self):
        return self._has_item(87)

    @property
    def projector2_lens_intensity(self) -> 'float':
        return self._get_item(87)

    @projector2_lens_intensity.setter
    def projector2_lens_intensity(self, value):
        self._set_item(87, value)

    def _has_stigmator_raw(self):
        return self._has_item(88)

    @property
    def stigmator_raw(self) -> 'Point':
        return self._get_item(88)

    @stigmator_raw.setter
    def stigmator_raw(self, value):
        self._set_item(88, value)



class AdornedImageMetadataSample(StructureBase):
    def __init__(self, region_of_interest_id=None, sample_description=None, sample_guid=None, sample_id=None, sample_session_id=None):
        super(AdornedImageMetadataSample, self).__init__("AdornedImageMetadataSample")

        self._init_item(1, DataType.STRING, region_of_interest_id, True)
        self._init_item(2, DataType.STRING, sample_description, True)
        self._init_item(3, DataType.STRING, sample_guid, True)
        self._init_item(4, DataType.STRING, sample_id, True)
        self._init_item(5, DataType.STRING, sample_session_id, True)

    def _has_region_of_interest_id(self):
        return self._has_item(1)

    @property
    def region_of_interest_id(self) -> 'str':
        return self._get_item(1)

    @region_of_interest_id.setter
    def region_of_interest_id(self, value):
        self._set_item(1, value)

    def _has_sample_description(self):
        return self._has_item(2)

    @property
    def sample_description(self) -> 'str':
        return self._get_item(2)

    @sample_description.setter
    def sample_description(self, value):
        self._set_item(2, value)

    def _has_sample_guid(self):
        return self._has_item(3)

    @property
    def sample_guid(self) -> 'str':
        return self._get_item(3)

    @sample_guid.setter
    def sample_guid(self, value):
        self._set_item(3, value)

    def _has_sample_id(self):
        return self._has_item(4)

    @property
    def sample_id(self) -> 'str':
        return self._get_item(4)

    @sample_id.setter
    def sample_id(self, value):
        self._set_item(4, value)

    def _has_sample_session_id(self):
        return self._has_item(5)

    @property
    def sample_session_id(self) -> 'str':
        return self._get_item(5)

    @sample_session_id.setter
    def sample_session_id(self, value):
        self._set_item(5, value)



class AdornedImageMetadataScanSettings(StructureBase):
    def __init__(self, scan_rotation=None, line_integration_count=None, line_interlacing=None, mains_lock_on=None, scan_size=None, acquisition_time=None, dwell_time=None, frame_time=None, line_time=None, scan_area=None):
        super(AdornedImageMetadataScanSettings, self).__init__("AdornedImageMetadataScanSettings")

        self._init_item(6, DataType.DOUBLE, scan_rotation, True)
        self._init_item(7, DataType.INT32, line_integration_count, True)
        self._init_item(8, DataType.INT32, line_interlacing, True)
        self._init_item(9, DataType.BOOL, mains_lock_on, True)
        self._init_item(10, DataType.STRING, scan_size, True)
        self._init_item(11, DataType.DOUBLE, acquisition_time, True)
        self._init_item(12, DataType.DOUBLE, dwell_time, True)
        self._init_item(13, DataType.DOUBLE, frame_time, True)
        self._init_item(14, DataType.DOUBLE, line_time, True)
        self._init_item(15, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Rectangle"), scan_area, True)

    def _has_scan_rotation(self):
        return self._has_item(6)

    @property
    def scan_rotation(self) -> 'float':
        return self._get_item(6)

    @scan_rotation.setter
    def scan_rotation(self, value):
        self._set_item(6, value)

    def _has_line_integration_count(self):
        return self._has_item(7)

    @property
    def line_integration_count(self) -> 'int':
        return self._get_item(7)

    @line_integration_count.setter
    def line_integration_count(self, value):
        self._set_item(7, value)

    def _has_line_interlacing(self):
        return self._has_item(8)

    @property
    def line_interlacing(self) -> 'int':
        return self._get_item(8)

    @line_interlacing.setter
    def line_interlacing(self, value):
        self._set_item(8, value)

    def _has_mains_lock_on(self):
        return self._has_item(9)

    @property
    def mains_lock_on(self) -> 'bool':
        return self._get_item(9)

    @mains_lock_on.setter
    def mains_lock_on(self, value):
        self._set_item(9, value)

    def _has_scan_size(self):
        return self._has_item(10)

    @property
    def scan_size(self) -> 'str':
        return self._get_item(10)

    @scan_size.setter
    def scan_size(self, value):
        self._set_item(10, value)

    def _has_acquisition_time(self):
        return self._has_item(11)

    @property
    def acquisition_time(self) -> 'float':
        return self._get_item(11)

    @acquisition_time.setter
    def acquisition_time(self, value):
        self._set_item(11, value)

    def _has_dwell_time(self):
        return self._has_item(12)

    @property
    def dwell_time(self) -> 'float':
        return self._get_item(12)

    @dwell_time.setter
    def dwell_time(self, value):
        self._set_item(12, value)

    def _has_frame_time(self):
        return self._has_item(13)

    @property
    def frame_time(self) -> 'float':
        return self._get_item(13)

    @frame_time.setter
    def frame_time(self, value):
        self._set_item(13, value)

    def _has_line_time(self):
        return self._has_item(14)

    @property
    def line_time(self) -> 'float':
        return self._get_item(14)

    @line_time.setter
    def line_time(self, value):
        self._set_item(14, value)

    def _has_scan_area(self):
        return self._has_item(15)

    @property
    def scan_area(self) -> 'Rectangle':
        return self._get_item(15)

    @scan_area.setter
    def scan_area(self, value):
        self._set_item(15, value)



class AdornedImageMetadataStageSettings(StructureBase):
    def __init__(self, holder_temperature=None, holder_type=None, sample_loader=None, stage_position_string=None, stage_position=None):
        super(AdornedImageMetadataStageSettings, self).__init__("AdornedImageMetadataStageSettings")

        self._init_item(1, DataType.DOUBLE, holder_temperature, True)
        self._init_item(2, DataType.STRING, holder_type, True)
        self._init_item(3, DataType.STRING, sample_loader, True)
        self._init_item(4, DataType.STRING, stage_position_string, True)
        self._init_item(5, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="StagePosition"), stage_position, True)

    def _has_holder_temperature(self):
        return self._has_item(1)

    @property
    def holder_temperature(self) -> 'float':
        return self._get_item(1)

    @holder_temperature.setter
    def holder_temperature(self, value):
        self._set_item(1, value)

    def _has_holder_type(self):
        return self._has_item(2)

    @property
    def holder_type(self) -> 'str':
        return self._get_item(2)

    @holder_type.setter
    def holder_type(self, value):
        self._set_item(2, value)

    def _has_sample_loader(self):
        return self._has_item(3)

    @property
    def sample_loader(self) -> 'str':
        return self._get_item(3)

    @sample_loader.setter
    def sample_loader(self, value):
        self._set_item(3, value)

    def _has_stage_position_string(self):
        return self._has_item(4)

    @property
    def stage_position_string(self) -> 'str':
        return self._get_item(4)

    @stage_position_string.setter
    def stage_position_string(self, value):
        self._set_item(4, value)

    def _has_stage_position(self):
        return self._has_item(5)

    @property
    def stage_position(self) -> 'StagePosition':
        return self._get_item(5)

    @stage_position.setter
    def stage_position(self, value):
        self._set_item(5, value)



class AdornedImageMetadataVacuumProperties(StructureBase):
    def __init__(self, electron_column_pressure=None, electron_source_pressure=None, ion_column_pressure=None, ion_source_pressure=None, projection_chamber_pressure=None, sample_pressure=None, vacuum_mode=None):
        super(AdornedImageMetadataVacuumProperties, self).__init__("AdornedImageMetadataVacuumProperties")

        self._init_item(1, DataType.DOUBLE, electron_column_pressure, True)
        self._init_item(2, DataType.DOUBLE, electron_source_pressure, True)
        self._init_item(3, DataType.DOUBLE, ion_column_pressure, True)
        self._init_item(4, DataType.DOUBLE, ion_source_pressure, True)
        self._init_item(5, DataType.DOUBLE, projection_chamber_pressure, True)
        self._init_item(6, DataType.DOUBLE, sample_pressure, True)
        self._init_item(7, DataType.STRING, vacuum_mode, True)

    def _has_electron_column_pressure(self):
        return self._has_item(1)

    @property
    def electron_column_pressure(self) -> 'float':
        return self._get_item(1)

    @electron_column_pressure.setter
    def electron_column_pressure(self, value):
        self._set_item(1, value)

    def _has_electron_source_pressure(self):
        return self._has_item(2)

    @property
    def electron_source_pressure(self) -> 'float':
        return self._get_item(2)

    @electron_source_pressure.setter
    def electron_source_pressure(self, value):
        self._set_item(2, value)

    def _has_ion_column_pressure(self):
        return self._has_item(3)

    @property
    def ion_column_pressure(self) -> 'float':
        return self._get_item(3)

    @ion_column_pressure.setter
    def ion_column_pressure(self, value):
        self._set_item(3, value)

    def _has_ion_source_pressure(self):
        return self._has_item(4)

    @property
    def ion_source_pressure(self) -> 'float':
        return self._get_item(4)

    @ion_source_pressure.setter
    def ion_source_pressure(self, value):
        self._set_item(4, value)

    def _has_projection_chamber_pressure(self):
        return self._has_item(5)

    @property
    def projection_chamber_pressure(self) -> 'float':
        return self._get_item(5)

    @projection_chamber_pressure.setter
    def projection_chamber_pressure(self, value):
        self._set_item(5, value)

    def _has_sample_pressure(self):
        return self._has_item(6)

    @property
    def sample_pressure(self) -> 'float':
        return self._get_item(6)

    @sample_pressure.setter
    def sample_pressure(self, value):
        self._set_item(6, value)

    def _has_vacuum_mode(self):
        return self._has_item(7)

    @property
    def vacuum_mode(self) -> 'str':
        return self._get_item(7)

    @vacuum_mode.setter
    def vacuum_mode(self, value):
        self._set_item(7, value)



class AdornedImageMetadata(StructureBase):
    def __init__(self, acquisition=None, binary_result=None, core=None, detectors=None, energy_filter_settings=None, gas_injection_systems=None, instrument=None, optics=None, sample=None, scan_settings=None, stage_settings=None, vacuum_properties=None, metadata_as_ini=None, metadata_as_xml=None):
        super(AdornedImageMetadata, self).__init__("AdornedImageMetadata")

        self._init_item(1, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataAcquisition"), acquisition, False)
        self._init_item(2, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataBinaryResult"), binary_result, False)
        self._init_item(3, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataCore"), core, False)
        self._init_item(4, DataTypeDefinition(DataType.LIST_PRIMARY_ID, template_argument=DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataDetector")), detectors, False)
        self._init_item(5, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataEnergyFilterSettings"), energy_filter_settings, False)
        self._init_item(6, DataTypeDefinition(DataType.LIST_PRIMARY_ID, template_argument=DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataGasInjectionSystem")), gas_injection_systems, False)
        self._init_item(7, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataInstrument"), instrument, False)
        self._init_item(8, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataOptics"), optics, False)
        self._init_item(9, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataSample"), sample, False)
        self._init_item(10, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataScanSettings"), scan_settings, False)
        self._init_item(11, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataStageSettings"), stage_settings, False)
        self._init_item(12, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadataVacuumProperties"), vacuum_properties, False)
        self._init_item(13, DataType.STRING, metadata_as_ini, False)
        self._init_item(14, DataType.STRING, metadata_as_xml, False)

    def _has_acquisition(self):
        return self._has_item(1)

    @property
    def acquisition(self) -> 'AdornedImageMetadataAcquisition':
        return self._get_item(1)

    @acquisition.setter
    def acquisition(self, value):
        self._set_item(1, value)

    def _has_binary_result(self):
        return self._has_item(2)

    @property
    def binary_result(self) -> 'AdornedImageMetadataBinaryResult':
        return self._get_item(2)

    @binary_result.setter
    def binary_result(self, value):
        self._set_item(2, value)

    def _has_core(self):
        return self._has_item(3)

    @property
    def core(self) -> 'AdornedImageMetadataCore':
        return self._get_item(3)

    @core.setter
    def core(self, value):
        self._set_item(3, value)

    def _has_detectors(self):
        return self._has_item(4)

    @property
    def detectors(self) -> 'List[AdornedImageMetadataDetector]':
        return self._get_item(4)

    @detectors.setter
    def detectors(self, value):
        self._set_item(4, value)

    def _has_energy_filter_settings(self):
        return self._has_item(5)

    @property
    def energy_filter_settings(self) -> 'AdornedImageMetadataEnergyFilterSettings':
        return self._get_item(5)

    @energy_filter_settings.setter
    def energy_filter_settings(self, value):
        self._set_item(5, value)

    def _has_gas_injection_systems(self):
        return self._has_item(6)

    @property
    def gas_injection_systems(self) -> 'List[AdornedImageMetadataGasInjectionSystem]':
        return self._get_item(6)

    @gas_injection_systems.setter
    def gas_injection_systems(self, value):
        self._set_item(6, value)

    def _has_instrument(self):
        return self._has_item(7)

    @property
    def instrument(self) -> 'AdornedImageMetadataInstrument':
        return self._get_item(7)

    @instrument.setter
    def instrument(self, value):
        self._set_item(7, value)

    def _has_optics(self):
        return self._has_item(8)

    @property
    def optics(self) -> 'AdornedImageMetadataOptics':
        return self._get_item(8)

    @optics.setter
    def optics(self, value):
        self._set_item(8, value)

    def _has_sample(self):
        return self._has_item(9)

    @property
    def sample(self) -> 'AdornedImageMetadataSample':
        return self._get_item(9)

    @sample.setter
    def sample(self, value):
        self._set_item(9, value)

    def _has_scan_settings(self):
        return self._has_item(10)

    @property
    def scan_settings(self) -> 'AdornedImageMetadataScanSettings':
        return self._get_item(10)

    @scan_settings.setter
    def scan_settings(self, value):
        self._set_item(10, value)

    def _has_stage_settings(self):
        return self._has_item(11)

    @property
    def stage_settings(self) -> 'AdornedImageMetadataStageSettings':
        return self._get_item(11)

    @stage_settings.setter
    def stage_settings(self, value):
        self._set_item(11, value)

    def _has_vacuum_properties(self):
        return self._has_item(12)

    @property
    def vacuum_properties(self) -> 'AdornedImageMetadataVacuumProperties':
        return self._get_item(12)

    @vacuum_properties.setter
    def vacuum_properties(self, value):
        self._set_item(12, value)

    def _has_metadata_as_ini(self):
        return self._has_item(13)

    @property
    def metadata_as_ini(self) -> 'str':
        return self._get_item(13)

    @metadata_as_ini.setter
    def metadata_as_ini(self, value):
        self._set_item(13, value)

    def _has_metadata_as_xml(self):
        return self._has_item(14)

    @property
    def metadata_as_xml(self) -> 'str':
        return self._get_item(14)

    @metadata_as_xml.setter
    def metadata_as_xml(self, value):
        self._set_item(14, value)



class AdornedImage(StructureBase):    
    """
    The structure representing one microscope image with additional metadata.
    
    :param bytes raw_data: Array containing image data as sent from the AutoScript server.
    
    :param int width: Width of the image.
    
    :param int height: Height of the image.
    
    :param int raw_encoding: Internal encoding of the image. To explain this property use enumeration ImageDataEncoding.
    
    :param int bit_depth: Bit depth of the image data.
    
    :param AdornedImageMetadata metadata: Metadata containing information about system state at the time this image was captured.
    """
    def __init__(self, raw_data=None, width=0, height=0, raw_encoding=0, bit_depth=0, metadata=None):
        super(AdornedImage, self).__init__("AdornedImage")

        self._init_item(1, DataType.BYTE_ARRAY, raw_data, False)
        self._init_item(2, DataType.INT32, width, False)
        self._init_item(3, DataType.INT32, height, False)
        self._init_item(4, DataType.INT32, raw_encoding, False)
        self._init_item(5, DataType.INT32, bit_depth, False)
        self._init_item(6, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImageMetadata"), metadata, True)

    def _has_raw_data(self):
        return self._has_item(1)

    @property
    def raw_data(self) -> 'bytes':        
        """
        Array containing image data as sent from the AutoScript server.
        """
        return self._get_item(1)

    @raw_data.setter
    def raw_data(self, value):        
        """
        Array containing image data as sent from the AutoScript server.
        """
        self._set_item(1, value)

    def _has_width(self):
        return self._has_item(2)

    @property
    def width(self) -> 'int':        
        """
        Width of the image.
        """
        return self._get_item(2)

    @width.setter
    def width(self, value):        
        """
        Width of the image.
        """
        self._set_item(2, value)

    def _has_height(self):
        return self._has_item(3)

    @property
    def height(self) -> 'int':        
        """
        Height of the image.
        """
        return self._get_item(3)

    @height.setter
    def height(self, value):        
        """
        Height of the image.
        """
        self._set_item(3, value)

    def _has_raw_encoding(self):
        return self._has_item(4)

    @property
    def raw_encoding(self) -> 'int':        
        """
        Internal encoding of the image. To explain this property use enumeration ImageDataEncoding.
        """
        return self._get_item(4)

    @raw_encoding.setter
    def raw_encoding(self, value):        
        """
        Internal encoding of the image. To explain this property use enumeration ImageDataEncoding.
        """
        self._set_item(4, value)

    def _has_bit_depth(self):
        return self._has_item(5)

    @property
    def bit_depth(self) -> 'int':        
        """
        Bit depth of the image data.
        """
        return self._get_item(5)

    @bit_depth.setter
    def bit_depth(self, value):        
        """
        Bit depth of the image data.
        """
        self._set_item(5, value)

    def _has_metadata(self):
        return self._has_item(6)

    @property
    def metadata(self) -> 'AdornedImageMetadata':        
        """
        Metadata containing information about system state at the time this image was captured.
        """
        return self._get_item(6)

    @metadata.setter
    def metadata(self, value):        
        """
        Metadata containing information about system state at the time this image was captured.
        """
        self._set_item(6, value)



class DetectorInsertSettings(StructureBase):    
    """
    Settings for the detector insert method.
    
    :param str insert_position: Detector insert position. The Stem4Positions enumeration can be used to specify this item.
    """
    def __init__(self, insert_position=None):
        super(DetectorInsertSettings, self).__init__("DetectorInsertSettings")

        self._init_item(1, DataType.STRING, insert_position, True)

    def _has_insert_position(self):
        return self._has_item(1)

    @property
    def insert_position(self) -> 'str':        
        """
        Detector insert position. The Stem4Positions enumeration can be used to specify this item.
        """
        return self._get_item(1)

    @insert_position.setter
    def insert_position(self, value):        
        """
        Detector insert position. The Stem4Positions enumeration can be used to specify this item.
        """
        self._set_item(1, value)



class VacuumSettings(StructureBase):    
    """
    Settings for pumping the chamber.
    
    :param str mode: Sets target chamber mode. Accepts values from VacuumMode enumeration.
    
    :param str gas: Sets target chamber gas type. If set, it needs to be specified whether should be used Low Vacuum or ESEM. Accepts values from VacuumGasType enumeration.
    
    :param float pressure: Sets the target chamber pressure.
    """
    def __init__(self, mode=None, gas=None, pressure=None):
        super(VacuumSettings, self).__init__("VacuumSettings")

        self._init_item(1, DataType.STRING, mode, True)
        self._init_item(2, DataType.STRING, gas, True)
        self._init_item(3, DataType.DOUBLE, pressure, True)

    def _has_mode(self):
        return self._has_item(1)

    @property
    def mode(self) -> 'str':        
        """
        Sets target chamber mode. Accepts values from VacuumMode enumeration.
        """
        return self._get_item(1)

    @mode.setter
    def mode(self, value):        
        """
        Sets target chamber mode. Accepts values from VacuumMode enumeration.
        """
        self._set_item(1, value)

    def _has_gas(self):
        return self._has_item(2)

    @property
    def gas(self) -> 'str':        
        """
        Sets target chamber gas type. If set, it needs to be specified whether should be used Low Vacuum or ESEM. Accepts values from VacuumGasType enumeration.
        """
        return self._get_item(2)

    @gas.setter
    def gas(self, value):        
        """
        Sets target chamber gas type. If set, it needs to be specified whether should be used Low Vacuum or ESEM. Accepts values from VacuumGasType enumeration.
        """
        self._set_item(2, value)

    def _has_pressure(self):
        return self._has_item(3)

    @property
    def pressure(self) -> 'float':        
        """
        Sets the target chamber pressure.
        """
        return self._get_item(3)

    @pressure.setter
    def pressure(self, value):        
        """
        Sets the target chamber pressure.
        """
        self._set_item(3, value)



class Variant(StructureBase):    
    """
    The structure that can hold integer, float, boolean or string.
    
    :param float value_double: 
    
    :param int value_int: 
    
    :param bool value_bool: 
    
    :param str value_string: 
    """
    def __init__(self, value_double=None, value_int=None, value_bool=None, value_string=None):
        super(Variant, self).__init__("Variant")

        self._init_item(1, DataType.DOUBLE, value_double, True)
        self._init_item(2, DataType.INT32, value_int, True)
        self._init_item(3, DataType.BOOL, value_bool, True)
        self._init_item(4, DataType.STRING, value_string, True)

    def _has_value_double(self):
        return self._has_item(1)

    @property
    def value_double(self) -> 'float':
        return self._get_item(1)

    @value_double.setter
    def value_double(self, value):
        self._set_item(1, value)

    def _has_value_int(self):
        return self._has_item(2)

    @property
    def value_int(self) -> 'int':
        return self._get_item(2)

    @value_int.setter
    def value_int(self, value):
        self._set_item(2, value)

    def _has_value_bool(self):
        return self._has_item(3)

    @property
    def value_bool(self) -> 'bool':
        return self._get_item(3)

    @value_bool.setter
    def value_bool(self, value):
        self._set_item(3, value)

    def _has_value_string(self):
        return self._has_item(4)

    @property
    def value_string(self) -> 'str':
        return self._get_item(4)

    @value_string.setter
    def value_string(self, value):
        self._set_item(4, value)



class TemperatureSettings(StructureBase):    
    """
    Settings for controlling temperature of heating or cooling stages.
    
    :param float target_temperature: Target temperature in Kelvins.
    
    :param float ramping_speed: Temperature ramping speed in Kelvins per second.
    
    :param float soak_time: Time in seconds to remain at the target temperature after it has been reached within the specified tolerance.
    
    :param float tolerance: Minimum desired difference between target and actual temperatures, in Kelvins.
    
    :param int timeout: Maximum time the temperature ramping can last, in seconds.
    """
    def __init__(self, target_temperature=None, ramping_speed=None, soak_time=None, tolerance=None, timeout=None):
        super(TemperatureSettings, self).__init__("TemperatureSettings")

        self._init_item(1, DataType.DOUBLE, target_temperature, True)
        self._init_item(2, DataType.DOUBLE, ramping_speed, True)
        self._init_item(3, DataType.DOUBLE, soak_time, True)
        self._init_item(4, DataType.DOUBLE, tolerance, True)
        self._init_item(5, DataType.INT32, timeout, True)

    def _has_target_temperature(self):
        return self._has_item(1)

    @property
    def target_temperature(self) -> 'float':        
        """
        Target temperature in Kelvins.
        """
        return self._get_item(1)

    @target_temperature.setter
    def target_temperature(self, value):        
        """
        Target temperature in Kelvins.
        """
        self._set_item(1, value)

    def _has_ramping_speed(self):
        return self._has_item(2)

    @property
    def ramping_speed(self) -> 'float':        
        """
        Temperature ramping speed in Kelvins per second.
        """
        return self._get_item(2)

    @ramping_speed.setter
    def ramping_speed(self, value):        
        """
        Temperature ramping speed in Kelvins per second.
        """
        self._set_item(2, value)

    def _has_soak_time(self):
        return self._has_item(3)

    @property
    def soak_time(self) -> 'float':        
        """
        Time in seconds to remain at the target temperature after it has been reached within the specified tolerance.
        """
        return self._get_item(3)

    @soak_time.setter
    def soak_time(self, value):        
        """
        Time in seconds to remain at the target temperature after it has been reached within the specified tolerance.
        """
        self._set_item(3, value)

    def _has_tolerance(self):
        return self._has_item(4)

    @property
    def tolerance(self) -> 'float':        
        """
        Minimum desired difference between target and actual temperatures, in Kelvins.
        """
        return self._get_item(4)

    @tolerance.setter
    def tolerance(self, value):        
        """
        Minimum desired difference between target and actual temperatures, in Kelvins.
        """
        self._set_item(4, value)

    def _has_timeout(self):
        return self._has_item(5)

    @property
    def timeout(self) -> 'int':        
        """
        Maximum time the temperature ramping can last, in seconds.
        """
        return self._get_item(5)

    @timeout.setter
    def timeout(self, value):        
        """
        Maximum time the temperature ramping can last, in seconds.
        """
        self._set_item(5, value)

