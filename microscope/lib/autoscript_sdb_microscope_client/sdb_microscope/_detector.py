# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client.structures import DetectorInsertSettings 
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition, UndefinedParameter
from .detector._brightness import Brightness
from .detector._contrast import Contrast
from .detector._mode import Mode
from .detector._type import Type
from .detector._custom_settings import CustomSettings


class Detector(object):    
    """
    The object provides control and status of the microscope's detectors.
    """
    __slots__ = ["__id", "__application_client", "__brightness", "__contrast", "__mode", "__type", "__custom_settings"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Detector"

        self.__brightness = Brightness(self.__application_client)
        self.__contrast = Contrast(self.__application_client)
        self.__mode = Mode(self.__application_client)
        self.__type = Type(self.__application_client)
        self.__custom_settings = CustomSettings(self.__application_client)

    @property
    def brightness(self) -> 'Brightness':        
        """
        The group provides control of the voltage offset of the active detector.
        """
        return self.__brightness

    @property
    def contrast(self) -> 'Contrast':        
        """
        The group provides control of the electronic gain of the active detector.
        """
        return self.__contrast

    @property
    def mode(self) -> 'Mode':        
        """
        The group provides control of the active detector mode.
        """
        return self.__mode

    @property
    def type(self) -> 'Type':        
        """
        The group provides control of the active detector type.
        """
        return self.__type

    @property
    def custom_settings(self) -> 'CustomSettings':        
        """
        The object provides control and status of the additional detectors settings.
        """
        return self.__custom_settings

    def set_type_mode(self, type, mode):        
        """
        The methods sets both active detector type and mode.
        
        :param str type: New detector type. You can use DetectorType enumeration.
        
        :param str mode: New detector mode. You can use DetectorMode enumeration.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetTypeMode", signature= [DataType.STRING, DataType.STRING], parameters=[type, mode]) 
        if isinstance(type, str) and isinstance(mode, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    def insert(self, settings = UndefinedParameter):        
        """
        The method inserts the active detector.
        
        :param DetectorInsertSettings settings: The additional settings for the insert operation.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Insert", signature=[], parameters=[])
        if settings is UndefinedParameter:
            call_request.parameters.data_types = []
            call_request.parameters.values = []
            call_response = self.__application_client._perform_call(call_request)
        elif isinstance(settings, DetectorInsertSettings):
            call_request.parameters.data_types = [DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="DetectorInsertSettings")]
            call_request.parameters.values = [settings]
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")


    def retract(self):        
        """
        The method retracts the active detector.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Retract", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    @property
    def state(self) -> 'str':        
        """
        The current state of a retractable detector.
        """
        call_request = CallRequest(object_id=self.__id, method_name="State_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.STRING:
            raise TypeError("Incompatible type: detector.state was expecting str, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
