# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition, UndefinedParameter
from .custom_settings._grid_voltage import GridVoltage
from .custom_settings._suction_tube_voltage import SuctionTubeVoltage
from .custom_settings._mirror_voltage import MirrorVoltage
from .custom_settings._converter_voltage import ConverterVoltage
from .custom_settings._scintillator_voltage import ScintillatorVoltage
from .custom_settings._md_shutter import MdShutter


class CustomSettings(object):    
    """
    The object provides control and status of the additional detectors settings.
    """
    __slots__ = ["__id", "__application_client", "__grid_voltage", "__suction_tube_voltage", "__mirror_voltage", "__converter_voltage", "__scintillator_voltage", "__md_shutter"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Detector.CustomSettings"

        self.__grid_voltage = GridVoltage(self.__application_client)
        self.__suction_tube_voltage = SuctionTubeVoltage(self.__application_client)
        self.__mirror_voltage = MirrorVoltage(self.__application_client)
        self.__converter_voltage = ConverterVoltage(self.__application_client)
        self.__scintillator_voltage = ScintillatorVoltage(self.__application_client)
        self.__md_shutter = MdShutter(self.__application_client)

    @property
    def grid_voltage(self) -> 'GridVoltage':        
        """
        The object provides control and status of the active detector grid voltage.
        """
        return self.__grid_voltage

    @property
    def suction_tube_voltage(self) -> 'SuctionTubeVoltage':        
        """
        The object provides control and status of the active detector suction tube voltage.
        """
        return self.__suction_tube_voltage

    @property
    def mirror_voltage(self) -> 'MirrorVoltage':        
        """
        The object provides control and status of the active detector mirror voltage.
        """
        return self.__mirror_voltage

    @property
    def converter_voltage(self) -> 'ConverterVoltage':        
        """
        The object provides control and status of the active detector converter voltage.
        """
        return self.__converter_voltage

    @property
    def scintillator_voltage(self) -> 'ScintillatorVoltage':        
        """
        The object provides control and status of the active detector scintillator voltage.
        """
        return self.__scintillator_voltage

    @property
    def md_shutter(self) -> 'MdShutter':        
        """
        The object represents a Mirror Detector Shutter.
        """
        return self.__md_shutter

    def set_segment_polarity(self, name, polarity):        
        """
        Sets the polarity of a segment.
        
        :param str name: Name of the segment. DetectorSegment enumeration can be used to access segment names.
        
        :param int polarity: The new polarity of the segment. SegmentPolarity enumeration can be used to obtain polarity names.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetSegmentPolarity", signature= [DataType.STRING, DataType.INT32], parameters=[name, polarity]) 
        if isinstance(name, str) and isinstance(polarity, int):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    def get_segment_polarity(self, name) -> 'int':        
        """
        Gets the polarity of a segment.
        
        :param str name: Name of the segment. DetectorSegment enumeration can be used to access segment names.
        
        :return: The polarity of the segment. SegmentPolarity enumeration can be used to explain polarity name.
        :rtype: int
        """
        call_request = CallRequest(object_id=self.__id, method_name="GetSegmentPolarity", signature= [DataType.STRING], parameters=[name]) 
        if isinstance(name, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
        if call_response.result.data_type != DataType.INT32:
            raise TypeError("Incompatible type: custom_settings.get_segment_polarity was expecting int, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    def list_all_segments(self) -> 'List[str]':        
        """
        The method returns all segments available on the active detector.
        
        :return: The list of all segments available on the active detector.
        :rtype: list
        """
        call_request = CallRequest(object_id=self.__id, method_name="ListAllSegments", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataTypeDefinition(DataType.LIST_PRIMARY_ID, template_argument=DataType.STRING):
            raise TypeError("Incompatible type: custom_settings.list_all_segments was expecting list, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    def reset_segments(self):        
        """
        The method resets all eligible active detector segments in custom mode.
        """
        call_request = CallRequest(object_id=self.__id, method_name="ResetSegments", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)
