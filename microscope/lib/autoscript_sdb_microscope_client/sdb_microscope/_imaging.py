# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client.structures import GrabFrameSettings, ImageMatch, LargeImageHeader, AdornedImage 
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition
from .imaging._scanning_filter import ScanningFilter


class Imaging(object):
    """
    The object provides control of the microscope imaging.
    """
    __slots__ = ["__id", "__application_client", "__scanning_filter"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Imaging"

        self.__scanning_filter = ScanningFilter(self.__application_client)

    @property
    def scanning_filter(self) -> 'ScanningFilter':
        """
        The object provides control of the microscope scanning filter.
        """
        return self.__scanning_filter

    def get_active_view(self) -> 'int':
        """
        The function gets the index of the active view.
        
        :return: The value is in the range 1 ... 4, where 1 stands for the left upper view, 2 for the right upper view, 3 for the left lower view, and 4 for the right lower view.
        """
        call_request = CallRequest(object_id=self.__id, method_name="GetActiveView", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.INT32:
            raise TypeError("Incompatible type: imaging.get_active_view was expecting int, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    def get_active_device(self) -> 'int':
        """
        The function returns the type of imaging device set in the active view.
        
        :return: Type of imaging device expressed as integer ID. To explain the returned value, you can use ImagingDevice enumeration.
        """
        call_request = CallRequest(object_id=self.__id, method_name="GetActiveDevice", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.INT32:
            raise TypeError("Incompatible type: imaging.get_active_device was expecting int, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    def get_image(self) -> 'AdornedImage':
        """
        Retrieves microscope image currently present in the active view
        
        :return: Microscope image retrieved from the active view.
        """
        call_request = CallRequest(object_id=self.__id, method_name="GetImage", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImage"):
            raise TypeError("Incompatible type: imaging.get_image was expecting AdornedImage, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    def grab_frame(self, settings: 'GrabFrameSettings' = None) -> 'AdornedImage':
        """
        Scans a completely new frame in the active view and provides the corresponding image.
        
        :param settings: Custom scan settings to be used instead of default values.
        
        :return: Microscope image corresponding to the grabbed frame.
        """
        call_request = CallRequest(object_id=self.__id, method_name="GrabFrame", signature=[], parameters=[])
        if isinstance(settings, GrabFrameSettings):
            call_request.parameters.data_types = [DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="GrabFrameSettings")]
            call_request.parameters.values = [settings]
            call_response = self.__application_client._perform_call(call_request)
        elif settings is None:
            call_request.parameters.data_types = []
            call_request.parameters.values = []
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

        if call_response.result.data_type != DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImage"):
            raise TypeError("Incompatible type: imaging.grab_frame was expecting AdornedImage, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    def grab_multiple_frames(self, settings: 'GrabFrameSettings' = None) -> 'List[AdornedImage]':
        """
        Scans completely new frames in all compatible views and provides the corresponding images.
        
        :param settings: Custom scan settings to be used instead of default values.
        
        :return: List of microscope images, each corresponding to a single compatible view.
        """
        call_request = CallRequest(object_id=self.__id, method_name="GrabMultipleFrames", signature=[], parameters=[])
        if isinstance(settings, GrabFrameSettings):
            call_request.parameters.data_types = [DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="GrabFrameSettings")]
            call_request.parameters.values = [settings]
            call_response = self.__application_client._perform_call(call_request)
        elif settings is None:
            call_request.parameters.data_types = []
            call_request.parameters.values = []
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

        if call_response.result.data_type != DataTypeDefinition(DataType.LIST_PRIMARY_ID, template_argument=DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImage")):
            raise TypeError("Incompatible type: imaging.grab_multiple_frames was expecting list, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    def grab_frame_to_disk(self, file_path: 'str', file_format: 'str' = None, settings: 'GrabFrameSettings' = None) -> 'AdornedImage':
        """
        Scans a completely new frame in the active view, saves the image to disk and provides the preview image.
        
        :param file_path: The path where to store the image. The extension specified in this property does not influence the file format.
        
        :param file_format: The format of the file. ImageFileFormat enumeration can be used for easier manipulation.
        
        :param settings: Custom scan settings to be used instead of default values.
        
        :return: Preview of a microscope image corresponding to the grabbed frame.
        """
        return SdbMicroscopeClientExtensions.grab_frame_to_disk(self, file_path, file_format, settings)

    def _grab_large_frame(self, file_format: 'str', settings: 'GrabFrameSettings') -> 'LargeImageHeader':
        call_request = CallRequest(object_id=self.__id, method_name="GrabLargeFrame", signature= [DataType.STRING, DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="GrabFrameSettings")], parameters=[file_format, settings]) 
        if isinstance(file_format, str) and isinstance(settings, GrabFrameSettings):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
        if call_response.result.data_type != DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="LargeImageHeader"):
            raise TypeError("Incompatible type: imaging.grab_large_frame was expecting LargeImageHeader, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    def _get_large_image_part(self, image_id: 'str', part_index: 'int') -> 'bytes':
        call_request = CallRequest(object_id=self.__id, method_name="GetLargeImagePart", signature= [DataType.STRING, DataType.INT32], parameters=[image_id, part_index]) 
        if isinstance(image_id, str) and isinstance(part_index, int):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
        if call_response.result.data_type != DataType.BYTE_ARRAY:
            raise TypeError("Incompatible type: imaging.get_large_image_part was expecting bytes, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    def _release_large_image(self, image_id: 'str'):
        call_request = CallRequest(object_id=self.__id, method_name="ReleaseLargeImage", signature= [DataType.STRING], parameters=[image_id]) 
        if isinstance(image_id, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    def match_template(self, image: 'AdornedImage', template_image: 'AdornedImage') -> 'ImageMatch':
        """
        Tries to locate feature from the given template image in the given searched image.
        
        :param image: Image to be searched for the feature from the given template image.
        
        :param template_image: Image containing the template of the feature to be located.
        
        :return: Possible location of the feature, accompanied with a confidence score in a range of [0, 1].
        """
        call_request = CallRequest(object_id=self.__id, method_name="MatchTemplate", signature= [DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImage"), DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImage")], parameters=[image, template_image]) 
        if isinstance(image, AdornedImage) and isinstance(template_image, AdornedImage):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
        if call_response.result.data_type != DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="ImageMatch"):
            raise TypeError("Incompatible type: imaging.match_template was expecting ImageMatch, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    def set_active_view(self, index: 'int'):
        """
        The function changes the active view in the main user interface of the microscope (XTUI).
        
        :param index: The index is in the range 1..4, where 1 is the upper left view, 2 is the upper right view, 3 is the lower left view, and 4 is the lower right view.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetActiveView", signature= [DataType.INT32], parameters=[index]) 
        if isinstance(index, int):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    def set_active_device(self, imaging_device: 'int'):
        """
        The function changes active device in the active view.
        
        :param imaging_device: New device type. Use the ImagingDevice enumeration to specify the proper device name.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetActiveDevice", signature= [DataType.INT32], parameters=[imaging_device]) 
        if isinstance(imaging_device, int):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    def start_acquisition(self):
        """
        The function starts the acquisition in the active view with the active device.
        """
        call_request = CallRequest(object_id=self.__id, method_name="StartAcquisition", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    def stop_acquisition(self):
        """
        The function stops the running acquisition.
        """
        call_request = CallRequest(object_id=self.__id, method_name="StopAcquisition", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    def set_image(self, image: 'AdornedImage'):
        """
        The function loads an image into the active view, including its metadata.
        
        :param image: An image in form of AdornedImage instance.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetImage", signature= [DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="AdornedImage")], parameters=[image]) 
        if isinstance(image, AdornedImage):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
