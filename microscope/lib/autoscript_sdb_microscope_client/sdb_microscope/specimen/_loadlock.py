# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition


class LoadLock(object):
    """
    The object provides control and status of the microscope LoadLock device.
    """
    __slots__ = ["__id", "__application_client"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Specimen.LoadLock"


    def load(self):
        """
        Loads the LoadLock.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Load", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    def unload(self):
        """
        Unloads the LoadLock.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Unload", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    @property
    def state(self) -> 'str':
        """
        Returns the current state of the LoadLock.
        """
        call_request = CallRequest(object_id=self.__id, method_name="State_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.STRING:
            raise TypeError("Incompatible type: loadlock.state was expecting str, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @property
    def is_installed(self) -> 'bool':
        """
        Return True if the LoadLock is present on the microscope.
        """
        call_request = CallRequest(object_id=self.__id, method_name="IsInstalled_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.BOOL:
            raise TypeError("Incompatible type: loadlock.is_installed was expecting bool, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
