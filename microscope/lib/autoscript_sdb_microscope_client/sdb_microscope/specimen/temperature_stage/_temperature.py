# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client.structures import Limits 
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition


class Temperature(object):
    """
    The object provides control and status of the stage temperature.
    """
    __slots__ = ["__id", "__application_client"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Specimen.TemperatureStage.Temperature"


    @property
    def target_value(self) -> 'float':
        """
        The property retrieves or sets the target temperature in Kelvins.
        """
        call_request = CallRequest(object_id=self.__id, method_name="TargetValue_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.DOUBLE:
            raise TypeError("Incompatible type: temperature.target_value was expecting float, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @target_value.setter
    def target_value(self, value: 'float'):
        """
        The property retrieves or sets the target temperature in Kelvins.
        """
        call_request = CallRequest(object_id=self.__id, method_name="TargetValue_SET", signature=[DataType.DOUBLE], parameters=[value])
        if isinstance(value, (int, float)):
            self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    @property
    def value(self) -> 'float':
        """
        The property retrieves the actual temperature in Kelvins.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Value_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.DOUBLE:
            raise TypeError("Incompatible type: temperature.value was expecting float, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @property
    def limits(self) -> 'Limits':
        """
        Retrieves the range of valid temperature values in Kelvins.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Limits_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="Limits"):
            raise TypeError("Incompatible type: temperature.limits was expecting Limits, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
