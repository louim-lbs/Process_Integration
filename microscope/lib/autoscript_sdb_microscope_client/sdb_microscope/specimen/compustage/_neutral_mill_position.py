# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition, UndefinedParameter


class NeutralMillPosition(object):    
    """
    The object provides control and status of the microscope's compustage neutral mill position.
    """
    __slots__ = ["__id", "__application_client"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Specimen.Compustage.NeutralMillPosition"


    def set(self):        
        """
        The method sets neutral mill position to alpha axis coordinate.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Set", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    @property
    def value(self) -> 'float':        
        """
        The property sets or returns neutral mill position value.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Value_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.DOUBLE:
            raise TypeError("Incompatible type: neutral_mill_position.value was expecting float, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @value.setter
    def value(self, value):        
        """
        The property sets or returns neutral mill position value.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Value_SET", signature=[DataType.DOUBLE], parameters=[value])
        if isinstance(value, (int, float)):
            self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
