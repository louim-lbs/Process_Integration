# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client.structures import VacuumSettings 
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition, UndefinedParameter
from .vacuum._chamber_pressure import ChamberPressure


class Vacuum(object):    
    """
    The object provides control and status of the microscope's vacuum.
    """
    __slots__ = ["__id", "__application_client", "__chamber_pressure"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Vacuum"

        self.__chamber_pressure = ChamberPressure(self.__application_client)

    @property
    def chamber_pressure(self) -> 'ChamberPressure':        
        """
        The object provides status of the chamber pressure.
        """
        return self.__chamber_pressure

    def pump(self, settings = UndefinedParameter):        
        """
        Pump the chamber.
        
        :param VacuumSettings settings: Pump related settings.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Pump", signature=[], parameters=[])
        if isinstance(settings, VacuumSettings):
            call_request.parameters.data_types = [DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="VacuumSettings")]
            call_request.parameters.values = [settings]
            call_response = self.__application_client._perform_call(call_request)
        elif settings is UndefinedParameter:
            call_request.parameters.data_types = []
            call_request.parameters.values = []
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")


    def vent(self):        
        """
        Vent the chamber.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Vent", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    @property
    def chamber_state(self) -> 'str':        
        """
        The object provides status of the chamber state.
        """
        call_request = CallRequest(object_id=self.__id, method_name="ChamberState_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.STRING:
            raise TypeError("Incompatible type: vacuum.chamber_state was expecting str, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
