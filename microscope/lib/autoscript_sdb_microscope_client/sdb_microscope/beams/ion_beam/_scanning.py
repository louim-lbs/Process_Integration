# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition
from .scanning._resolution import Resolution
from .scanning._dwell_time import DwellTime
from .scanning._rotation import Rotation
from .scanning._mode import Mode


class Scanning(object):
    """
    The object scanning provides control and status of the scanning properties of the beam.
    """
    __slots__ = ["__id", "__application_client", "__resolution", "__dwell_time", "__rotation", "__mode"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Beams.IonBeam.Scanning"

        self.__resolution = Resolution(self.__application_client)
        self.__dwell_time = DwellTime(self.__application_client)
        self.__rotation = Rotation(self.__application_client)
        self.__mode = Mode(self.__application_client)

    @property
    def resolution(self) -> 'Resolution':
        """
        The object provides control and status of scanning resolution.
        """
        return self.__resolution

    @property
    def dwell_time(self) -> 'DwellTime':
        """
        The object provides control and status of dwell time settings.
        """
        return self.__dwell_time

    @property
    def rotation(self) -> 'Rotation':
        """
        The object provides control and status of scan rotation.
        """
        return self.__rotation

    @property
    def mode(self) -> 'Mode':
        """
        The object provides control and status of the scanning mode.
        """
        return self.__mode

    @property
    def bit_depth(self) -> 'int':
        """
        Live acquisition bit depth.
        """
        call_request = CallRequest(object_id=self.__id, method_name="BitDepth_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.INT32:
            raise TypeError("Incompatible type: scanning.bit_depth was expecting int, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @bit_depth.setter
    def bit_depth(self, value: 'int'):
        """
        Live acquisition bit depth.
        """
        call_request = CallRequest(object_id=self.__id, method_name="BitDepth_SET", signature=[DataType.INT32], parameters=[value])
        if isinstance(value, int):
            self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
