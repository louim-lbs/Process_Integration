# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition
from .source._plasma_gas import PlasmaGas


class Source(object):
    """
    The object provides control and status of the ion beam source.
    """
    __slots__ = ["__id", "__application_client", "__plasma_gas"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Beams.IonBeam.Source"

        self.__plasma_gas = PlasmaGas(self.__application_client)

    @property
    def plasma_gas(self) -> 'PlasmaGas':
        """
        The object provides control of the type of gas used in Multiple Ion Plasma FIB.
        """
        return self.__plasma_gas

    def heat(self):
        """
        Heats the ion beam source.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Heat", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    @property
    def time_to_heat(self) -> 'float':
        """
        Returns the remaining time to heat the ion beam source in seconds.
        """
        call_request = CallRequest(object_id=self.__id, method_name="TimeToHeat_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.DOUBLE:
            raise TypeError("Incompatible type: source.time_to_heat was expecting float, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
