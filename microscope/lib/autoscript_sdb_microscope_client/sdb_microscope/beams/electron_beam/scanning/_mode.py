# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition


class Mode(object):
    """
    The object provides control and status of the scanning mode.
    """
    __slots__ = ["__id", "__application_client"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Beams.ElectronBeam.Scanning.Mode"


    def set_full_frame(self):
        """
        The method activates full frame scanning mode.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetFullFrame", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    def set_reduced_area(self, left: 'float' = None, top: 'float' = None, width: 'float' = None, height: 'float' = None):
        """
        The method activates reduced area scanning mode.
        
        :param left: Left side of the rectangular area. The coordinate is in the range [0, 1].
        
        :param top: Top side of the rectangular area. The coordinate is in the range [0, 1].
        
        :param width: Width of the rectangular area. The valid range is [0, 1], where 1 means full width of the view.
        
        :param height: Height of the rectangular area. The valid range is [0, 1], where 1 means full height of the view.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetReducedArea", signature=[], parameters=[])
        if left is None and top is None and width is None and height is None:
            call_request.parameters.data_types = []
            call_request.parameters.values = []
            call_response = self.__application_client._perform_call(call_request)
        elif isinstance(left, (int, float)) and isinstance(top, (int, float)) and isinstance(width, (int, float)) and isinstance(height, (int, float)):
            call_request.parameters.data_types = [DataType.DOUBLE, DataType.DOUBLE, DataType.DOUBLE, DataType.DOUBLE]
            call_request.parameters.values = [left, top, width, height]
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")


    def set_spot(self, x: 'float' = None, y: 'float' = None):
        """
        The method activates spot scanning mode.
        
        :param x: X coordinate of the spot. The valid range of the coordinate is [0, 1].
        
        :param y: Y coordinate of the spot. The valid range of the coordinate is [0, 1].
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetSpot", signature=[], parameters=[])
        if x is None and y is None:
            call_request.parameters.data_types = []
            call_request.parameters.values = []
            call_response = self.__application_client._perform_call(call_request)
        elif isinstance(x, (int, float)) and isinstance(y, (int, float)):
            call_request.parameters.data_types = [DataType.DOUBLE, DataType.DOUBLE]
            call_request.parameters.values = [x, y]
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")


    def set_line(self, y: 'float' = None):
        """
        The method activates line scanning mode.
        
        :param y: Position of the line in a view. Valid values are in range [0, 1], where 0 represents top of the view and 1 represents bottom of the view.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetLine", signature=[], parameters=[])
        if y is None:
            call_request.parameters.data_types = []
            call_request.parameters.values = []
            call_response = self.__application_client._perform_call(call_request)
        elif isinstance(y, (int, float)):
            call_request.parameters.data_types = [DataType.DOUBLE]
            call_request.parameters.values = [y]
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")


    def set_external(self):
        """
        The method activates external control of the scanning system, such as beam control from an EDX X-ray system.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetExternal", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    def set_crossover(self):
        """
        The function activates the crossover scanning mode.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetCrossover", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    @property
    def value(self) -> 'int':
        """
        Retrieves current beam scanning mode.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Value_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.INT32:
            raise TypeError("Incompatible type: mode.value was expecting int, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
