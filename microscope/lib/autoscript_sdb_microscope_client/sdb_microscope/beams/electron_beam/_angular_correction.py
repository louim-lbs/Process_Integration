# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition, UndefinedParameter
from .angular_correction._angle import Angle
from .angular_correction._specimen_pretilt import SpecimenPretilt
from .angular_correction._tilt_correction import TiltCorrection
from .angular_correction._dynamic_focus import DynamicFocus


class AngularCorrection(object):    
    """
    The object provides control and status of the angular correction.
    """
    __slots__ = ["__id", "__application_client", "__angle", "__specimen_pretilt", "__tilt_correction", "__dynamic_focus"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Beams.ElectronBeam.AngularCorrection"

        self.__angle = Angle(self.__application_client)
        self.__specimen_pretilt = SpecimenPretilt(self.__application_client)
        self.__tilt_correction = TiltCorrection(self.__application_client)
        self.__dynamic_focus = DynamicFocus(self.__application_client)

    @property
    def angle(self) -> 'Angle':        
        """
        The object provides value and limits of the angular correction angle.
        """
        return self.__angle

    @property
    def specimen_pretilt(self) -> 'SpecimenPretilt':        
        """
        The object provides value and limits of the specimen pretilt.
        """
        return self.__specimen_pretilt

    @property
    def tilt_correction(self) -> 'TiltCorrection':        
        """
        The object provides control and status of the tilt correction.
        """
        return self.__tilt_correction

    @property
    def dynamic_focus(self) -> 'DynamicFocus':        
        """
        The object provides control and status of the dynamic focus.
        """
        return self.__dynamic_focus

    @property
    def mode(self) -> 'str':        
        """
        Gets or sets mode of the angular correction.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Mode_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.STRING:
            raise TypeError("Incompatible type: angular_correction.mode was expecting str, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @mode.setter
    def mode(self, value):        
        """
        Gets or sets mode of the angular correction.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Mode_SET", signature=[DataType.STRING], parameters=[value])
        if isinstance(value, str):
            self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
