# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition, UndefinedParameter
from autoscript_sdb_microscope_client._dynamic_object_proxies import ControlItem, ControlItemPair, ServerAction 
from autoscript_sdb_microscope_client._dynamic_object_handles import ControlItemHandle, ControlItemPairHandle, ServerActionHandle 


class GenericAccess(object):    
    """
    The object for accessing generic interfaces on the instrument server. Requires a special license.
    """
    __slots__ = ["__id", "__application_client"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Service.GenericAccess"


    def get_control_item(self, object_model_path) -> 'ControlItem':        
        """
        Creates a wrapper object for server control item float, boolean, integer or string.
        
        :param str object_model_path: Item path on instrument object model.
        
        :return: Control item wrapper object.
        :rtype: ControlItem
        """
        call_request = CallRequest(object_id=self.__id, method_name="GetControlItem", signature= [DataType.STRING], parameters=[object_model_path]) 
        if isinstance(object_model_path, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
        if call_response.result.data_type != DataTypeDefinition(DataType.DYNAMIC_OBJECT_HANDLE_PRIMARY_ID, "ControlItem"):
            raise TypeError("Incompatible type: generic_access.get_control_item was expecting ControlItem, but server returned different object type: " + repr(call_response.result.data_type))

        handle = call_response.result.value
        return ControlItem(self.__application_client, handle)

    def get_control_item_pair(self, object_model_path) -> 'ControlItemPair':        
        """
        Creates a wrapper object for server control item float pair.
        
        :param str object_model_path: Item path on instrument object model.
        
        :return: Control item pair wrapper object.
        :rtype: ControlItemPair
        """
        call_request = CallRequest(object_id=self.__id, method_name="GetControlItemPair", signature= [DataType.STRING], parameters=[object_model_path]) 
        if isinstance(object_model_path, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
        if call_response.result.data_type != DataTypeDefinition(DataType.DYNAMIC_OBJECT_HANDLE_PRIMARY_ID, "ControlItemPair"):
            raise TypeError("Incompatible type: generic_access.get_control_item_pair was expecting ControlItemPair, but server returned different object type: " + repr(call_response.result.data_type))

        handle = call_response.result.value
        return ControlItemPair(self.__application_client, handle)

    def get_action(self, object_model_path) -> 'ServerAction':        
        """
        Creates a wrapper object for server Action item.
        
        :param str object_model_path: Item path on instrument object model.
        
        :return: Action wrapper object.
        :rtype: ServerAction
        """
        call_request = CallRequest(object_id=self.__id, method_name="GetAction", signature= [DataType.STRING], parameters=[object_model_path]) 
        if isinstance(object_model_path, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
        if call_response.result.data_type != DataTypeDefinition(DataType.DYNAMIC_OBJECT_HANDLE_PRIMARY_ID, "ServerAction"):
            raise TypeError("Incompatible type: generic_access.get_action was expecting ServerAction, but server returned different object type: " + repr(call_response.result.data_type))

        handle = call_response.result.value
        return ServerAction(self.__application_client, handle)

    def item_exists(self, object_model_path) -> 'bool':        
        """
        Determines if there is any object at given object model path.
        
        :param str object_model_path: Object path on instrument object model.
        
        :return: True if the object was found.
        :rtype: bool
        """
        call_request = CallRequest(object_id=self.__id, method_name="ItemExists", signature= [DataType.STRING], parameters=[object_model_path]) 
        if isinstance(object_model_path, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
        if call_response.result.data_type != DataType.BOOL:
            raise TypeError("Incompatible type: generic_access.item_exists was expecting bool, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
