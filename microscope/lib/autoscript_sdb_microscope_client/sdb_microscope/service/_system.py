# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition, UndefinedParameter


class System(object):    
    """
    The object provides service information regarding the whole microscope system.
    """
    __slots__ = ["__id", "__application_client"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Service.System"


    @property
    def name(self) -> 'str':        
        """
        Provides name of a microscope family the AutoScript server is connected to.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Name_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.STRING:
            raise TypeError("Incompatible type: system.name was expecting str, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @property
    def serial_number(self) -> 'str':        
        """
        Provides microscope system serial number.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SerialNumber_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.STRING:
            raise TypeError("Incompatible type: system.serial_number was expecting str, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @property
    def version(self) -> 'str':        
        """
        Provides microscope software platform version.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Version_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.STRING:
            raise TypeError("Incompatible type: system.version was expecting str, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
