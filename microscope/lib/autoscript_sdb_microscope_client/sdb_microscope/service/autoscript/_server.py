# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition
from .server._configuration import Configuration


class Server(object):
    """
    The object provides service information regarding the AutoScript server.
    """
    __slots__ = ["__id", "__application_client", "__configuration"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Service.AutoScript.Server"

        self.__configuration = Configuration(self.__application_client)

    @property
    def configuration(self) -> 'Configuration':
        """
        This object provides access to the AutoScript server configuration.
        """
        return self.__configuration

    @property
    def version(self) -> 'str':
        """
        Provides AutoScript server version.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Version_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.STRING:
            raise TypeError("Incompatible type: server.version was expecting str, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @property
    def is_offline(self) -> 'bool':
        """
        Tells whether the AutoScript server is running in the simulation (offline) mode.
        """
        call_request = CallRequest(object_id=self.__id, method_name="IsOffline_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.BOOL:
            raise TypeError("Incompatible type: server.is_offline was expecting bool, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
