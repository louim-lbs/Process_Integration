# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition, UndefinedParameter


class Configuration(object):    
    """
    This object provides access to the AutoScript server configuration.
    """
    __slots__ = ["__id", "__application_client"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Service.AutoScript.Server.Configuration"


    def set_value(self, key, value):        
        """
        Sets AutoScript server configuration value.
        
        :param str key: Key identifying configuration value to set.
        
        :param str value: Value to be set.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetValue", signature= [DataType.STRING, DataType.STRING], parameters=[key, value]) 
        if isinstance(key, str) and isinstance(value, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    def get_value(self, key) -> 'str':        
        """
        Gets AutoScript server configuration value.
        
        :param str key: Key identifying configuration value to query.
        
        :return: Configuration value as string.
        :rtype: str
        """
        call_request = CallRequest(object_id=self.__id, method_name="GetValue", signature= [DataType.STRING], parameters=[key]) 
        if isinstance(key, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
        if call_response.result.data_type != DataType.STRING:
            raise TypeError("Incompatible type: configuration.get_value was expecting str, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
