# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition, UndefinedParameter


class ScanningFilter(object):    
    """
    The object provides control of the microscope's scanning filter.
    """
    __slots__ = ["__id", "__application_client"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Imaging.ScanningFilter"


    @property
    def type(self) -> 'int':        
        """
        Gets and sets active scanning filter type.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Type_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.INT32:
            raise TypeError("Incompatible type: scanning_filter.type was expecting int, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @type.setter
    def type(self, value):        
        """
        Gets and sets active scanning filter type.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Type_SET", signature=[DataType.INT32], parameters=[value])
        if isinstance(value, int):
            self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    @property
    def number_of_frames(self) -> 'int':        
        """
        Gets and sets current number of frames.
        """
        call_request = CallRequest(object_id=self.__id, method_name="NumberOfFrames_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.INT32:
            raise TypeError("Incompatible type: scanning_filter.number_of_frames was expecting int, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @number_of_frames.setter
    def number_of_frames(self, value):        
        """
        Gets and sets current number of frames.
        """
        call_request = CallRequest(object_id=self.__id, method_name="NumberOfFrames_SET", signature=[DataType.INT32], parameters=[value])
        if isinstance(value, int):
            self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
