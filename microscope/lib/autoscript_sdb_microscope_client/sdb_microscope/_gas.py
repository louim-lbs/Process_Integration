# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition
from autoscript_sdb_microscope_client._dynamic_object_proxies import GisPort, Multichem 
from autoscript_sdb_microscope_client._dynamic_object_handles import GisPortHandle, MultichemHandle 


class Gas(object):
    """
    The object provides control of the gas injection system (GIS).
    """
    __slots__ = ["__id", "__application_client"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Gas"


    def get_gis_port(self, gas_name: 'str') -> 'GisPort':
        """
        The function finds a GIS port with the specified gas.
        
        :param gas_name: Name of the gas to look for.
        
        :return: An object representing the GIS port.
        """
        call_request = CallRequest(object_id=self.__id, method_name="GetGisPort", signature= [DataType.STRING], parameters=[gas_name]) 
        if isinstance(gas_name, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")
        if call_response.result.data_type != DataTypeDefinition(DataType.DYNAMIC_OBJECT_HANDLE_PRIMARY_ID, "GisPort"):
            raise TypeError("Incompatible type: gas.get_gis_port was expecting GisPort, but server returned different object type: " + repr(call_response.result.data_type))

        handle = call_response.result.value
        return GisPort(self.__application_client, handle)

    def get_multichem(self) -> 'Multichem':
        """
        The function returns an object representing the MultiChem device.
        
        :return: The object which provides control functions on the MultiChem device.
        """
        call_request = CallRequest(object_id=self.__id, method_name="GetMultichem", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataTypeDefinition(DataType.DYNAMIC_OBJECT_HANDLE_PRIMARY_ID, "Multichem"):
            raise TypeError("Incompatible type: gas.get_multichem was expecting Multichem, but server returned different object type: " + repr(call_response.result.data_type))

        handle = call_response.result.value
        return Multichem(self.__application_client, handle)

    def list_all_gis_ports(self) -> 'List[str]':
        """
        The function returns a list of gases for all GIS ports installed on the system.
        
        :return: List of available gases.
        """
        call_request = CallRequest(object_id=self.__id, method_name="ListAllGisPorts", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataTypeDefinition(DataType.LIST_PRIMARY_ID, template_argument=DataType.STRING):
            raise TypeError("Incompatible type: gas.list_all_gis_ports was expecting list, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
