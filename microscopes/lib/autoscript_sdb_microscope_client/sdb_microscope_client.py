# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client._sdb_microscope_logging import Logging, LogDomain
from autoscript_core.common import ApiErrorCode, ApiException, MarshallingException, TransportEndpointDefinition
from autoscript_core.orc import ClientEndpoint, EndpointException, EndpointExceptionCause, ApplicationClientLoggingHelper
from autoscript_core.serialization import AdvancedValueSerializer, AdvancedValueDeserializer
from autoscript_sdb_microscope_client.structures import Point, Rectangle, Limits, Limits2d, GrabFrameSettings, RunAutoSourceTiltSettings, RunAutoCbSettings, RunAutoFocusSettings, RunAutoLensAlignmentSettings, RunAutoStigmatorCenteringSettings, RunAutoStigmatorSettings, CompustagePosition, StagePosition, ManipulatorPosition, MoveSettings, ImageMatch, StreamPatternDefinition, StreamPatternPoint, BitmapPatternDefinition, BitmapPatternPoint, GetRtmPositionSettings, RtmPositionSet, RtmPosition, GetRtmDataSettings, RtmDataSet, LargeImageHeader, AdornedImageMetadataOpticsScanFieldSize, AdornedImageMetadataAcquisition, AdornedImageMetadataBinaryResult, AdornedImageMetadataCore, AdornedImageMetadataDetector, AdornedImageMetadataEnergyFilterSettings, AdornedImageMetadataGasInjectionSystemGas, AdornedImageMetadataGasInjectionSystem, AdornedImageMetadataInstrument, AdornedImageMetadataOpticsAperture, AdornedImageMetadataOptics, AdornedImageMetadataSample, AdornedImageMetadataScanSettings, AdornedImageMetadataStageSettings, AdornedImageMetadataVacuumProperties, AdornedImageMetadata, AdornedImage, DetectorInsertSettings, VacuumSettings, Variant, TemperatureSettings 
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition
from .sdb_microscope._auto_functions import AutoFunctions
from .sdb_microscope._beams import Beams
from .sdb_microscope._detector import Detector
from .sdb_microscope._gas import Gas
from .sdb_microscope._imaging import Imaging
from .sdb_microscope._patterning import Patterning
from .sdb_microscope._service import Service
from .sdb_microscope._specimen import Specimen
from .sdb_microscope._state import State
from .sdb_microscope._vacuum import Vacuum
from autoscript_sdb_microscope_client._dynamic_object_handles import *
import struct


class SdbMicroscopeClient(object):

    __slots__ = ["__id", "__application_client", "__endpoint", "__serializer", "__deserializer", "__auto_functions", "__beams", "__detector", "__gas", "__imaging", "__patterning", "__service", "__specimen", "__state", "__vacuum"]

    def __init__(self):
        self.__application_client = self
        self.__endpoint = ClientEndpoint()

        self.__serializer = AdvancedValueSerializer()
        self.__deserializer = AdvancedValueDeserializer()
        self.__id = "SdbMicroscope"

        self.__auto_functions = AutoFunctions(self.__application_client)
        self.__beams = Beams(self.__application_client)
        self.__detector = Detector(self.__application_client)
        self.__gas = Gas(self.__application_client)
        self.__imaging = Imaging(self.__application_client)
        self.__patterning = Patterning(self.__application_client)
        self.__service = Service(self.__application_client)
        self.__specimen = Specimen(self.__application_client)
        self.__state = State(self.__application_client)
        self.__vacuum = Vacuum(self.__application_client)

        self.__deserializer.structure_factory.register_structure_constructor("Point", SdbMicroscopeClient._create_point)
        self.__deserializer.structure_factory.register_structure_constructor("Rectangle", SdbMicroscopeClient._create_rectangle)
        self.__deserializer.structure_factory.register_structure_constructor("Limits", SdbMicroscopeClient._create_limits)
        self.__deserializer.structure_factory.register_structure_constructor("Limits2d", SdbMicroscopeClient._create_limits_2d)
        self.__deserializer.structure_factory.register_structure_constructor("GrabFrameSettings", SdbMicroscopeClient._create_grab_frame_settings)
        self.__deserializer.structure_factory.register_structure_constructor("RunAutoSourceTiltSettings", SdbMicroscopeClient._create_run_auto_source_tilt_settings)
        self.__deserializer.structure_factory.register_structure_constructor("RunAutoCbSettings", SdbMicroscopeClient._create_run_auto_cb_settings)
        self.__deserializer.structure_factory.register_structure_constructor("RunAutoFocusSettings", SdbMicroscopeClient._create_run_auto_focus_settings)
        self.__deserializer.structure_factory.register_structure_constructor("RunAutoLensAlignmentSettings", SdbMicroscopeClient._create_run_auto_lens_alignment_settings)
        self.__deserializer.structure_factory.register_structure_constructor("RunAutoStigmatorCenteringSettings", SdbMicroscopeClient._create_run_auto_stigmator_centering_settings)
        self.__deserializer.structure_factory.register_structure_constructor("RunAutoStigmatorSettings", SdbMicroscopeClient._create_run_auto_stigmator_settings)
        self.__deserializer.structure_factory.register_structure_constructor("CompustagePosition", SdbMicroscopeClient._create_compustage_position)
        self.__deserializer.structure_factory.register_structure_constructor("StagePosition", SdbMicroscopeClient._create_stage_position)
        self.__deserializer.structure_factory.register_structure_constructor("ManipulatorPosition", SdbMicroscopeClient._create_manipulator_position)
        self.__deserializer.structure_factory.register_structure_constructor("MoveSettings", SdbMicroscopeClient._create_move_settings)
        self.__deserializer.structure_factory.register_structure_constructor("ImageMatch", SdbMicroscopeClient._create_image_match)
        self.__deserializer.structure_factory.register_structure_constructor("StreamPatternDefinition", SdbMicroscopeClient._create_stream_pattern_definition)
        self.__deserializer.structure_factory.register_structure_constructor("StreamPatternPoint", SdbMicroscopeClient._create_stream_pattern_point)
        self.__deserializer.structure_factory.register_structure_constructor("BitmapPatternDefinition", SdbMicroscopeClient._create_bitmap_pattern_definition)
        self.__deserializer.structure_factory.register_structure_constructor("BitmapPatternPoint", SdbMicroscopeClient._create_bitmap_pattern_point)
        self.__deserializer.structure_factory.register_structure_constructor("GetRtmPositionSettings", SdbMicroscopeClient._create_get_rtm_position_settings)
        self.__deserializer.structure_factory.register_structure_constructor("RtmPositionSet", SdbMicroscopeClient._create_rtm_position_set)
        self.__deserializer.structure_factory.register_structure_constructor("RtmPosition", SdbMicroscopeClient._create_rtm_position)
        self.__deserializer.structure_factory.register_structure_constructor("GetRtmDataSettings", SdbMicroscopeClient._create_get_rtm_data_settings)
        self.__deserializer.structure_factory.register_structure_constructor("RtmDataSet", SdbMicroscopeClient._create_rtm_data_set)
        self.__deserializer.structure_factory.register_structure_constructor("LargeImageHeader", SdbMicroscopeClient._create_large_image_header)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataOpticsScanFieldSize", SdbMicroscopeClient._create_adorned_image_metadata_optics_scan_field_size)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataAcquisition", SdbMicroscopeClient._create_adorned_image_metadata_acquisition)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataBinaryResult", SdbMicroscopeClient._create_adorned_image_metadata_binary_result)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataCore", SdbMicroscopeClient._create_adorned_image_metadata_core)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataDetector", SdbMicroscopeClient._create_adorned_image_metadata_detector)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataEnergyFilterSettings", SdbMicroscopeClient._create_adorned_image_metadata_energy_filter_settings)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataGasInjectionSystemGas", SdbMicroscopeClient._create_adorned_image_metadata_gas_injection_system_gas)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataGasInjectionSystem", SdbMicroscopeClient._create_adorned_image_metadata_gas_injection_system)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataInstrument", SdbMicroscopeClient._create_adorned_image_metadata_instrument)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataOpticsAperture", SdbMicroscopeClient._create_adorned_image_metadata_optics_aperture)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataOptics", SdbMicroscopeClient._create_adorned_image_metadata_optics)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataSample", SdbMicroscopeClient._create_adorned_image_metadata_sample)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataScanSettings", SdbMicroscopeClient._create_adorned_image_metadata_scan_settings)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataStageSettings", SdbMicroscopeClient._create_adorned_image_metadata_stage_settings)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadataVacuumProperties", SdbMicroscopeClient._create_adorned_image_metadata_vacuum_properties)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImageMetadata", SdbMicroscopeClient._create_adorned_image_metadata)
        self.__deserializer.structure_factory.register_structure_constructor("AdornedImage", SdbMicroscopeClient._create_adorned_image)
        self.__deserializer.structure_factory.register_structure_constructor("DetectorInsertSettings", SdbMicroscopeClient._create_detector_insert_settings)
        self.__deserializer.structure_factory.register_structure_constructor("VacuumSettings", SdbMicroscopeClient._create_vacuum_settings)
        self.__deserializer.structure_factory.register_structure_constructor("Variant", SdbMicroscopeClient._create_variant)
        self.__deserializer.structure_factory.register_structure_constructor("TemperatureSettings", SdbMicroscopeClient._create_temperature_settings)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("RectanglePattern", SdbMicroscopeClient._create_rectangle_pattern)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("LinePattern", SdbMicroscopeClient._create_line_pattern)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("CirclePattern", SdbMicroscopeClient._create_circle_pattern)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("CleaningCrossSectionPattern", SdbMicroscopeClient._create_cleaning_cross_section_pattern)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("RegularCrossSectionPattern", SdbMicroscopeClient._create_regular_cross_section_pattern)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("StreamPattern", SdbMicroscopeClient._create_stream_pattern)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("BitmapPattern", SdbMicroscopeClient._create_bitmap_pattern)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("GisPort", SdbMicroscopeClient._create_gis_port)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("Multichem", SdbMicroscopeClient._create_multichem)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("ControlItem", SdbMicroscopeClient._create_control_item)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("ControlItemPair", SdbMicroscopeClient._create_control_item_pair)
        self.__deserializer.dynamic_object_handle_factory.register_dynamic_object_handle_constructor("ServerAction", SdbMicroscopeClient._create_server_action)
    
    def connect(self, host: Union[str, List[str]] = "192.168.0.1", port: Union[int, List[int]] = 7520):
        """
        Connects to the server.

        :param host: Host name of the server. Default value is '192.168.0.1'.
        :param port: Port number of the server. Default value is 7520.
        """

        error_message = ""

        if isinstance(host, str) and isinstance(port, int):
            error_message = self._try_connect(host, port)
        elif isinstance(host, (list, tuple)) and isinstance(port, (list, tuple)):
            if len(host) != len(port) or len(host) == 0: 
                raise ValueError("Number of hosts and number of ports must be the same and can't be zero.")

            for i in range(len(host)):
                error_message = self._try_connect(host[i], port[i])

                if error_message is None:
                    break
        elif isinstance(host, (list, tuple)) and isinstance(port, int):
            if len(host) == 0: 
                raise ValueError("Number of hosts can't be zero.")

            for single_host in host:
                error_message = self._try_connect(single_host, port)

                if error_message is None:
                    break
        else:
            raise TypeError("Cannot execute method with the given parameters combination. "
                            "Read the documentation for details of how to call this method.")

        if error_message is not None:
            raise ApiException(ApiErrorCode.APPLICATION_CLIENT_ERROR, error_message)

    def _try_connect(self, host: str, port: int) -> 'str':
        """
        Tries to connect to the server.

        :param host: Host name of the server.
        :param port: Port number of the server.
        :return: Error message if the connection fails, None if the connection is successful.
        """

        server_transport_endpoint = TransportEndpointDefinition(host, port)

        progress_message = "Client connecting to " + str(server_transport_endpoint) + "..."
        Logging.loggers[LogDomain.APPLICATION_CLIENT].log_notification(progress_message)
        print(progress_message)

        error_message = None

        try:
            self.__endpoint.connect(server_transport_endpoint)
        except Exception as ex:
            error_message = "Client cannot establish connection with server at " + str(server_transport_endpoint)

            # Uses specific error message when connection attempt fails because of ineligible endpoint state.
            # Such situation usually occurs when second connection attempt is made on a previously
            # connected client, and generic error message is quite confusing in such cases.
            if isinstance(ex, EndpointException) and ex.cause == EndpointExceptionCause.STATE:
                error_message = "Client cannot connect because it has already been connected before. " \
                                "Please create a new client instance to create a new connection."

            Logging.loggers[LogDomain.APPLICATION_CLIENT].log_error(error_message)

        if error_message is None:
            progress_message = "Client connected to " + str(server_transport_endpoint)
            Logging.loggers[LogDomain.APPLICATION_CLIENT].log_notification(progress_message)
            print(progress_message)

        return error_message

    def disconnect(self):
        """
        Disconnects from the server.
        """

        error_message = None

        try:
            self.__endpoint.disconnect()
        except Exception:
            error_message = "Client cannot disconnect."
            Logging.loggers[LogDomain.APPLICATION_CLIENT].log_error(error_message)

        if error_message is not None:
            raise ApiException(ApiErrorCode.APPLICATION_CLIENT_ERROR, error_message)

        progress_message = "Client disconnected"
        Logging.loggers[LogDomain.APPLICATION_CLIENT].log_notification(progress_message)
        print(progress_message)

    def _perform_call(self, call_request):
        ApplicationClientLoggingHelper.log_call_enter(call_request)

        try:
            self.__serializer.serialize_values(call_request.parameters)
        except struct.error as error:
            ApplicationClientLoggingHelper.log_call_error(call_request.wide_call_id)
            raise Exception(error, "Serialization of parameters failed.")
        except Exception:
            ApplicationClientLoggingHelper.log_call_error(call_request.wide_call_id)
            raise MarshallingException()

        try:
            call_response = self.__endpoint.perform_call(call_request)
        except ApiException as api_exception:
            ApplicationClientLoggingHelper.log_call_error(call_request.wide_call_id, api_exception)
            raise
        except Exception:
            ApplicationClientLoggingHelper.log_call_error(call_request.wide_call_id)
            raise

        try:
            self.__deserializer.deserialize_values(call_response.result)
        except Exception:
            ApplicationClientLoggingHelper.log_call_error(call_request.wide_call_id)
            raise MarshallingException()

        ApplicationClientLoggingHelper.log_call_leave()

        return call_response

    @property
    def auto_functions(self) -> 'AutoFunctions':
        """
        The object provides control of the microscope auto functions.
        """
        return self.__auto_functions

    @property
    def beams(self) -> 'Beams':
        """
        The object provides control and status of the microscope beams.
        """
        return self.__beams

    @property
    def detector(self) -> 'Detector':
        """
        The object provides control and status of detectors.
        """
        return self.__detector

    @property
    def gas(self) -> 'Gas':
        """
        The object provides control of the gas injection system (GIS).
        """
        return self.__gas

    @property
    def imaging(self) -> 'Imaging':
        """
        The object provides control of the microscope imaging.
        """
        return self.__imaging

    @property
    def patterning(self) -> 'Patterning':
        """
        The object provides control and status of the microscope patterning engine.
        """
        return self.__patterning

    @property
    def service(self) -> 'Service':
        """
        The object provides service information regarding the whole microscope system and the AutoScript product.
        """
        return self.__service

    @property
    def specimen(self) -> 'Specimen':
        """
        The object provides control and status of the stage, compustage, temperature stage and manipulator.
        """
        return self.__specimen

    @property
    def state(self) -> 'State':
        """
        The object provides status of various microscope subsystems.
        """
        return self.__state

    @property
    def vacuum(self) -> 'Vacuum':
        """
        The object provides control and status of the specimen chamber vacuum.
        """
        return self.__vacuum
    
    @staticmethod
    def _create_point():
        return Point()
    
    @staticmethod
    def _create_rectangle():
        return Rectangle()
    
    @staticmethod
    def _create_limits():
        return Limits()
    
    @staticmethod
    def _create_limits_2d():
        return Limits2d()
    
    @staticmethod
    def _create_grab_frame_settings():
        return GrabFrameSettings()
    
    @staticmethod
    def _create_run_auto_source_tilt_settings():
        return RunAutoSourceTiltSettings()
    
    @staticmethod
    def _create_run_auto_cb_settings():
        return RunAutoCbSettings()
    
    @staticmethod
    def _create_run_auto_focus_settings():
        return RunAutoFocusSettings()
    
    @staticmethod
    def _create_run_auto_lens_alignment_settings():
        return RunAutoLensAlignmentSettings()
    
    @staticmethod
    def _create_run_auto_stigmator_centering_settings():
        return RunAutoStigmatorCenteringSettings()
    
    @staticmethod
    def _create_run_auto_stigmator_settings():
        return RunAutoStigmatorSettings()
    
    @staticmethod
    def _create_compustage_position():
        return CompustagePosition()
    
    @staticmethod
    def _create_stage_position():
        return StagePosition()
    
    @staticmethod
    def _create_manipulator_position():
        return ManipulatorPosition()
    
    @staticmethod
    def _create_move_settings():
        return MoveSettings()
    
    @staticmethod
    def _create_image_match():
        return ImageMatch()
    
    @staticmethod
    def _create_stream_pattern_definition():
        return StreamPatternDefinition()
    
    @staticmethod
    def _create_stream_pattern_point():
        return StreamPatternPoint()
    
    @staticmethod
    def _create_bitmap_pattern_definition():
        return BitmapPatternDefinition()
    
    @staticmethod
    def _create_bitmap_pattern_point():
        return BitmapPatternPoint()
    
    @staticmethod
    def _create_get_rtm_position_settings():
        return GetRtmPositionSettings()
    
    @staticmethod
    def _create_rtm_position_set():
        return RtmPositionSet()
    
    @staticmethod
    def _create_rtm_position():
        return RtmPosition()
    
    @staticmethod
    def _create_get_rtm_data_settings():
        return GetRtmDataSettings()
    
    @staticmethod
    def _create_rtm_data_set():
        return RtmDataSet()
    
    @staticmethod
    def _create_large_image_header():
        return LargeImageHeader()
    
    @staticmethod
    def _create_adorned_image_metadata_optics_scan_field_size():
        return AdornedImageMetadataOpticsScanFieldSize()
    
    @staticmethod
    def _create_adorned_image_metadata_acquisition():
        return AdornedImageMetadataAcquisition()
    
    @staticmethod
    def _create_adorned_image_metadata_binary_result():
        return AdornedImageMetadataBinaryResult()
    
    @staticmethod
    def _create_adorned_image_metadata_core():
        return AdornedImageMetadataCore()
    
    @staticmethod
    def _create_adorned_image_metadata_detector():
        return AdornedImageMetadataDetector()
    
    @staticmethod
    def _create_adorned_image_metadata_energy_filter_settings():
        return AdornedImageMetadataEnergyFilterSettings()
    
    @staticmethod
    def _create_adorned_image_metadata_gas_injection_system_gas():
        return AdornedImageMetadataGasInjectionSystemGas()
    
    @staticmethod
    def _create_adorned_image_metadata_gas_injection_system():
        return AdornedImageMetadataGasInjectionSystem()
    
    @staticmethod
    def _create_adorned_image_metadata_instrument():
        return AdornedImageMetadataInstrument()
    
    @staticmethod
    def _create_adorned_image_metadata_optics_aperture():
        return AdornedImageMetadataOpticsAperture()
    
    @staticmethod
    def _create_adorned_image_metadata_optics():
        return AdornedImageMetadataOptics()
    
    @staticmethod
    def _create_adorned_image_metadata_sample():
        return AdornedImageMetadataSample()
    
    @staticmethod
    def _create_adorned_image_metadata_scan_settings():
        return AdornedImageMetadataScanSettings()
    
    @staticmethod
    def _create_adorned_image_metadata_stage_settings():
        return AdornedImageMetadataStageSettings()
    
    @staticmethod
    def _create_adorned_image_metadata_vacuum_properties():
        return AdornedImageMetadataVacuumProperties()
    
    @staticmethod
    def _create_adorned_image_metadata():
        return AdornedImageMetadata()
    
    @staticmethod
    def _create_adorned_image():
        return AdornedImage()
    
    @staticmethod
    def _create_detector_insert_settings():
        return DetectorInsertSettings()
    
    @staticmethod
    def _create_vacuum_settings():
        return VacuumSettings()
    
    @staticmethod
    def _create_variant():
        return Variant()
    
    @staticmethod
    def _create_temperature_settings():
        return TemperatureSettings()

    @staticmethod
    def _create_rectangle_pattern(id):
        return RectanglePatternHandle(id)

    @staticmethod
    def _create_line_pattern(id):
        return LinePatternHandle(id)

    @staticmethod
    def _create_circle_pattern(id):
        return CirclePatternHandle(id)

    @staticmethod
    def _create_cleaning_cross_section_pattern(id):
        return CleaningCrossSectionPatternHandle(id)

    @staticmethod
    def _create_regular_cross_section_pattern(id):
        return RegularCrossSectionPatternHandle(id)

    @staticmethod
    def _create_stream_pattern(id):
        return StreamPatternHandle(id)

    @staticmethod
    def _create_bitmap_pattern(id):
        return BitmapPatternHandle(id)

    @staticmethod
    def _create_gis_port(id):
        return GisPortHandle(id)

    @staticmethod
    def _create_multichem(id):
        return MultichemHandle(id)

    @staticmethod
    def _create_control_item(id):
        return ControlItemHandle(id)

    @staticmethod
    def _create_control_item_pair(id):
        return ControlItemPairHandle(id)

    @staticmethod
    def _create_server_action(id):
        return ServerActionHandle(id)
