# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client.structures import TemperatureSettings 
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition
from .temperature_stage._temperature import Temperature
from .temperature_stage._ramping_speed import RampingSpeed


class TemperatureStage(object):
    """
    The object provides control and status of the microscope temperature stage.
    """
    __slots__ = ["__id", "__application_client", "__temperature", "__ramping_speed"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Specimen.TemperatureStage"

        self.__temperature = Temperature(self.__application_client)
        self.__ramping_speed = RampingSpeed(self.__application_client)

    @property
    def temperature(self) -> 'Temperature':
        """
        The object provides control and status of the stage temperature.
        """
        return self.__temperature

    @property
    def ramping_speed(self) -> 'RampingSpeed':
        """
        The object provides control and status of the temperature ramping speed.
        """
        return self.__ramping_speed

    def turn_on(self):
        """
        Turns the temperature stage on.
        """
        call_request = CallRequest(object_id=self.__id, method_name="TurnOn", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    def turn_off(self):
        """
        Turns the temperature stage off.
        """
        call_request = CallRequest(object_id=self.__id, method_name="TurnOff", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    def ramp(self, settings: 'TemperatureSettings'):
        """
        Ramps the stage temperature up or down according to the settings specified by the parameter.
        
        :param settings: Settings for the ramp method.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Ramp", signature= [DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="TemperatureSettings")], parameters=[settings]) 
        if isinstance(settings, TemperatureSettings):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    def select_heat_shield(self, type: 'str'):
        """
        Selects the heat shield for the currently connected temperature stage.
        
        :param type: Heat shield type. You can use TemperatureStageHeatShieldType enumeration.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SelectHeatShield", signature= [DataType.STRING], parameters=[type]) 
        if isinstance(type, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    @property
    def is_installed(self) -> 'bool':
        """
        Tells whether the microscope support temperature stages. This property does not indicate whether a temperature stage is currently connected.
        """
        call_request = CallRequest(object_id=self.__id, method_name="IsInstalled_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.BOOL:
            raise TypeError("Incompatible type: temperature_stage.is_installed was expecting bool, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @property
    def is_on(self) -> 'bool':
        """
        Returns the on/off state of the currently connected temperature stage.
        """
        call_request = CallRequest(object_id=self.__id, method_name="IsOn_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.BOOL:
            raise TypeError("Incompatible type: temperature_stage.is_on was expecting bool, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @property
    def type(self) -> 'str':
        """
        Returns the type of the currently connected temperature stage. Maps to TemperatureStageType enumeration.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Type_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.STRING:
            raise TypeError("Incompatible type: temperature_stage.type was expecting str, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
