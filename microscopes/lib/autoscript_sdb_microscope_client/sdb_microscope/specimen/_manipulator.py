# --------------------------------------------------------------------------------------------------
# <auto-generated>
#     This code was generated by a tool.
#     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
#     Template ID: 52
# </auto-generated>
# --------------------------------------------------------------------------------------------------

from typing import List, Union
from autoscript_sdb_microscope_client.structures import ManipulatorPosition 
from autoscript_sdb_microscope_client._sdb_microscope_client_extensions import SdbMicroscopeClientExtensions
from autoscript_core.common import CallRequest, DataType, DataTypeDefinition


class Manipulator(object):
    """
    The object provides control and status of the manipulator device. The device is also referred to as EasyLift.
    """
    __slots__ = ["__id", "__application_client"]

    def __init__(self, application_client):
        self.__application_client = application_client
        self.__id = "SdbMicroscope.Specimen.Manipulator"


    def absolute_move(self, target_position: 'ManipulatorPosition'):
        """
        The function moves the manipulator to the specified position.
        
        :param target_position: The absolute position to which the manipulator should move.
        """
        call_request = CallRequest(object_id=self.__id, method_name="AbsoluteMove", signature= [DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="ManipulatorPosition")], parameters=[target_position]) 
        if isinstance(target_position, ManipulatorPosition):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    def relative_move(self, position_delta: 'ManipulatorPosition'):
        """
        The function moves the manipulator by the specified delta position.
        
        :param position_delta: The position by which the manipulator should move.
        """
        call_request = CallRequest(object_id=self.__id, method_name="RelativeMove", signature= [DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="ManipulatorPosition")], parameters=[position_delta]) 
        if isinstance(position_delta, ManipulatorPosition):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    def insert(self):
        """
        The function inserts the manipulator.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Insert", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    def retract(self):
        """
        The function retracts the manipulator.
        """
        call_request = CallRequest(object_id=self.__id, method_name="Retract", signature= [], parameters=[]) 
        call_response = self.__application_client._perform_call(call_request)

    def set_default_coordinate_system(self, coordinate_system: 'str'):
        """
        The function sets the default coordinate system of the manipulator. Subsequent absolute_move() and relative_move() calls will use this system.
        
        :param coordinate_system: New default manipulator coordinate system. Maps to ManipulatorCoordinateSystem enumeration.
        """
        call_request = CallRequest(object_id=self.__id, method_name="SetDefaultCoordinateSystem", signature= [DataType.STRING], parameters=[coordinate_system]) 
        if isinstance(coordinate_system, str):
            call_response = self.__application_client._perform_call(call_request)
        else:
            raise Exception("Cannot execute method with the given parameters combination. Read the documentation for details of how to call this method.")

    @property
    def is_installed(self) -> 'bool':
        """
        Tells whether the manipulator device is installed on the microscope.
        """
        call_request = CallRequest(object_id=self.__id, method_name="IsInstalled_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataType.BOOL:
            raise TypeError("Incompatible type: manipulator.is_installed was expecting bool, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value

    @property
    def current_position(self) -> 'ManipulatorPosition':
        """
        The property retrieves the current manipulator position.
        """
        call_request = CallRequest(object_id=self.__id, method_name="CurrentPosition_GET")
        call_response = self.__application_client._perform_call(call_request)
        if call_response.result.data_type != DataTypeDefinition(DataType.STRUCTURE_PRIMARY_ID, secondary_id="ManipulatorPosition"):
            raise TypeError("Incompatible type: manipulator.current_position was expecting ManipulatorPosition, but server returned different object type: " + repr(call_response.result.data_type))

        return call_response.result.value
