# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DigitalMicrograph')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DigitalMicrograph')
    _DigitalMicrograph = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DigitalMicrograph', [dirname(__file__)])
        except ImportError:
            import _DigitalMicrograph
            return _DigitalMicrograph
        try:
            _mod = imp.load_module('_DigitalMicrograph', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DigitalMicrograph = swig_import_helper()
    del swig_import_helper
else:
    import _DigitalMicrograph
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class Py_Component(_object):
    """


    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Py_Component, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Py_Component, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_comp"] = _DigitalMicrograph.Py_Component_m_comp_set
    __swig_getmethods__["m_comp"] = _DigitalMicrograph.Py_Component_m_comp_get
    if _newclass:
        m_comp = _swig_property(_DigitalMicrograph.Py_Component_m_comp_get, _DigitalMicrograph.Py_Component_m_comp_set)

    def __init__(self, *args):
        """


        Constructor that creates a Py_Component with a given DM Component. This assumes
        that the Component is already in DM.  

        Parameters
        ----------
        * `comp` :  
            Component retrieved in DM  

        """
        this = _DigitalMicrograph.new_Py_Component(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Py_Component
    __del__ = lambda self: None

    def AddNewComponent(self, type, f1, f2, f3, f4):
        """


        Creates a new annotaiton of type 'type' and adds it to this component (parent)  
         e.g. ImageDocByID = DM.GetImageDocumentByID(1)  
         component2 = ImageDocByID.GetRootComponent()  
         component3 = component2.AddNewComponent(13, 0,0,0,0)  

        Parameters
        ----------
        * `type` :  
            what type  
        * `f1` :  
            location  
        * `f2` :  
            location  
        * `f3` :  
            location  
        * `f4` :  
            location  

        Returns
        -------
        Component - new annotation  

        """
        return _DigitalMicrograph.Py_Component_AddNewComponent(self, type, f1, f2, f3, f4)


    def CountChildren(self):
        """


        Returns the number of sub components.  

        Returns
        -------
        number of sub components  

        """
        return _DigitalMicrograph.Py_Component_CountChildren(self)


    def CountChildrenOfType(self, type):
        """


        Returns the number of sub-components of type 'type'.  
         e.g. noOfChildren = component2.CountChildren()  

        Parameters
        ----------
        * `type` :  
            what type  

        Returns
        -------
        number of sub-components of type 'type'  

        """
        return _DigitalMicrograph.Py_Component_CountChildrenOfType(self, type)


    def GetBackgroundColor(self):
        """


        Gets the background color of the component.  
         e.g. red, green, blue = component2.GetBackgroundColor()  

        Parameters
        ----------
        * `red_o` :  
            red in RGB  
        * `green_o` :  
            green in RGB  
        * `blue_o` :  
            blue in RGB  

        """
        return _DigitalMicrograph.Py_Component_GetBackgroundColor(self)


    def GetBoundingRect(self):
        """


        Gets the bounding rect of the annotation.  
         e.g. t, l, b, r = component2.GetBoundingRect()  

        Parameters
        ----------
        * `t` :  
            top  
        * `l` :  
            left  
        * `b` :  
            bottom  
        * `r` :  
            right  

        """
        return _DigitalMicrograph.Py_Component_GetBoundingRect(self)


    def GetBoundingRectInView(self):
        """


        Gets the bounding rect of the annotation.  
         e.g. t, l, b, r = component2.GetBoundingRectInView()  

        Parameters
        ----------
        * `t` :  
            top  
        * `l` :  
            left  
        * `b` :  
            bottom  
        * `r` :  
            right  

        """
        return _DigitalMicrograph.Py_Component_GetBoundingRectInView(self)


    def GetChild(self, index):
        """


        Returns the 'index'th sub-component of 'comp'.  
         e.g. componentGetChild = component2.GetChild(0)  

        Parameters
        ----------
        * `index` :  
            index of the sub component  

        Returns
        -------
        sub component  

        """
        return _DigitalMicrograph.Py_Component_GetChild(self, index)


    def GetChildByID(self, ID):
        """


        Returns the component child of 'comp' with id 'ID'.  
         e.g. componentGetChildByID = component2.GetChildByID(0)  

        Parameters
        ----------
        * `ID` :  
            id  

        Returns
        -------
        sub component  

        """
        return _DigitalMicrograph.Py_Component_GetChildByID(self, ID)


    def GetDeletable(self):
        return _DigitalMicrograph.Py_Component_GetDeletable(self)

    def GetDrawingMode(self):
        """


        Gets the drawing mode of the image document component.  
         e.g. drawingMode = component2.GetDrawingMode()  

        Parameters
        ----------
        * `comp` :  
            component  

        Returns
        -------
        drawing mode  

        """
        return _DigitalMicrograph.Py_Component_GetDrawingMode(self)


    def GetFillMode(self):
        """


        Gets the fill mode of the image document component.  
         e.g. fillingMode = component2.GetFillMode()  

        Returns
        -------
        fill mode  

        """
        return _DigitalMicrograph.Py_Component_GetFillMode(self)


    def GetFontFaceName(self):
        """


        Gets the face name of the component's font.  
         e.g. fontName = textAnnot.GetFontFaceName()  

        Returns
        -------
        face name  

        """
        return _DigitalMicrograph.Py_Component_GetFontFaceName(self)


    def GetFontInfo(self):
        """


        Gets a description of the component's font.  
         e.g. name, attribute, size = textAnnot.GetFontInfo()  

        Parameters
        ----------
        * `faceName` :  
            font name  
        * `attributes` :  
            attributes  
        * `size` :  
            font size  

        """
        return _DigitalMicrograph.Py_Component_GetFontInfo(self)


    def GetFontSize(self):
        """


        Gets the point size of the component's font.  
         e.g. fontSize = component2.GetFontSize()  

        Returns
        -------
        size font size  

        """
        return _DigitalMicrograph.Py_Component_GetFontSize(self)


    def GetForegroundColor(self):
        """


        Gets the foreground color of the component.  
         e.g. r2, g2, b2 = component2.GetForegroundColor()  

        Parameters
        ----------
        * `red_o` :  
            red in RGB  
        * `green_o` :  
            green in RGB  
        * `blue_o` :  
            blue in RGB  

        """
        return _DigitalMicrograph.Py_Component_GetForegroundColor(self)


    def GetID(self):
        """


        Gets the unique identifier of the annotation in the image document.  
         e.g. id = component2.GetID()  

        Returns
        -------
        unique identifier  

        """
        return _DigitalMicrograph.Py_Component_GetID(self)


    def GetImageDocument(self):
        """


        Gets the image document associated with the annotation.  
         e.g. ImageDocument = component2.GetImageDocument()  

        Parameters
        ----------
        * `annot` :  
            annotation  

        Returns
        -------
        image document  

        """
        return _DigitalMicrograph.Py_Component_GetImageDocument(self)


    def GetMovable(self):
        """


        Gets whether the component can be moved.  
         e.g. movable = component2.GetMovable()  

        Returns
        -------
        whether the component can be moved  

        """
        return _DigitalMicrograph.Py_Component_GetMovable(self)


    def GetNthChildOfType(self, type, index):
        """


        Returns the nth sub-component of type 'type'.  
         e.g. ComponentNth = ParentComponent.GetNthChildOfType(13, 0)  

        Parameters
        ----------
        * `type` :  
            what type  
        * `index` :  
            nth sub-component  

        Returns
        -------
        the nth sub-component of type 'type'  

        """
        return _DigitalMicrograph.Py_Component_GetNthChildOfType(self, type, index)


    def GetParentComponent(self):
        """


        Gets the parent component of 'comp', if any.  
         e.g. ParentComponent = component3.GetParentComponent()  

        Returns
        -------
        parent component  

        """
        return _DigitalMicrograph.Py_Component_GetParentComponent(self)


    def GetParentImageDisplay(self):
        """


        Gets the parent image display of the 'comp', if any.  
         e.g. parentImageDisplay = component4.GetParentImageDisplay()  

        Returns
        -------
        parent image display  

        """
        return _DigitalMicrograph.Py_Component_GetParentImageDisplay(self)


    def GetRect(self):
        """


        Gets the rectangle of the annotation.  
         e.g. t, l, b, r = component2.GetRect()  

        Parameters
        ----------
        * `top` :  
            top  
        * `left` :  
            left  
        * `bottom` :  
            bottom  
        * `right` :  
            right  

        """
        return _DigitalMicrograph.Py_Component_GetRect(self)


    def GetResizable(self):
        """


        Gets whether the component can be resized  
         e.g. isResizable = component2.GetResizable()  

        Returns
        -------
        whether the component can be resized  

        """
        return _DigitalMicrograph.Py_Component_GetResizable(self)


    def GetTagGroup(self):
        """


        Gets the tag group associated with the annotation.  
         e.g. tagGroup = component2.GetTagGroup()  

        Returns
        -------
        tag group  

        """
        return _DigitalMicrograph.Py_Component_GetTagGroup(self)


    def GetType(self):
        """


        Gets the type of the annotation.  
         e.g. type = component2.GetType()  

        Returns
        -------
        type  

        """
        return _DigitalMicrograph.Py_Component_GetType(self)


    def IsSelected(self):
        """


        Returns whether the component is selected.  
         e.g. isSelected = component2.IsSelected()  

        Returns
        -------
        whether the component is selected  

        """
        return _DigitalMicrograph.Py_Component_IsSelected(self)


    def IsValid(self):
        """


        Returns whether the component is selected.  
         e.g. arrowComp = DM.NewArrowAnnotation(0, 30, 30, 60)  
         isArrowCompValid = arrowComp.IsValid()  

        Returns
        -------
        true if 'annot' points to a valid object  

        """
        return _DigitalMicrograph.Py_Component_IsValid(self)


    def RemoveFromParent(self):
        """


        Removes the image document component from its parent.  
         e.g. componentGetChild2.RemoveFromParent()  

        """
        return _DigitalMicrograph.Py_Component_RemoveFromParent(self)


    def SetBackgroundColor(self, red_i, green_i, blue_i):
        """


        Sets the background color of the component.  
         e.g. component2.SetBackgroundColor(1, 0, 0)  

        Parameters
        ----------
        * `red_i` :  
            red in RGB  
        * `green_i` :  
            green in RGB  
        * `blue_i` :  
            blue in RGB  

        """
        return _DigitalMicrograph.Py_Component_SetBackgroundColor(self, red_i, green_i, blue_i)


    def SetDeletable(self, deletable):
        """


        Sets whether the component can be deleted.  
         e.g. componentGetChild.SetDeletable(True)  

        Parameters
        ----------
        * `deletable` :  
            whether the component can be deleted.  

        """
        return _DigitalMicrograph.Py_Component_SetDeletable(self, deletable)


    def SetDrawingMode(self, mode):
        """


        Sets the drawing mode of the image document component.  
         e.g. componentGetChild.SetDrawingMode(True)  

        Parameters
        ----------
        * `mode` :  
            drawing mode  

        """
        return _DigitalMicrograph.Py_Component_SetDrawingMode(self, mode)


    def SetFillMode(self, mode):
        """


        Sets the fill mode of the image document component.  
         e.g. componentGetChild.SetFillMode(True)  

        Parameters
        ----------
        * `mode` :  
            fill mode  

        """
        return _DigitalMicrograph.Py_Component_SetFillMode(self, mode)


    def SetFontFaceName(self, face_name):
        """


        Sets the face name of the component's font.  
         e.g. componentGetChild.SetFontFaceName('arial')  

        Parameters
        ----------
        * `face_name` :  
            face name of the component's font  

        """
        return _DigitalMicrograph.Py_Component_SetFontFaceName(self, face_name)


    def SetFontInfo(self, face_name, attributes, size):
        """


        Sets the font information of the component's font.  
         e.g. componentGetChild.SetFontInfo('arial', 2, 10)  

        Parameters
        ----------
        * `face_name` :  
            face name of the component's font  
        * `attributes` :  
            font attributes  
        * `size` :  
            font size  

        """
        return _DigitalMicrograph.Py_Component_SetFontInfo(self, face_name, attributes, size)


    def SetFontSize(self, size):
        """


        Sets the point size of the component's font.  
         e.g. componentGetChild.SetFontSize(12)  

        Parameters
        ----------
        * `size` :  
            font size  

        """
        return _DigitalMicrograph.Py_Component_SetFontSize(self, size)


    def SetForegroundColor(self, red_i, green_i, blue_i):
        """


        Sets the foreground color of the component.  
         e.g. componentGetChild.SetForegroundColor(1, 1, 0)  

        Parameters
        ----------
        * `red_i` :  
            red in RGB  
        * `green_i` :  
            green in RGB  
        * `blue_i` :  
            blue in RGB  

        """
        return _DigitalMicrograph.Py_Component_SetForegroundColor(self, red_i, green_i, blue_i)


    def SetMovable(self, movable):
        """


        Sets whether the component can be moved.  
         e.g. componentGetChild.SetMovable(True)  

        Parameters
        ----------
        * `movable` :  
            whether the component can be moved  

        """
        return _DigitalMicrograph.Py_Component_SetMovable(self, movable)


    def SetRect(self, top, left, bottom, right):
        """


        Sets the rectangle of the annotation.  
         e.g. componentGetChild.SetRect(0, 50, 52, 60)  

        Parameters
        ----------
        * `top` :  
            top  
        * `left` :  
            left  
        * `bottom` :  
            bottom  
        * `right` :  
            right  

        """
        return _DigitalMicrograph.Py_Component_SetRect(self, top, left, bottom, right)


    def SetResizable(self, resizable):
        """


        Sets whether the component can be resized.  
         e.g. componentGetChild.SetResizable(True)  

        Parameters
        ----------
        * `resizable` :  
            whether the component can be resized  

        """
        return _DigitalMicrograph.Py_Component_SetResizable(self, resizable)


    def SetSelectable(self, selectable):
        """


        Sets whether the component can be selected.  
         e.g. componentGetChild.SetSelectable(True)  

        Parameters
        ----------
        * `selectable` :  
            Sets whether the component can be selected.  

        """
        return _DigitalMicrograph.Py_Component_SetSelectable(self, selectable)


    def SetSelected(self, select):
        """


        Sets the selection status of the component.  
         e.g. componentGetChild.SetSelected(True)  

        Parameters
        ----------
        * `select` :  
            selection status  

        """
        return _DigitalMicrograph.Py_Component_SetSelected(self, select)


    def GetText(self):
        """


        Gets the text of a text annotation  
         e.g. annotGetText = NewTextAnnotation.GetText()  

        Parameters
        ----------
        * `size` :  
            size of the annotation  
        * `text` :  
            of a text annotation.  

        """
        return _DigitalMicrograph.Py_Component_GetText(self)


    def TextAnnotationGetAlignment(self):
        """


        Gets the alignment of the text in the text annotation.  
         e.g. alignment = component.TextAnnotationGetAlignment()  

        Returns
        -------
        the alignment of the text (long datatype)  

        """
        return _DigitalMicrograph.Py_Component_TextAnnotationGetAlignment(self)


    def TextAnnotationGetFixedPoint(self):
        """


        Gets the fixed point of the text annotation.  
         e.g. x, y = component.TextAnnotationGetFixedPoint()  

        Parameters
        ----------
        * `x` :  
            - x coordinate of the point  
        * `y` :  
            - y coordinate of the point  

        """
        return _DigitalMicrograph.Py_Component_TextAnnotationGetFixedPoint(self)


    def TextAnnotationGetResizeStyle(self):
        """


        Gets the resize style of the text annotation.  
         e.g. style = component.TextAnnotationGetResizeStyle()  

        Returns
        -------
        resize style of the text annotation (long datatype)  

        """
        return _DigitalMicrograph.Py_Component_TextAnnotationGetResizeStyle(self)


    def TextAnnotationGetText(self):
        """


        Gets the text of a text annotation.  
         e.g. text = component.TextAnnotationGetText()  

        Returns
        -------
        text of a text annotation.  

        """
        return _DigitalMicrograph.Py_Component_TextAnnotationGetText(self)


    def TextAnnotationSetAlignment(self, alignment):
        """


        Sets the alignment of the text in the text annotation.  
         e.g. component.TextAnnotationSetAlignment(1)  

        Parameters
        ----------
        * `alignment` :  
            - alignment of the text in the text annotation  

        """
        return _DigitalMicrograph.Py_Component_TextAnnotationSetAlignment(self, alignment)


    def TextAnnotationSetFixedPoint(self, x, y):
        """


        Sets the fixed point of the text annotation.  
         e.g. component.TextAnnotationSetFixedPoint(5, 5)  

        Parameters
        ----------
        * `x` :  
            - x coordinate of the point  
        * `y` :  
            - y coordinate of the point  

        """
        return _DigitalMicrograph.Py_Component_TextAnnotationSetFixedPoint(self, x, y)


    def TextAnnotationSetResizeStyle(self, style):
        """


        Sets the resize style of the text annotation.  
         e.g. component.TextAnnotationSetResizeStyle(2)  

        Parameters
        ----------
        * `style` :  
            - style of the text annotation  

        """
        return _DigitalMicrograph.Py_Component_TextAnnotationSetResizeStyle(self, style)


    def TextAnnotationSetText(self, text):
        """


        Sets the text of a text annotation.  
         e.g. component.TextAnnotationSetText("annotation")  

        Parameters
        ----------
        * `text` :  
            - annotation text  

        """
        return _DigitalMicrograph.Py_Component_TextAnnotationSetText(self, text)


    def AddChildAfter(self, child, annot_pos):
        """


        Adds 'child' to 'parent's list of sub-annotations after'annot_pos'.  
         e.g. component.AddChildAfter(component2, component3)  

        Parameters
        ----------
        * `child` :  
            - child component  
        * `annot_pos` :  
            - annot_pos component  

        """
        return _DigitalMicrograph.Py_Component_AddChildAfter(self, child, annot_pos)


    def AddChildAtBeginning(self, child):
        """


        ComponentAddChildAtBeginning: Adds 'child' to the beginning of 'parent's list of
        sub-annotations.  
         e.g. component.AddChildAtBeginning(component2)  

        Parameters
        ----------
        * `child` :  
            - child component  

        """
        return _DigitalMicrograph.Py_Component_AddChildAtBeginning(self, child)


    def AddChildAtEnd(self, child):
        """


        Adds 'child' to the end of 'parent's list of sub-annotations.  
         e.g. component.AddChildAtEnd(component2)  

        Parameters
        ----------
        * `child` :  
            - child component  

        """
        return _DigitalMicrograph.Py_Component_AddChildAtEnd(self, child)


    def AddChildBefore(self, child, annot_pos):
        """


        Adds 'child' to 'parent's list of sub-annotations before 'annot_pos'.  
         e.g. component.AddChildBefore(NewTextAnnotation, childComponent)  

        Parameters
        ----------
        * `child` :  
            - child component  
        * `annot_pos` :  
            - annot_pos component  

        """
        return _DigitalMicrograph.Py_Component_AddChildBefore(self, child, annot_pos)

Py_Component_swigregister = _DigitalMicrograph.Py_Component_swigregister
Py_Component_swigregister(Py_Component)


def NewArrowAnnotation(top, left, bottom, right):
    """


    Creates a new arrow annotation.  
     e.g. arrowComp = DM.NewArrowAnnotation(0, 30, 30, 60)  

    Parameters
    ----------
    * `top` :  
        top  
    * `left` :  
        left  
    * `bottom` :  
        bottom  
    * `right` :  
        right  
    * `return` :  
        a new arrow annotation  

    """
    return _DigitalMicrograph.NewArrowAnnotation(top, left, bottom, right)

def NewBoxAnnotation(top, left, bottom, right):
    """


    Creates a new box annotation.  
     e.g. DM.NewBoxAnnotation(0, 30, 30, 60)  

    Parameters
    ----------
    * `top` :  
        top  
    * `left` :  
        left  
    * `bottom` :  
        bottom  
    * `right` :  
        right  
    * `return` :  
        a new box annotation  

    """
    return _DigitalMicrograph.NewBoxAnnotation(top, left, bottom, right)

def NewComponent(type, f1, f2, f3, f4):
    """


    Creates a new annotaiton of type 'type'  
     e.g. NewComponent = DM.NewComponent(13, 0,0,0,0)  

    Parameters
    ----------
    * `f1` :  
        top  
    * `f2` :  
        left  
    * `f3` :  
        bottom  
    * `f4` :  
        right  
    * `return` :  
        a new annotaiton of type 'type'  

    """
    return _DigitalMicrograph.NewComponent(type, f1, f2, f3, f4)

def NewDoubleArrowAnnotation(top, left, bottom, right):
    """


    Creates a new double arrow annotation.  
     e.g. NewDoubleArrowAnnotation = DM.NewDoubleArrowAnnotation(0, 30, 30, 60)  

    Parameters
    ----------
    * `top` :  
        top  
    * `left` :  
        left  
    * `bottom` :  
        bottom  
    * `right` :  
        right  
    * `return` :  
        a new double arrow annotation  

    """
    return _DigitalMicrograph.NewDoubleArrowAnnotation(top, left, bottom, right)

def NewGroupAnnotation():
    """


    Creates a new group annotation.  
     e.g. NewGroupAnnotation = DM.NewGroupAnnotation()  

    Parameters
    ----------
    * `return` :  
        a new group annotation  

    """
    return _DigitalMicrograph.NewGroupAnnotation()

def NewLineAnnotation(top, left, bottom, right):
    """


    Creates a new line annotation.  
     e.g. NewLineAnnotation = DM.NewLineAnnotation(0, -15, 15, 15)  

    Parameters
    ----------
    * `top` :  
        top  
    * `left` :  
        left  
    * `bottom` :  
        bottom  
    * `right` :  
        right  
    * `return` :  
        a new line annotation  

    """
    return _DigitalMicrograph.NewLineAnnotation(top, left, bottom, right)

def NewOvalAnnotation(top, left, bottom, right):
    """


    Creates a new oval annotation.  
     e.g. isNewOvalAnnotationValid = NewOvalAnnotation.IsValid()  

    Parameters
    ----------
    * `top` :  
        top  
    * `left` :  
        left  
    * `bottom` :  
        bottom  
    * `right` :  
        right  
    * `return` :  
        a new oval annotation.  

    """
    return _DigitalMicrograph.NewOvalAnnotation(top, left, bottom, right)

def NewTextAnnotation(left, top, text, size):
    """


    Creates a new text annotation  
     e.g. NewTextAnnotation = DM.NewTextAnnotation(0, 0, 'test new text annotation',
    15)  

    Parameters
    ----------
    * `left` :  
        left  
    * `top` :  
        top  
    * `text` :  
        text  
    * `size` :  
        size of the annotation  
    * `return` :  
        a new text annotation.  

    """
    return _DigitalMicrograph.NewTextAnnotation(left, top, text, size)
class Py_Window(_object):
    """


    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Py_Window, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Py_Window, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_window"] = _DigitalMicrograph.Py_Window_m_window_set
    __swig_getmethods__["m_window"] = _DigitalMicrograph.Py_Window_m_window_get
    if _newclass:
        m_window = _swig_property(_DigitalMicrograph.Py_Window_m_window_get, _DigitalMicrograph.Py_Window_m_window_set)

    def __init__(self, window):
        """


        Constructor that creates a Py_Window with a given DM window. This assumes that
        the Window is already in DM.  

        Parameters
        ----------
        * `window` :  
            Window retrieved in DM (DM::Window type)  

        """
        this = _DigitalMicrograph.new_Py_Window(window)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Py_Window
    __del__ = lambda self: None

    def Close(self, verify):
        """


        Closes the window, prompting the user if 'verify' is true.  
         e.g. WindowB.Close(True)  

        Parameters
        ----------
        * `verify` :  
            prompt user to verify or not. true to verify, false otherwise.  

        """
        return _DigitalMicrograph.Py_Window_Close(self, verify)


    def GetContentBounds(self):
        """


        Gets the bounding rectangle of the content area of the 'window'.  
         e.g. top, left, bottom, right = WindowB.GetContentBounds()  

        Parameters
        ----------
        * `top` :  
            coordinate for top (long type)  
        * `left` :  
            coordinate for left (long type)  
        * `bottom` :  
            coordinate for bottom (long type)  
        * `right` :  
            coordinate for right (long type)  

        """
        return _DigitalMicrograph.Py_Window_GetContentBounds(self)


    def GetContentPosition(self):
        """


        Gets the position of the top-left corner of the content area of the 'window'.  
         e.g. x, y = WindowB.GetContentPosition()  

        Parameters
        ----------
        * `x` :  
            x coordinate for top-left corner (long type)  
        * `y` :  
            y coordinate for top-left corner (long type)  

        """
        return _DigitalMicrograph.Py_Window_GetContentPosition(self)


    def GetContentSize(self):
        """


        Gets the size of the content area of the 'window'.  
         e.g. x, y = WindowB.GetContentSize()  

        Parameters
        ----------
        * `x` :  
            x coordinate for top-left corner (long type)  
        * `y` :  
            y coordinate for top-left corner (long type)  

        """
        return _DigitalMicrograph.Py_Window_GetContentSize(self)


    def GetFrameBounds(self):
        """


        Gets the bounding rectangle of the frame area of the 'window'.  
         e.g. top, left, bottom, right = WindowB.GetFrameBounds()  

        Parameters
        ----------
        * `top` :  
            coordinate for top (long type)  
        * `left` :  
            coordinate for left (long type)  
        * `bottom` :  
            coordinate for bottom (long type)  
        * `right` :  
            coordinate for right (long type)  

        """
        return _DigitalMicrograph.Py_Window_GetFrameBounds(self)


    def GetFramePosition(self):
        """


        Gets the position of the top-left corner of the frame area of the 'window'.  
         e.g. x, y = WindowB.GetFramePosition()  

        Parameters
        ----------
        * `x` :  
            x coordinate for top-left corner (long type)  
        * `y` :  
            y coordinate for top-left corner (long type)  

        """
        return _DigitalMicrograph.Py_Window_GetFramePosition(self)


    def GetFrameSize(self):
        """


        Gets the size of the frame area of the 'window'.  
         e.g. x, y = WindowB.GetFrameSize()  

        Parameters
        ----------
        * `x` :  
            x coordinate (long type)  
        * `y` :  
            y coordinate (long type)  

        """
        return _DigitalMicrograph.Py_Window_GetFrameSize(self)


    def GetTitle(self):
        """


        Gets the title of the window.  
         e.g. windowName = WindowB.GetTitle()  

        Returns
        -------
        window title (String). Return '?' when there is exception.  

        """
        return _DigitalMicrograph.Py_Window_GetTitle(self)


    def Hide(self):
        """


        Hides the window  
         e.g. WindowB.Hide()  

        """
        return _DigitalMicrograph.Py_Window_Hide(self)


    def SetContentBounds(self, top, left, bottom, right):
        """


        Sets the bounding rectangle of the content area of the 'window'.  
         e.g. top, left, bottom, right = WindowB.GetContentBounds()
        WindowB.SetContentBounds(top-1, left-1, bottom-1, right-1)  

        Parameters
        ----------
        * `top` :  
            coordinate for top (long type)  
        * `left` :  
            coordinate for left (long type)  
        * `bottom` :  
            coordinate for bottom (long type)  
        * `right` :  
            coordinate for right (long type)  

        """
        return _DigitalMicrograph.Py_Window_SetContentBounds(self, top, left, bottom, right)


    def SetContentPosition(self, x, y):
        """


        Sets the position of the top-left corner of the content area of the 'window'.  
         e.g. x, y = WindowB.GetContentPosition() WindowB.SetContentPosition(x-1, y-1)  

        Parameters
        ----------
        * `x` :  
            x coordinate for top-left corner (long type)  
        * `y` :  
            y coordinate for top-left corner (long type)  

        """
        return _DigitalMicrograph.Py_Window_SetContentPosition(self, x, y)


    def SetContentSize(self, x, y):
        """


        Sets the size of the content area of the 'window'.  
         e.g. x, y = WindowB.GetContentSize() WindowB.SetContentSize(x-1, y-1)  

        Parameters
        ----------
        * `x` :  
            x size (long type)  
        * `y` :  
            y size (long type)  

        """
        return _DigitalMicrograph.Py_Window_SetContentSize(self, x, y)


    def SetFrameBounds(self, top, left, bottom, right):
        """


        Sets the bounding rectangle of the frame area of the 'window'.  
         e.g. top, left, bottom, right = WindowB.GetFrameBounds()
        WindowB.SetFrameBounds(top-1, left-1, bottom-1, right-1)  

        Parameters
        ----------
        * `top` :  
            coordinate for top (long type)  
        * `left` :  
            coordinate for left (long type)  
        * `bottom` :  
            coordinate for bottom (long type)  
        * `right` :  
            coordinate for right (long type)  

        """
        return _DigitalMicrograph.Py_Window_SetFrameBounds(self, top, left, bottom, right)


    def SetFramePosition(self, x, y):
        """


        Sets the position of the top-left corner of the frame area of the 'window'. x, y
        = WindowB.GetFramePosition() WindowB.SetFramePosition(x-1, y-1)  

        Parameters
        ----------
        * `x` :  
            x coordinate for top-left corner (long type)  
        * `y` :  
            y coordinate for top-left corner (long type)  

        """
        return _DigitalMicrograph.Py_Window_SetFramePosition(self, x, y)


    def SetFrameSize(self, x, y):
        """


        Sets the size of the frame area of the 'window'.  
         e.g. x, y = WindowB.GetFrameSize() WindowB.SetFrameSize(x-1, y-1)  

        Parameters
        ----------
        * `x` :  
            x size (long type)  
        * `y` :  
            y size (long type)  

        """
        return _DigitalMicrograph.Py_Window_SetFrameSize(self, x, y)


    def SetTitle(self, title):
        """


        Sets the title of the window.  
         e.g. WindowB.SetTitle('updateWindowTitle3')  

        Parameters
        ----------
        * `title` :  
            window title (String)  

        """
        return _DigitalMicrograph.Py_Window_SetTitle(self, title)


    def Show(self):
        """


        Shows the window.  
         e.g. WindowB.Show()  

        """
        return _DigitalMicrograph.Py_Window_Show(self)


    def Update(self):
        """


        Updates 'window's display.  
         e.g. WindowB.Update()  

        """
        return _DigitalMicrograph.Py_Window_Update(self)


    def IsValid(self):
        """


        Returns true if 'window' points to a valid object.  
         e.g. isWindowValidDocA = documentWinA.IsValid()  

        Returns
        -------
        whether it is valid or not. Also, return false when there is an exception.  

        """
        return _DigitalMicrograph.Py_Window_IsValid(self)


    def WorkspaceIDFindByWindow(self):
        """


        Find workspace ID a window belongs to.  
         e.g. workspaceID = WindowB.WorkspaceIDFindByWindow()  

        Returns
        -------
        workspace id Also, return 0 when there is an exception.  

        """
        return _DigitalMicrograph.Py_Window_WorkspaceIDFindByWindow(self)


    def GetImageDocument(self):
        """


        Gets the image document displayed in the window.  
         e.g. imageDoc = WindowA.GetImageDocument(docWinA)  

        Returns
        -------
        image document  

        """
        return _DigitalMicrograph.Py_Window_GetImageDocument(self)

Py_Window_swigregister = _DigitalMicrograph.Py_Window_swigregister
Py_Window_swigregister(Py_Window)


def GetDocumentWindow(index):
    """


    Gets the 'index'th document window.  
     e.g. documentWinA = DM.GetDocumentWindow(0)  

    Parameters
    ----------
    * `index` :  
        window index (long type), start with 1 (as 0 is the active window which is
        the python window)  

    Returns
    -------
    a Py_window*. Return NULL when there is an exception.  

    """
    return _DigitalMicrograph.GetDocumentWindow(index)

def GetDocumentWindowByTitle(name):
    """


    Gets the document window named 'name'  
     e.g. documentWinB = DM.GetDocumentWindowByTitle('untitled1')  

    Parameters
    ----------
    * `name` :  
        window name (String type)  

    Returns
    -------
    a Py_window*. Return NULL when there is an exception.  

    """
    return _DigitalMicrograph.GetDocumentWindowByTitle(name)

def WorkspaceGetWindow(wsID, pos):
    """


    Gets window in position in specified workspace.  
     e.g. WindowC = DM.WorkspaceGetWindow(1,0)  

    Parameters
    ----------
    * `wsID` :  
        workspace id (long type)  
    * `pos` :  
        position (long type)  

    Returns
    -------
    a Py_window. Return NULL when there is an exception.  

    """
    return _DigitalMicrograph.WorkspaceGetWindow(wsID, pos)

def WorkspaceCountWindows(wsID):
    """


    Gets number of windows in specified workspace.  
     e.g. count = DM.WorkspaceCountWindows(1)  

    Parameters
    ----------
    * `wsID` :  
        workspace id  

    Returns
    -------
    number of windows. Return 0 when there is an exception.  

    """
    return _DigitalMicrograph.WorkspaceCountWindows(wsID)
INVALID_NP_IMAGE_TYPE = _DigitalMicrograph.INVALID_NP_IMAGE_TYPE
class Py_Image(_object):
    """


    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Py_Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Py_Image, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_img"] = _DigitalMicrograph.Py_Image_m_img_set
    __swig_getmethods__["m_img"] = _DigitalMicrograph.Py_Image_m_img_get
    if _newclass:
        m_img = _swig_property(_DigitalMicrograph.Py_Image_m_img_get, _DigitalMicrograph.Py_Image_m_img_set)
    __swig_setmethods__["m_imgDim0"] = _DigitalMicrograph.Py_Image_m_imgDim0_set
    __swig_getmethods__["m_imgDim0"] = _DigitalMicrograph.Py_Image_m_imgDim0_get
    if _newclass:
        m_imgDim0 = _swig_property(_DigitalMicrograph.Py_Image_m_imgDim0_get, _DigitalMicrograph.Py_Image_m_imgDim0_set)
    __swig_setmethods__["m_imgDim1"] = _DigitalMicrograph.Py_Image_m_imgDim1_set
    __swig_getmethods__["m_imgDim1"] = _DigitalMicrograph.Py_Image_m_imgDim1_get
    if _newclass:
        m_imgDim1 = _swig_property(_DigitalMicrograph.Py_Image_m_imgDim1_get, _DigitalMicrograph.Py_Image_m_imgDim1_set)
    __swig_setmethods__["m_imgDim2"] = _DigitalMicrograph.Py_Image_m_imgDim2_set
    __swig_getmethods__["m_imgDim2"] = _DigitalMicrograph.Py_Image_m_imgDim2_get
    if _newclass:
        m_imgDim2 = _swig_property(_DigitalMicrograph.Py_Image_m_imgDim2_get, _DigitalMicrograph.Py_Image_m_imgDim2_set)
    __swig_setmethods__["m_imgDim3"] = _DigitalMicrograph.Py_Image_m_imgDim3_set
    __swig_getmethods__["m_imgDim3"] = _DigitalMicrograph.Py_Image_m_imgDim3_get
    if _newclass:
        m_imgDim3 = _swig_property(_DigitalMicrograph.Py_Image_m_imgDim3_get, _DigitalMicrograph.Py_Image_m_imgDim3_set)
    __swig_setmethods__["m_imgDim4"] = _DigitalMicrograph.Py_Image_m_imgDim4_set
    __swig_getmethods__["m_imgDim4"] = _DigitalMicrograph.Py_Image_m_imgDim4_get
    if _newclass:
        m_imgDim4 = _swig_property(_DigitalMicrograph.Py_Image_m_imgDim4_get, _DigitalMicrograph.Py_Image_m_imgDim4_set)
    __swig_setmethods__["m_imgDimensions"] = _DigitalMicrograph.Py_Image_m_imgDimensions_set
    __swig_getmethods__["m_imgDimensions"] = _DigitalMicrograph.Py_Image_m_imgDimensions_get
    if _newclass:
        m_imgDimensions = _swig_property(_DigitalMicrograph.Py_Image_m_imgDimensions_get, _DigitalMicrograph.Py_Image_m_imgDimensions_set)

    def __init__(self, *args):
        """


        Constructor that create a Py_Image with a given pNdArray and displays it in DM.  

        Parameters
        ----------
        * `pNdArray` :  
            Numpy array in Python  

        """
        this = _DigitalMicrograph.new_Py_Image(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Py_Image
    __del__ = lambda self: None

    def GetImgWidth(self):
        """


        Get the width of the image.  
         e.g. width = img.GetImgWidth()  

        Returns
        -------
        Image width  

        """
        return _DigitalMicrograph.Py_Image_GetImgWidth(self)


    def GetImgHeight(self):
        """


        Get the height of the image.  
         e.g. height = img.GetImgHeight()  

        Returns
        -------
        Image heigth  

        """
        return _DigitalMicrograph.Py_Image_GetImgHeight(self)


    def GetImgDepth(self):
        """


        Get the depth of the image.  
         e.g. depth = img.GetImgDepth()  

        Returns
        -------
        Image depth  

        """
        return _DigitalMicrograph.Py_Image_GetImgDepth(self)


    def GetNumArray(self):
        """


        Get the image data in numpy array format  
         e.g. numpy_array = pyImage.GetNumArray()  

        Returns
        -------
        a writable numpy array (to be used in Python environment) according to the image
        type  

        """
        return _DigitalMicrograph.Py_Image_GetNumArray(self)


    def GetDataType(self):
        """


        Get the image data type  
         e.g. type = myImage2.GetDataType()  

        Returns
        -------
        an unsigned long representing the data type.  

        """
        return _DigitalMicrograph.Py_Image_GetDataType(self)


    def UpdateImage(self):
        """


        Update image on display  
         e.g. pyImage.UpdateImage()  

        """
        return _DigitalMicrograph.Py_Image_UpdateImage(self)


    def GetTagGroup(self):
        """


        Gets the tags associated with the image.  
         e.g. tagGroup = myImage.GetTagGroup()  

        Returns
        -------
        Py_TagGroup associated with the image.  

        """
        return _DigitalMicrograph.Py_Image_GetTagGroup(self)


    def FindNextImage(self):
        """


        Find the next displayed image, provide an image to searching the next image  
         e.g. myImage2 = myImage.FindNextImage()  

        Returns
        -------
        the image next to the provided image  

        """
        return _DigitalMicrograph.Py_Image_FindNextImage(self)


    def IsValid(self):
        """


        Check to see if an image is valid  
         e.g. isImageValid = ImageA.IsValid()  

        Returns
        -------
        true for valid image, false otherwise  

        """
        return _DigitalMicrograph.Py_Image_IsValid(self)


    def ShowImage(self):
        """


        Show the specified image  
         e.g. myImage2.ShowImage()  

        Returns
        -------
        window of the image  

        """
        return _DigitalMicrograph.Py_Image_ShowImage(self)


    def Save(self):
        """


        Save the image under the it's current filename.  
         e.g. myImage2.Save()  

        """
        return _DigitalMicrograph.Py_Image_Save(self)


    def SaveImage(self, file_path):
        """


        Save the image to the fileName in it's current file format.  
         e.g. #yImage2.SaveImage('C:\Projects\hello.dm3')  

        Parameters
        ----------
        * `file_path` :  
            - filename in it's current file format  

        """
        return _DigitalMicrograph.Py_Image_SaveImage(self, file_path)


    def SaveAsGatan(self, file_path):
        """


        Save the image to the fileName in it's current file format.  
         e.g. myImage2.SaveAsGatan('C:\Projects\hello2.dm4')  

        Parameters
        ----------
        * `file_path` :  
            - filename in it's current file format  

        """
        return _DigitalMicrograph.Py_Image_SaveAsGatan(self, file_path)


    def SaveAsGatan3(self, file_path):
        """


        Save the image to the fileName in Gatan 3.0 file format.  
         e.g. myImage2.SaveAsGatan3('C:\Projects\hello3.dm3')  

        Parameters
        ----------
        * `file_path` :  
            - filename in it's current file format  

        """
        return _DigitalMicrograph.Py_Image_SaveAsGatan3(self, file_path)


    def CountImageDisplays(self):
        """


        Returns the number of image displays in which this image is displayed.  
         e.g. count = myImage2.CountImageDisplays()  

        Returns
        -------
        number of image displays  

        """
        return _DigitalMicrograph.Py_Image_CountImageDisplays(self)


    def CreateImageDisplay(self, displayType):
        """


        Creates a new image display of type 'displayType' for the image.  
         e.g. myImage.CreateImageDisplay(1)  

        Parameters
        ----------
        * `displayType` :  
            display type  

        Returns
        -------
        a new image display  

        """
        return _DigitalMicrograph.Py_Image_CreateImageDisplay(self, displayType)


    def GetDimensionCalibration(self, dimension, calibrationFormat):
        """


        Gets the calibration information of the given dimension.  
         e.g. origin, scale, unit = myImage.GetDimensionCalibration(0, 0)  

        Parameters
        ----------
        * `dimension` :  
            given dimension  
        * `originDC` :  
            origin  
        * `scaleDC` :  
            scale  
        * `unitsDC` :  
            units  
        * `calibrationFormat` :  
            specifies if the returned 'origin' value is the calibrated value at pixel
            index 0 (calibrationFormat = 0), or if it is the pixel index at which the
            calibrated value is zero (calibrationformat = 1)  

        """
        return _DigitalMicrograph.Py_Image_GetDimensionCalibration(self, dimension, calibrationFormat)


    def GetDimensionOrigin(self, dimension):
        """


        Returns the origin of the given dimension of image.  
         e.g. dimOrgin = myImage.GetDimensionOrigin(0)  

        Parameters
        ----------
        * `dimension` :  
            dimension  

        Returns
        -------
        origin  

        """
        return _DigitalMicrograph.Py_Image_GetDimensionOrigin(self, dimension)


    def GetDimensionScale(self, dimension):
        """


        Returns the scale of the given dimension of image.  
         e.g. dimScale = myImage.GetDimensionScale(0)  

        Parameters
        ----------
        * `dimension` :  
            dimension  

        Returns
        -------
        scale  

        """
        return _DigitalMicrograph.Py_Image_GetDimensionScale(self, dimension)


    def GetDimensionSize(self, dimension):
        """


        Gets the size of the given dimension.  
         e.g. dimSize = myImage.GetDimensionSize(0)  

        Parameters
        ----------
        * `dimension` :  
            dimension  

        Returns
        -------
        size  

        """
        return _DigitalMicrograph.Py_Image_GetDimensionSize(self, dimension)


    def GetDimensionUnitInfo(self, dimension):
        """


        Copies the unit string of the given dimension of image to the buffer.  
         e.g. unit, power = myImage.GetDimensionUnitInfo(0)  

        Parameters
        ----------
        * `canon_units` :  
            unit string  
        * `power` :  

        """
        return _DigitalMicrograph.Py_Image_GetDimensionUnitInfo(self, dimension)


    def GetDimensionUnitString(self, dimension):
        """


        Copies the unit string of the given dimension of image to the buffer.  
         e.g. unitString = myImage.GetDimensionUnitString(0)  

        Parameters
        ----------
        * `dimension` :  
            given dimension  

        Returns
        -------
        intensity units  

        """
        return _DigitalMicrograph.Py_Image_GetDimensionUnitString(self, dimension)


    def GetID(self):
        """


        Returns a unique identifier for the image.  
         e.g. imageID = myImage2.GetID()  

        Returns
        -------
        a unique identifier for the image  

        """
        return _DigitalMicrograph.Py_Image_GetID(self)


    def GetImageDisplay(self, index):
        """


        Returns the given image display in which this image is displayed.  
         e.g. imageDisplay = myImage2.GetImageDisplay(0)  

        Parameters
        ----------
        * `index` :  
            index of the image  

        Returns
        -------
        image display  

        """
        return _DigitalMicrograph.Py_Image_GetImageDisplay(self, index)


    def GetImageDisplayInImageDocument(self, imgDoc, index):
        """


        Returns the given image display in the image document in which this image is
        displayed.  
         e.g. imageDisplayImgDoc = myImage.GetImageDisplayInImageDocument(ImageDocByID,
        0)  

        Parameters
        ----------
        * `imgDoc` :  
            image document  
        * `index` :  
            index of the image  

        Returns
        -------
        image display  

        """
        return _DigitalMicrograph.Py_Image_GetImageDisplayInImageDocument(self, imgDoc, index)


    def GetIntensityOrigin(self):
        """


        Returns the origin of image's intensity.  
         e.g. intensity = myImage.GetIntensityOrigin()  

        Returns
        -------
        origin of image's intensity.  

        """
        return _DigitalMicrograph.Py_Image_GetIntensityOrigin(self)


    def GetIntensityScale(self):
        """


        Returns the scale of image's intensity.  
         e.g. scale = myImage.GetIntensityScale()  

        Returns
        -------
        scale of image's intensity.  

        """
        return _DigitalMicrograph.Py_Image_GetIntensityScale(self)


    def GetIntensityUnitInfo(self):
        """


        Copies the unit string of image's intensity to the buffer. unit, power =
        myImage.GetIntensityUnitInfo()  

        Parameters
        ----------
        * `canon_units` :  
            units  
        * `power` :  

        Returns
        -------
        scale of image's intensity.  

        """
        return _DigitalMicrograph.Py_Image_GetIntensityUnitInfo(self)


    def GetIntensityUnitString(self):
        """


        Returns the units of the image's intensity.  
         e.g. intensityUnitString = myImage.GetIntensityUnitString()  

        Returns
        -------
        units of the image's intensity.  

        """
        return _DigitalMicrograph.Py_Image_GetIntensityUnitString(self)


    def GetLabel(self):
        """


        Gets the label of the image as used in scripts.  
         e.g. imgGetLabel = myImage.GetLabel()  

        Returns
        -------
        label of the image  

        """
        return _DigitalMicrograph.Py_Image_GetLabel(self)


    def GetName(self):
        """


        Gets the name of the image.  
         e.g. imgGetName = myImage.GetName()  

        Returns
        -------
        name of the image  

        """
        return _DigitalMicrograph.Py_Image_GetName(self)


    def GetNumDimensions(self):
        """


        Returns number of dimensions of the image  
         e.g. imgDim = myImage.GetNumDimensions()  

        Returns
        -------
        number of dimensions of the image  

        """
        return _DigitalMicrograph.Py_Image_GetNumDimensions(self)


    def SetDescriptionText(self, description):
        """


        Sets the description text associated with the image.  
         e.g. myImage.SetDescriptionText('descText')  

        Parameters
        ----------
        * `img` :  
            provided image  
        * `description` :  
            - description text  

        """
        return _DigitalMicrograph.Py_Image_SetDescriptionText(self, description)


    def SetDimensionCalibration(self, dimenstion, origin, scale, unitString, calibrationFormat):
        """


        Sets the calibration for the given dimension.  
         e.g. myImage.SetDimensionCalibration(1, 0, 2, 'mm', 0)  

        Parameters
        ----------
        * `dimenstion` :  
            given dimension  
        * `origin` :  
            provided origin  
        * `scale` :  
            provided scale  
        * `unitString` :  
            provided unit string  
        * `calibrationFormat` :  
            provided calibration format  

        """
        return _DigitalMicrograph.Py_Image_SetDimensionCalibration(self, dimenstion, origin, scale, unitString, calibrationFormat)


    def SetDimensionOrigin(self, dimension, origin):
        """


        Sets the origin of the given dimension of image.  
         e.g. myImage.SetDimensionOrigin(1, 0)  

        Parameters
        ----------
        * `dimenstion` :  
            given dimension  
        * `origin` :  
            provided origin  

        """
        return _DigitalMicrograph.Py_Image_SetDimensionOrigin(self, dimension, origin)


    def SetDimensionScale(self, dimension, scale):
        """


        Sets the scale of the given dimension of image.  
         e.g. myImage.SetDimensionScale(1, 2)  

        Parameters
        ----------
        * `dimenstion` :  
            given dimension  
        * `scale` :  
            provided scale  

        """
        return _DigitalMicrograph.Py_Image_SetDimensionScale(self, dimension, scale)


    def SetDimensionUnitInfo(self, dimension, canon_units_in, power_in):
        """


        Sets the unit string of the given dimension of image.  
         e.g. myImage.SetDimensionUnitInfo(1, 'mm', 2)  

        Parameters
        ----------
        * `argument_1` :  
            provided image  
        * `dimension` :  
            given dimension  
        * `canon_units_in` :  
            provided canon units  
        * `power_in` :  
            provided power  

        """
        return _DigitalMicrograph.Py_Image_SetDimensionUnitInfo(self, dimension, canon_units_in, power_in)


    def SetDimensionUnitString(self, dimension, units):
        """


        Sets the unit string of the given dimension of image.  
         e.g. myImage.SetDimensionUnitString(1, 'm')  

        Parameters
        ----------
        * `dimension` :  
            given dimension  
        * `units` :  
            provided units string  

        """
        return _DigitalMicrograph.Py_Image_SetDimensionUnitString(self, dimension, units)


    def SetIntensityCalibrationDisplayed(self, do_display):
        """


        Sets whether or not to display the intensity in calibrated units to
        'do_display'.  
         e.g. myImage.SetIntensityCalibrationDisplayed(True)  

        Parameters
        ----------
        * `im` :  
            provided image  
        * `do_display` :  
            whether or not to display  

        """
        return _DigitalMicrograph.Py_Image_SetIntensityCalibrationDisplayed(self, do_display)


    def SetIntensityOrigin(self, origin):
        """


        Sets the origin of image's intensity.  
         e.g. myImage.SetIntensityOrigin(1)  

        Parameters
        ----------
        * `origin` :  
            origin of image  

        """
        return _DigitalMicrograph.Py_Image_SetIntensityOrigin(self, origin)


    def SetIntensityScale(self, scale):
        """


        Sets the scale of image's intensity.  
         e.g. myImage.SetIntensityScale(3)  

        Parameters
        ----------
        * `scale` :  
            scale of image's intensity  

        """
        return _DigitalMicrograph.Py_Image_SetIntensityScale(self, scale)


    def SetIntensityUnitInfo(self, canon_units_in, power_in):
        """


        Sets the unit string of image's intensity.  
         e.g. myImage.SetIntensityUnitInfo('mm', 2)  

        Parameters
        ----------
        * `canon_units_in` :  
            unit string of image's intensity  
        * `power_in` :  
            intensity  

        """
        return _DigitalMicrograph.Py_Image_SetIntensityUnitInfo(self, canon_units_in, power_in)


    def SetIntensityUnitString(self, units):
        """


        Sets the unit string of image's intensity.  
         e.g. myImage.SetIntensityUnitString('cm')  

        Parameters
        ----------
        * `units` :  
            unit string of image's intensity  

        """
        return _DigitalMicrograph.Py_Image_SetIntensityUnitString(self, units)


    def SetName(self, name):
        """


        Sets the name of the image.  
         e.g. myImage.SetName('hello')  

        Parameters
        ----------
        * `name` :  
            name of the image  

        """
        return _DigitalMicrograph.Py_Image_SetName(self, name)


    def GetOrCreateImageDocument(self):
        """


        Returns an image document containing the image, creating one if necessary.  
         e.g. ImageDocGetOrCreate = myImage.GetOrCreateImageDocument()  

        Returns
        -------
        an image document  

        """
        return _DigitalMicrograph.Py_Image_GetOrCreateImageDocument(self)

Py_Image_swigregister = _DigitalMicrograph.Py_Image_swigregister
Py_Image_swigregister(Py_Image)


def GetFrontImage():
    """


    Get the front most displayed image to be used in Python environment  
     e.g. myImage = DM.GetFrontImage()  

    Returns
    -------
    the front most image (Py_Image type)  

    """
    return _DigitalMicrograph.GetFrontImage()

def FindFrontImage():
    """


    Get the front most displayed image to be used in Python environment. This
    function does not throw exception when there is error.  
     e.g. myImage = DM.FindFrontImage()  

    Returns
    -------
    the front most image (Py_Image type)  

    """
    return _DigitalMicrograph.FindFrontImage()

def FindImageByLabel(label):
    """


    Find image by label  

    Parameters
    ----------
    * `label` :  
        the name of the label (  
         e.g. label = "A")  

    Returns
    -------
    the image with the given label  

    """
    return _DigitalMicrograph.FindImageByLabel(label)

def FindImageByName(name):
    """


    Find image by name  

    Parameters
    ----------
    * `name` :  
        the name of the image (  
         e.g. name = "Untitled")  

    Returns
    -------
    the image with the name  

    """
    return _DigitalMicrograph.FindImageByName(name)

def FindImageByID(id):
    """


    Find image by image id  
     e.g. image = DM.FindImageByID(1)  

    Parameters
    ----------
    * `id` :  
        image id  

    Returns
    -------
    the image with a given id  

    """
    return _DigitalMicrograph.FindImageByID(id)

def CreateImage(*args):
    """


    Create a Py_Image by passing a Image (DM data type)  

    Parameters
    ----------
    * `aImg` :  
        a Image (DM data type)  

    Returns
    -------
    an image that can be used in Python environment  

    """
    return _DigitalMicrograph.CreateImage(*args)

def OpenImage(fileName):
    """


    Open the image with the filename. Returns the opened image. Throws, if files
    cannot be opened.  
     e.g. myImage2 = DM.OpenImage('C:\Projects\hello2.dm4')  

    Parameters
    ----------
    * `fileName` :  
        name of the file  

    """
    return _DigitalMicrograph.OpenImage(fileName)

def DeleteImage(im):
    """


    Deletes the image and the underlying Py_Image object.  
     User will need to invoke python command del() to remove each reference to the
    same image object after DeleteImage() command.  
     Otherwise, the python image object will not get deleted if there are still
    references to the same image object.  
     e.g. DM.DeleteImage(img)  
     del img  

    """
    return _DigitalMicrograph.DeleteImage(im)

def CloseImage(im):
    """


    Close the image and delete the underlying Py_Image object.  
     The underlying Py_Image will be deleted regardless of whether user choose to
    yes/no/cancel to the "Save Image Dialog". User will need to invoke python
    command del() to remove each reference to the same image object after
    DeleteImage() command.  
     Otherwise, the python image object will not get deleted if there are still
    references to the same image object.  
     e.g. DM.CloseImage(img)  
     del img  

    Parameters
    ----------
    * `name` :  
        name of the image  

    """
    return _DigitalMicrograph.CloseImage(im)
class Py_ImageDocument(_object):
    """


    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Py_ImageDocument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Py_ImageDocument, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_imgDoc"] = _DigitalMicrograph.Py_ImageDocument_m_imgDoc_set
    __swig_getmethods__["m_imgDoc"] = _DigitalMicrograph.Py_ImageDocument_m_imgDoc_get
    if _newclass:
        m_imgDoc = _swig_property(_DigitalMicrograph.Py_ImageDocument_m_imgDoc_get, _DigitalMicrograph.Py_ImageDocument_m_imgDoc_set)

    def __init__(self, imgDoc):
        """


        Constructor that creates a Py_ImageDocument with a given DM imgDoc. This assumes
        that the imgDoc is already in DM.  

        Parameters
        ----------
        * `imgDoc` :  
            Image document retrieved in DM  

        """
        this = _DigitalMicrograph.new_Py_ImageDocument(imgDoc)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Py_ImageDocument
    __del__ = lambda self: None

    def GetComponentByID(self, id):
        """


        Returns an annotation contained in this image document by id.  
         e.g. ImageDocByID = DM.GetImageDocumentByID(1)  
         component1 = ImageDocByID.GetComponentByID(3)  

        Parameters
        ----------
        * `id` :  
            component id  

        Returns
        -------
        an annotation  

        """
        return _DigitalMicrograph.Py_ImageDocument_GetComponentByID(self, id)


    def AddImage(self, image):
        """


        Adds the given image to the list maintained in the image document.  
         e.g. ImageDocA.AddImage(ImageA)  

        Parameters
        ----------
        * `image` :  
            given image  

        """
        return _DigitalMicrograph.Py_ImageDocument_AddImage(self, image)


    def AddImageDisplay(self, image, displayType):
        """


        Adds the given image and an image display for it of the given type.  
         e.g. ImageDocA.AddImageDisplay(ImageA, 1)  

        Parameters
        ----------
        * `image` :  
            given image  
        * `displayType` :  
            display type  

        Returns
        -------
        image display  

        """
        return _DigitalMicrograph.Py_ImageDocument_AddImageDisplay(self, image, displayType)


    def Close(self, saving):
        """


        Closes the given image document.  
         e.g. ImageDocA.Close(True)  

        Parameters
        ----------
        * `saving` :  
            If saving is true then asks whether to save it, otherwise just closes it.  

        """
        return _DigitalMicrograph.Py_ImageDocument_Close(self, saving)


    def CountImages(self):
        """


        Returns the number of images contained in this image document.  
         e.g. noOfImages = ImageDocA.CountImages()  

        Returns
        -------
        number of images  

        """
        return _DigitalMicrograph.Py_ImageDocument_CountImages(self)


    def DeleteImage(self, image):
        """


        Deletes the given image from this image document.  
         e.g. ImageDocA.DeleteImage(ImageA)  

        Parameters
        ----------
        * `image` :  
            given image  

        """
        return _DigitalMicrograph.Py_ImageDocument_DeleteImage(self, image)


    def GetImage(self, position):
        """


        Returns the image contained within this image document by position.  
         e.g. ImageB = ImageDocA.GetImage(0)  

        Parameters
        ----------
        * `position` :  
            given position  

        Returns
        -------
        an image  

        """
        return _DigitalMicrograph.Py_ImageDocument_GetImage(self, position)


    def GetImageByID(self, id):
        """


        Returns an image contained in this image document by id.  
         e.g. ImageC = ImageDocA.GetImageByID(1)  

        Parameters
        ----------
        * `id` :  
            given image id  

        Returns
        -------
        an image  

        """
        return _DigitalMicrograph.Py_ImageDocument_GetImageByID(self, id)


    def GetName(self):
        """


        Returns the name of the image document.  
         e.g. ImageDocName = ImageDocA.GetName()  

        Returns
        -------
        image document name  

        """
        return _DigitalMicrograph.Py_ImageDocument_GetName(self)


    def GetRootComponent(self):
        """


        Gets the root annotation of the image document.  
         e.g. component = ImageDocByID.GetRootComponent()  

        Returns
        -------
        root annotation  

        """
        return _DigitalMicrograph.Py_ImageDocument_GetRootComponent(self)


    def GetTagGroup(self):
        """


        Gets the tag group associated with the image document.  
         e.g. tagGroup = ImageDocByID.GetTagGroup()  

        Returns
        -------
        tag group  

        """
        return _DigitalMicrograph.Py_ImageDocument_GetTagGroup(self)


    def GetWindow(self):
        """


        Returns the window displaying the document.  
         e.g. docWinA = ImageDocA.GetWindow()  

        Returns
        -------
        window displaying the document  

        """
        return _DigitalMicrograph.Py_ImageDocument_GetWindow(self)


    def GetWorkspace(self):
        """


        Get the ID of the workspace the image document is shown at.  
         e.g. wsID = ImageDocA.GetWorkspace()  

        Returns
        -------
        workspace id  

        """
        return _DigitalMicrograph.Py_ImageDocument_GetWorkspace(self)


    def Hide(self):
        """


        Hides the given image document.  
         e.g. ImageDocA.Hide()  

        """
        return _DigitalMicrograph.Py_ImageDocument_Hide(self)


    def IsValid(self):
        """


        Returns true if 'imageDocument' points to a valid object.  
         e.g. isImgDocValid = ImageDoc.IsValid()  

        """
        return _DigitalMicrograph.Py_ImageDocument_IsValid(self)


    def MoveToWorkspace(self, wsID):
        """


        Moves the given image document to the workspace of given ID.  
         e.g. ImageDocA.MoveToWorkspace(2)  

        Parameters
        ----------
        * `wsID` :  
            workspace id  

        """
        return _DigitalMicrograph.Py_ImageDocument_MoveToWorkspace(self, wsID)


    def SaveToFile(self, handler, fileName):
        """


        Saves the image document to the given file name using the I/O handler specified.  
         e.g. ImageDocA.SaveToFile('Gatan 3 Format', 'c:\ABC.dm3')  

        Parameters
        ----------
        * `handler` :  
            specified I/O handler  
        * `fileName` :  
            file name  

        """
        return _DigitalMicrograph.Py_ImageDocument_SaveToFile(self, handler, fileName)


    def SetName(self, name):
        """


        Sets the name of the image document.  
         e.g. ImageDocA.SetName('setname')  

        Parameters
        ----------
        * `name` :  
            image document name  

        """
        return _DigitalMicrograph.Py_ImageDocument_SetName(self, name)


    def Show(self):
        """


        Shows the given image document.  
         e.g. newImageDoc.Show()  

        Returns
        -------
        window for the given image doc  

        """
        return _DigitalMicrograph.Py_ImageDocument_Show(self)


    def ShowAtPosition(self, x, y):
        """


        Shows the given image document at the application position (x,y).  
         e.g. top, left, bottom, right = WindowB.GetContentBounds()  
         ImageDocA.ShowAtPosition(top+5, left+5)  

        Parameters
        ----------
        * `x` :  
            x coordinate  
        * `y` :  
            y coordinate  

        Returns
        -------
        window for the given image doc  

        """
        return _DigitalMicrograph.Py_ImageDocument_ShowAtPosition(self, x, y)


    def ShowAtRect(self, top, left, bottom, right):
        """


        Shows the given image document at the rect (top,left,bottom,right).  
         e.g. ImageDocA.ShowAtRect(top+5, left+5, bottom+5, right+5)  

        Parameters
        ----------
        * `top` :  
            coordinate for top.  
        * `left` :  
            coordinate for left.  
        * `bottom` :  
            coordinate for bottom.  
        * `right` :  
            coordinate for right.  

        Returns
        -------
        window for the given image doc  

        """
        return _DigitalMicrograph.Py_ImageDocument_ShowAtRect(self, top, left, bottom, right)

Py_ImageDocument_swigregister = _DigitalMicrograph.Py_ImageDocument_swigregister
Py_ImageDocument_swigregister(Py_ImageDocument)


def CountImageDocuments(*args):
    """


    Returns the number of image documents on the workspace of given ID.  
     e.g.noOfDoc2 = DM.CountImageDocuments(1)  

    Returns
    -------
    number of image document  

    """
    return _DigitalMicrograph.CountImageDocuments(*args)

def CountImageDocumentsOfAllWorkspaces():
    """


    returns the number of image documents across all workspaces.  
     e.g. noOfDocAllWs = DM.CountImageDocumentsOfAllWorkspaces()  

    Returns
    -------
    number of image document  

    """
    return _DigitalMicrograph.CountImageDocumentsOfAllWorkspaces()

def GetFrontImageDocument():
    """


    Returns the front image document.  
     e.g. ImageDocFront = DM.GetFrontImageDocument()  

    Returns
    -------
    front image document  

    """
    return _DigitalMicrograph.GetFrontImageDocument()

def GetImageDocument(*args):
    """


    Returns the image document by position within the active workspace.  
     e.g. ImageDocWS = DM.GetImageDocument(1, 1)  

    Parameters
    ----------
    * `position` :  
        position within the active workspace.  
    * `wsID` :  
        workspace id  

    Returns
    -------
    image document  

    """
    return _DigitalMicrograph.GetImageDocument(*args)

def GetImageDocumentOfAllWorkspaces(position):
    """


    Returns the image document by position within the application across all
    workspaces.  
     e.g. ImageDocAllWS = DM.GetImageDocumentOfAllWorkspaces(2)  

    Parameters
    ----------
    * `position` :  
        position within the active workspace.  

    Returns
    -------
    image document  

    """
    return _DigitalMicrograph.GetImageDocumentOfAllWorkspaces(position)

def GetImageDocumentByID(id):
    """


    Returns the image document whose id is 'id'.  
     e.g. ImageDocByID = DM.GetImageDocumentByID(2)  

    Parameters
    ----------
    * `id` :  
        image document id  

    Returns
    -------
    image document  

    """
    return _DigitalMicrograph.GetImageDocumentByID(id)

def NewImageDocument(title):
    """


    Creates an empty image document.  
     e.g. newImageDoc = DM.NewImageDocument('newTestImageDoc')  

    Parameters
    ----------
    * `title` :  
        title of the document  

    Returns
    -------
    image document  

    """
    return _DigitalMicrograph.NewImageDocument(title)

def NewImageDocumentFromFile(path_name):
    """


    Creates a new image document from a file.  
     e.g. newImageDoc =
    DM.NewImageDocumentFromFile('C:\Projects\newTestImageDoc.dm3')  

    Parameters
    ----------
    * `path_name` :  
        file path name  

    Returns
    -------
    image document  

    """
    return _DigitalMicrograph.NewImageDocumentFromFile(path_name)
class Py_ImageDisplay(Py_Component):
    """


    """

    __swig_setmethods__ = {}
    for _s in [Py_Component]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Py_ImageDisplay, name, value)
    __swig_getmethods__ = {}
    for _s in [Py_Component]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Py_ImageDisplay, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_imgDisplay"] = _DigitalMicrograph.Py_ImageDisplay_m_imgDisplay_set
    __swig_getmethods__["m_imgDisplay"] = _DigitalMicrograph.Py_ImageDisplay_m_imgDisplay_get
    if _newclass:
        m_imgDisplay = _swig_property(_DigitalMicrograph.Py_ImageDisplay_m_imgDisplay_get, _DigitalMicrograph.Py_ImageDisplay_m_imgDisplay_set)

    def __init__(self, *args):
        """


        Constructor that creates a Py_ImageDisplay with a given DM Component. This
        assumes that the imgDisplay is already in DM.  

        Parameters
        ----------
        * `imgDisplay` :  
            retrieved in DM  

        """
        this = _DigitalMicrograph.new_Py_ImageDisplay(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Py_ImageDisplay
    __del__ = lambda self: None

    def AddROI(self, roi):
        """


        Adds the roi to this image display.  
         e.g. imageDisplay.AddROI(roi2)  

        Parameters
        ----------
        * `roi` :  
            roi to be added  

        """
        return _DigitalMicrograph.Py_ImageDisplay_AddROI(self, roi)


    def CountROIs(self):
        """


        Returns the number of ROIs on this image display.  
         e.g. noOfROI = imageDisplay2.CountROIs()  

        Returns
        -------
        the number of ROIs. Also return 0 when there is an exception.  

        """
        return _DigitalMicrograph.Py_ImageDisplay_CountROIs(self)


    def DeleteROI(self, roi):
        """


        Deletes the roi from this image display.  
         e.g. imageDisplay2.DeleteROI(roi2)  

        Parameters
        ----------
        * `roi` :  
            roi to be deleted  

        """
        return _DigitalMicrograph.Py_ImageDisplay_DeleteROI(self, roi)


    def DoesROIExist(self, name):
        """


        Determines whether the given ROI exists on this image display.  
         e.g. isROIExist = imageDisplay.DoesROIExist('Arrow')  

        Parameters
        ----------
        * `name` :  
            ROI name  

        Returns
        -------
        whether the given ROI exists on this image display  

        """
        return _DigitalMicrograph.Py_ImageDisplay_DoesROIExist(self, name)


    def GetContrastLimits(self):
        """


        Gets the contrast limits of the display.  
         e.g. low, high = imageDisplay.GetContrastLimits()  

        Parameters
        ----------
        * `low` :  
            low limit  
        * `high` :  
            high limit  

        """
        return _DigitalMicrograph.Py_ImageDisplay_GetContrastLimits(self)


    def GetContrastMode(self):
        """


        Returns the contrast mode.  
         e.g. contrastMode = imageDisplay.GetContrastMode()  

        Returns
        -------
        contrast mode. Return 0 when there is an exception.  

        """
        return _DigitalMicrograph.Py_ImageDisplay_GetContrastMode(self)


    def GetContrastParameters(self):
        """


        Gets the parameters for the contrast mode.  
         e.g. bright, contrast = imageDisplay.GetContrastParameters()  

        Parameters
        ----------
        * `bright` :  
            mode  
        * `contrast` :  
            mode  

        """
        return _DigitalMicrograph.Py_ImageDisplay_GetContrastParameters(self)


    def GetDisplayType(self):
        """


        Returns type of the image display. Image display types may be one of the
        following: Image Display Type Description: -2 Best image display*, 1 Raster
        image display, 2 Surface plot image display, 3 Line plot image display, 4 RGB
        image display, 7 Spreadsheet image display. This is only used when setting a
        display type, and it produces line plots for 1-d images, and raster or rgb
        displays for 2-d data.  
         e.g. imgDisplayType = imageDisplay.GetDisplayType()  

        Returns
        -------
        type of the image display. Return 0 when there is an exception.  

        """
        return _DigitalMicrograph.Py_ImageDisplay_GetDisplayType(self)


    def GetGammaCorrection(self):
        """


        Gets the image display's gamma.  
         e.g. gamma = imageDisplay.GetGammaCorrection()  

        Returns
        -------
        image display's gamma. Return 0 when there is an exception.  

        """
        return _DigitalMicrograph.Py_ImageDisplay_GetGammaCorrection(self)


    def GetImage(self):
        """


        Returns the single image displayed by the image display.  
         e.g. image2 = imageDisplay.GetImage()  

        Returns
        -------
        the single image  

        """
        return _DigitalMicrograph.Py_ImageDisplay_GetImage(self)


    def GetROI(self, index):
        """


        Returns the given ROI on this image display.  
         e.g. roi = imageDisplay.GetROI(0)  

        Parameters
        ----------
        * `index` :  
            which index  

        Returns
        -------
        the given ROI on this image display.  

        """
        return _DigitalMicrograph.Py_ImageDisplay_GetROI(self, index)


    def GetSurveyTechnique(self):
        """


        Gets the survey technique of the display.  
         e.g. surveyTechnique = imageDisplay.GetSurveyTechnique()  

        Returns
        -------
        survey technique of the display. Return 0 when there is an exception.  

        """
        return _DigitalMicrograph.Py_ImageDisplay_GetSurveyTechnique(self)


    def IsROISelected(self, roi):
        """


        Determines whether the given ROI is selected on this image display.  
         e.g. isSelected = imageDisplay.IsROISelected(roi)  

        Parameters
        ----------
        * `roi` :  
            given ROI  

        Returns
        -------
        whether the given ROI is selected on this image display  

        """
        return _DigitalMicrograph.Py_ImageDisplay_IsROISelected(self, roi)


    def IsValid(self):
        """


        Returns true if 'imageDisplay' points to a valid object.  
         e.g. isImgDisplayValid2 = imageDisplay2.IsValid()  

        Returns
        -------
        true if 'imageDisplay' points to a valid object  

        """
        return _DigitalMicrograph.Py_ImageDisplay_IsValid(self)


    def SetContrastLimits(self, low, high):
        """


        Sets the contrast limits of the display.  
         e.g. imageDisplay.SetContrastLimits(0, 99)  

        Parameters
        ----------
        * `low` :  
            low limit  
        * `high` :  
            high limit  

        """
        return _DigitalMicrograph.Py_ImageDisplay_SetContrastLimits(self, low, high)


    def SetContrastMode(self, mode):
        """


        Sets the contrast mode.  
         e.g. imageDisplay.SetContrastMode(2)  

        Parameters
        ----------
        * `mode` :  
            contrast mode  

        """
        return _DigitalMicrograph.Py_ImageDisplay_SetContrastMode(self, mode)


    def SetContrastParameters(self, bright, contrast):
        """


        Sets the parameters for the contrast mode.  
         e.g. bright, contrast = imageDisplay.GetContrastParameters()  
         imageDisplay.SetContrastParameters(bright+1, contrast+1)  

        Parameters
        ----------
        * `bright` :  
            brightness  
        * `contrast` :  
            contrast  

        """
        return _DigitalMicrograph.Py_ImageDisplay_SetContrastParameters(self, bright, contrast)


    def SetDoAutoSurvey(self, do_survey):
        """


        Sets whether min and max are determined automatically.  
         e.g. imageDisplay.SetDoAutoSurvey(True)  

        Parameters
        ----------
        * `do_survey` :  
            whether min and max are determined automatically.  

        """
        return _DigitalMicrograph.Py_ImageDisplay_SetDoAutoSurvey(self, do_survey)


    def SetGammaCorrection(self, gamma):
        """


        Sets the image display's gamma  
         e.g. gamma = imageDisplay.GetGammaCorrection()  
         imageDisplay.SetGammaCorrection(gamma+1)  

        Parameters
        ----------
        * `imgDisp` :  
            image display  
        * `gamma` :  
            image display's gamma  

        """
        return _DigitalMicrograph.Py_ImageDisplay_SetGammaCorrection(self, gamma)


    def SetSurveyTechnique(self, tech):
        """


        Sets the survey technique of the display.  
         e.g. surveyTechnique = imageDisplay.GetSurveyTechnique()  
         imageDisplay.SetSurveyTechnique(surveyTechnique +1)  

        Parameters
        ----------
        * `tech` :  
            - survey technique  

        """
        return _DigitalMicrograph.Py_ImageDisplay_SetSurveyTechnique(self, tech)


    def GetLinePlotImageDisplay(self):
        """


        Returns a pointer to a line plot image display for the given image display
        (provided it is a valid line plot image). Otherwise return NULL;  
         e.g. imageA = DM.GetFrontImage()  
         imgDisp = imageA.GetImageDisplay(0)  
         lpid = imgDisp.GetLinePlotImageDisplay()  

        Returns
        -------
        line plot image display  

        """
        return _DigitalMicrograph.Py_ImageDisplay_GetLinePlotImageDisplay(self)


    def ChangeDisplayType(self, new_type):
        """


        Changes the type of the image display.  
         e.g. imageDisplay.ChangeDisplayType(1)  

        Parameters
        ----------
        * `new_type` :  
            - the new type to change to  

        """
        return _DigitalMicrograph.Py_ImageDisplay_ChangeDisplayType(self, new_type)


    def GetIntensityScaleBarOn(self):
        """


        Returns true if the intensity scale bar annotation is shown on the display.  
         e.g. isIntensityScaleBarOn = imageDisplay.GetIntensityScaleBarOn()  

        Returns
        -------
        true if the intensity scale bar annotation is shown on the display. Otherwise
        false.  

        """
        return _DigitalMicrograph.Py_ImageDisplay_GetIntensityScaleBarOn(self)


    def IsCaptionOn(self):
        """


        Returns true if captions are drawn.  
         e.g. isCaptionOn = imageDisplay.IsCaptionOn()  

        Returns
        -------
        true if captions are drawn. Otherwise false.  

        """
        return _DigitalMicrograph.Py_ImageDisplay_IsCaptionOn(self)


    def SetColorTableByName(self, name):
        """


        Sets the color table by name. Valid names are those which can also be set by the
        UI, E.G. "Rainbow".  
         e.g. imageDisplay.SetColorTableByName("Rainbow")  

        Parameters
        ----------
        * `name` :  
            - name for color table  

        """
        return _DigitalMicrograph.Py_ImageDisplay_SetColorTableByName(self, name)


    def SetInputColorTable(self, image):
        """


        Sets the input color table of the display.  
         e.g. imageDisplay.SetInputColorTable(inputColorTable)  

        Parameters
        ----------
        * `image` :  
            - reference image  

        """
        return _DigitalMicrograph.Py_ImageDisplay_SetInputColorTable(self, image)


    def SetIntensityScaleBarOn(self, on):
        """


        Sets whether to draw the intensity scale bar annotation.  
         e.g. imageDisplay.SetIntensityScaleBarOn(True);  

        Parameters
        ----------
        * `on` :  
            - True to draw, false otherwise.  

        """
        return _DigitalMicrograph.Py_ImageDisplay_SetIntensityScaleBarOn(self, on)


    def GetInputColorTable(self):
        """


        Gets the input color table for the display.  
         e.g. inputColorTable = imageDisplay.GetInputColorTable();  

        Returns
        -------
        the input color table for the display (as Py_Image* datatype)  

        """
        return _DigitalMicrograph.Py_ImageDisplay_GetInputColorTable(self)


    def SetCaptionOn(self, on):
        """


        Sets whether to draw captions  
         e.g. imageDisplay.SetCaptionOn(True);  

        Parameters
        ----------
        * `on` :  
            - True to draw, false otherwise.  

        """
        return _DigitalMicrograph.Py_ImageDisplay_SetCaptionOn(self, on)

Py_ImageDisplay_swigregister = _DigitalMicrograph.Py_ImageDisplay_swigregister
Py_ImageDisplay_swigregister(Py_ImageDisplay)

class Py_LinePlotImageDisplay(Py_ImageDisplay):
    """


    """

    __swig_setmethods__ = {}
    for _s in [Py_ImageDisplay]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Py_LinePlotImageDisplay, name, value)
    __swig_getmethods__ = {}
    for _s in [Py_ImageDisplay]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Py_LinePlotImageDisplay, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_lpimgDisplay"] = _DigitalMicrograph.Py_LinePlotImageDisplay_m_lpimgDisplay_set
    __swig_getmethods__["m_lpimgDisplay"] = _DigitalMicrograph.Py_LinePlotImageDisplay_m_lpimgDisplay_get
    if _newclass:
        m_lpimgDisplay = _swig_property(_DigitalMicrograph.Py_LinePlotImageDisplay_m_lpimgDisplay_get, _DigitalMicrograph.Py_LinePlotImageDisplay_m_lpimgDisplay_set)

    def __init__(self, *args):
        """


        Constructor that creates a Py_LinePlotImageDisplay with a given DM
        LinePlotImageDisplay. This assumes that the LinePlotImageDisplay is already in
        DM.  

        Parameters
        ----------
        * `lpimgDisplay` :  
            LinePlotImageDisplay retrieved in DM  

        """
        this = _DigitalMicrograph.new_Py_LinePlotImageDisplay(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Py_LinePlotImageDisplay
    __del__ = lambda self: None

    def GetContrastLimits(self):
        """


        Gets the lowest and highest intensities displayed.  
         e.g. low2, high2 = lpid.GetContrastLimits()  

        Parameters
        ----------
        * `lowLimit` :  
            low limit of float type  
        * `highLimit` :  
            high limit of float type  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_GetContrastLimits(self)


    def GetDoAutoSurvey(self):
        """


        Gets whether to auto-survey is done on the high and low intensity limits.  
         e.g. low1, high1 = lpid.GetDoAutoSurvey()  

        Parameters
        ----------
        * `doAutoSurveyLow` :  
            whether to auto-survey is done on low intensity limit (bool type)  
        * `doAutoSurveyHigh` :  
            whether to auto-survey is done on the high intensity limit (bool type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_GetDoAutoSurvey(self)


    def GetSliceComponentColor(self, slice_index, comp_index):
        """


        Returns the color of the 'comp_index'th component of the 'slice_index'th slice.  
         e.g. r, g, b = lpid.GetSliceComponentColor(0, 0)  

        Parameters
        ----------
        * `slice_index` :  
            slice index (long type)  
        * `comp_index` :  
            component index (long type)  
        * `r` :  
            red value (double type)  
        * `g` :  
            green value (double type)  
        * `b` :  
            blue value (double type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_GetSliceComponentColor(self, slice_index, comp_index)


    def GetSliceDrawingStyle(self, slice_index):
        """


        Returns the drawing style of the 'slice_index'th slice.  
         e.g. style1 = lpid.GetSliceDrawingStyle(0)  

        Parameters
        ----------
        * `slice_index` :  
            slice index (long type)  drawing style. Return 0 when there is an exception.  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_GetSliceDrawingStyle(self, slice_index)


    def GetSliceLineStyle(self, slice_index):
        """


        Gets the line drawing style of the 'slice_index'th slice.  
         e.g. style = lpid.GetSliceLineStyle(0)  

        Parameters
        ----------
        * `slice_index` :  
            slice index (long type)  line drawing style. Return 0 when there is an
            exception.  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_GetSliceLineStyle(self, slice_index)


    def GetSliceLineThickness(self, slice_index):
        """


        Gets the line thickness of the 'slice_index'th slice.  
         e.g. thickness = lpid.GetSliceLineThickness(0)  

        Parameters
        ----------
        * `slice_index` :  
            slice index (long type)  line thickness. Return 0 when there is an
            exception.  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_GetSliceLineThickness(self, slice_index)


    def GetSliceTransparency(self, slice_index):
        """


        Gets the transparency of the 'slice_index'th slice.  
         e.g. doTransparent, transparency = lpid.GetSliceTransparency(0)  

        Parameters
        ----------
        * `slice_index` :  
            slice index (long type)  
        * `doTransparent` :  
            whether transparent or not (bool type)  
        * `transparency` :  
            transparency value (double type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_GetSliceTransparency(self, slice_index)


    def HomeDisplay(self):
        """


        Resets display range and survey settings to defaults.  
         e.g. lpid.HomeDisplay()  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_HomeDisplay(self)


    def SetContrastLimits(self, lowLimit, highLimit):
        """


        Sets the lowest and highest intensities displayed.  
         e.g. low2, high2 = lpid.GetContrastLimits()  
         lpid.SetContrastLimits(low2-1, high2-1)  

        Parameters
        ----------
        * `lowLimit` :  
            low limit (float type)  
        * `highLimit` :  
            high limit (float type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_SetContrastLimits(self, lowLimit, highLimit)


    def SetDoAutoSurvey(self, doAutoSurveyLow, doAutoSurveyHigh):
        """


        Sets whether to do auto-survey on the high and low intensity limits.  
         e.g. lpid.SetDoAutoSurvey(False, False)  

        Parameters
        ----------
        * `doAutoSurveyLow` :  
            whether to do auto-survey on low intensity limit (bool type)  
        * `doAutoSurveyHigh` :  
            whether to do auto-survey on high intensity limit (bool type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_SetDoAutoSurvey(self, doAutoSurveyLow, doAutoSurveyHigh)


    def SetFilled(self, on):
        """


        Sets whether to fill the lineplot.  
         e.g. lpid.SetFilled(True)  

        Parameters
        ----------
        * `on` :  
            whether to fill the lineplot (bool type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_SetFilled(self, on)


    def SetGridColor(self, r, g, b):
        """


        Sets the grid color.  
         e.g. lpid.SetGridColor(1, 0, 0)  

        Parameters
        ----------
        * `r` :  
            red value (double type)  
        * `g` :  
            green value (double type)  
        * `b` :  
            blue value (double type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_SetGridColor(self, r, g, b)


    def SetLegendShown(self, on):
        """


        Sets whether or not the legend is shown.  
         e.g. lpid.SetLegendShown(True)  

        Parameters
        ----------
        * `on` :  
            whether or not the legend is shown. (bool type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_SetLegendShown(self, on)


    def SetSliceComponentColor(self, slice_index, comp_index, r, g, b):
        """


        Sets the color of the 'comp_index'th component of the 'slice_index'th slice.  
         e.g. lpid.SetSliceComponentColor(0, 0, 0, 1, 0)  

        Parameters
        ----------
        * `slice_index` :  
            slice index (long type)  
        * `comp_index` :  
            component index (long type)  
        * `r` :  
            red value (double type)  
        * `g` :  
            green value (double type)  
        * `b` :  
            blue value (double type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_SetSliceComponentColor(self, slice_index, comp_index, r, g, b)


    def SetSliceDrawingStyle(self, slice_index, style):
        """


        Sets the drawing style of the 'slice_index'th slice.  
         e.g. style1 = lpid.GetSliceDrawingStyle(0)  
         lpid.SetSliceDrawingStyle(0, style1 + 1)  

        Parameters
        ----------
        * `slice_index` :  
            slice index (long type)  
        * `style` :  
            drawing style (long type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_SetSliceDrawingStyle(self, slice_index, style)


    def SetSliceLineStyle(self, slice_index, lineStyle):
        """


        Sets the line lineStyle of the 'slice_index'th slice.  
         e.g. style1 = lpid.GetSliceDrawingStyle(0)  
         lpid.SetSliceLineStyle(0, style+1)  

        Parameters
        ----------
        * `slice_index` :  
            slice index (long type)  
        * `lineStyle` :  
            line style (long type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_SetSliceLineStyle(self, slice_index, lineStyle)


    def SetSliceLineThickness(self, slice_index, thickness):
        """


        Sets the line thickness of the 'slice_index'th slice.  
         e.g. thickness = lpid.GetSliceLineThickness(0)  
         lpid.SetSliceLineThickness(0, thickness+5)  

        Parameters
        ----------
        * `slice_index` :  
            slice index (long type)  
        * `thickness` :  
            line thickness value (long type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_SetSliceLineThickness(self, slice_index, thickness)


    def SetSliceTransparency(self, slice_index, doTransparent, transparency):
        """


        Sets the transparency of the 'slice_index'th slice.  
         e.g. lpid.SetSliceTransparency(0,True, 0.7)  

        Parameters
        ----------
        * `slice_index` :  
            lice index (long type)  
        * `doTransparent` :  
            whether transparent or not (bool type)  
        * `transparency` :  
            transparency value (double type)  

        """
        return _DigitalMicrograph.Py_LinePlotImageDisplay_SetSliceTransparency(self, slice_index, doTransparent, transparency)

Py_LinePlotImageDisplay_swigregister = _DigitalMicrograph.Py_LinePlotImageDisplay_swigregister
Py_LinePlotImageDisplay_swigregister(Py_LinePlotImageDisplay)


def GetLinePlotImageDisplay(imgDisp):
    """


    Returns the given line plot image display for the given image display (if it is
    a valid line plot image).  
     e.g. imageA = DM.GetFrontImage()  
     imgDisp = imageA.GetImageDisplay(0)  
     lpid = imgDisp.GetLinePlotImageDisplay()  

    Parameters
    ----------
    * `imgDisp` :  
        image display  

    Returns
    -------
    line plot image display  

    """
    return _DigitalMicrograph.GetLinePlotImageDisplay(imgDisp)
class Py_ROI(_object):
    """


    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Py_ROI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Py_ROI, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_roi"] = _DigitalMicrograph.Py_ROI_m_roi_set
    __swig_getmethods__["m_roi"] = _DigitalMicrograph.Py_ROI_m_roi_get
    if _newclass:
        m_roi = _swig_property(_DigitalMicrograph.Py_ROI_m_roi_get, _DigitalMicrograph.Py_ROI_m_roi_set)

    def __init__(self, roi):
        """


        Constructor that creates a Py_ROI with a given DM ROI. This assumes that the ROI
        is already in DM.  

        Parameters
        ----------
        * `comp` :  
            ROI retrieved in DM  

        """
        this = _DigitalMicrograph.new_Py_ROI(roi)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Py_ROI
    __del__ = lambda self: None

    def GetID(self):
        """


        Return the ID for the region of interest.  
         e.g. id = roi2.GetID()  

        """
        return _DigitalMicrograph.Py_ROI_GetID(self)


    def GetLabel(self):
        """


        Return the label of the region of interest.  
         e.g. label = roi2.GetLabel()  

        Returns
        -------
        the label  

        """
        return _DigitalMicrograph.Py_ROI_GetLabel(self)


    def GetName(self):
        """


        Return the name of the region of interest.  
         e.g. name = roi2.GetName()  

        Returns
        -------
        the name  

        """
        return _DigitalMicrograph.Py_ROI_GetName(self)


    def SetLabel(self, name):
        """


        Set the label on the region of interest.  
         e.g. roi2.SetLabel('set label')  

        Parameters
        ----------
        * `name` :  
            name of the label  

        """
        return _DigitalMicrograph.Py_ROI_SetLabel(self, name)


    def SetName(self, name):
        """


        Set the name of the region of interest.  
         e.g. roi2.SetName('newName')  

        Parameters
        ----------
        * `name` :  
            name of the region of interest  

        """
        return _DigitalMicrograph.Py_ROI_SetName(self, name)


    def CountVertices(self):
        """


        Return the number of vertices comprising the region of interest.  
         e.g. val = roi.CountVertices()  

        Returns
        -------
        number of vertices  

        """
        return _DigitalMicrograph.Py_ROI_CountVertices(self)


    def GetCircle(self):
        """


        Get circle roi information  
         e.g. val, val2, val3 = roi.GetCircle()  

        Parameters
        ----------
        * `x` :  
            - x corrdinate of the center  
        * `y` :  
            - y coordinate of the center  
        * `radius` :  
            - radius of circle  

        """
        return _DigitalMicrograph.Py_ROI_GetCircle(self)


    def GetLine(self):
        """


        Fill in the start and end points of the line represented by the region of
        interest.  
         e.g. val, val2, val3, val4= roi.GetLine()  

        Parameters
        ----------
        * `sx` :  
            - x coordinate of start position of the line  
        * `sy` :  
            - y coordinate of end position of the line  
        * `ex` :  
            - x coordinate of start position of the line  
        * `ey` :  
            - y coordinate of end position of the line  

        """
        return _DigitalMicrograph.Py_ROI_GetLine(self)


    def GetOval(self):
        """


        Retrieve the inforation for the oval ROI  
         e.g. val, val2, val3, val4= roi.GetOval()  

        Parameters
        ----------
        * `top` :  
            - coordinate for the top  
        * `left` :  
            - coordinate for the left  
        * `bottom` :  
            - coordinate for the bottom  
        * `right` :  
            - coordinate for the right  

        """
        return _DigitalMicrograph.Py_ROI_GetOval(self)


    def GetPoint(self):
        """


        Return the coordinates of the point represented by this region of interest.  
         e.g. val, val2= roi.GetPoint()  

        Parameters
        ----------
        * `x` :  
            - x corrdinate of the point  
        * `y` :  
            - y coordinate of the point  

        """
        return _DigitalMicrograph.Py_ROI_GetPoint(self)


    def GetRange(self):
        """


        Fills in the start and end columns of the range represented by the region of
        interest.  
         e.g. val, val2= roi.GetRange()  

        Parameters
        ----------
        * `x` :  
            - start column of the range  
        * `y` :  
            - end column of the range  

        """
        return _DigitalMicrograph.Py_ROI_GetRange(self)


    def GetRectangle(self):
        """


        Fill in the coordinates of the rectangle represented by the region of interest.  
         e.g. val, val2, val3, val4= roi.GetRectangle()  

        Parameters
        ----------
        * `top` :  
            - coordinate for the top  
        * `left` :  
            - coordinate for the left  
        * `bottom` :  
            - coordinate for the bottom  
        * `right` :  
            - coordinate for the right  

        """
        return _DigitalMicrograph.Py_ROI_GetRectangle(self)


    def GetRotationAngle(self):
        """


        Return ROI rotation angle  
         e.g. val = roi.GetRotationAngle()  

        Returns
        -------
        rotation angle  

        """
        return _DigitalMicrograph.Py_ROI_GetRotationAngle(self)


    def GetVertex(self, index):
        """


        Return the coordinates of the given vertex of the region of interest.  
         e.g. val, val2= roi.GetVertex(0)  

        Parameters
        ----------
        * `index` :  
            - index of given vertex  
        * `x` :  
            - x corrdinate  
        * `y` :  
            - y coordinate  

        """
        return _DigitalMicrograph.Py_ROI_GetVertex(self, index)


    def IsCircle(self):
        """


        Return whether the region of interest is a circle.  
         e.g. val = roi.IsCircle()  

        Returns
        -------
        true if ROI is a circle, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_IsCircle(self)


    def IsLine(self):
        """


        Return whether the region of interest is a line.  
         e.g. val = roi.IsLine()  

        Returns
        -------
        true if ROI is a line, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_IsLine(self)


    def IsOval(self):
        """


        Return whether the region of interest is a circle.  
         e.g. val = roi.IsOval()  

        Returns
        -------
        true if ROI is an oval, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_IsOval(self)


    def IsPoint(self):
        """


        Return whether the region of interest is a point.  
         e.g. val = roi.IsPoint()  

        Returns
        -------
        true for if ROI is a point, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_IsPoint(self)


    def IsRange(self):
        """


        eturns whether the region of interest is a range.  
         e.g. val = roi.IsRange()  

        Returns
        -------
        true for if ROI is a range, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_IsRange(self)


    def IsRectangle(self):
        """


        Return whether the region of interest is a rectangle.  
         e.g. val = roi.IsRectangle()  

        Returns
        -------
        true for if ROI is a rectangle, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_IsRectangle(self)


    def SetCircle(self, x, y, radius):
        """


        Set the region of interest to a circle with the given coordinates.  
         e.g. roi.SetCircle(55, 55, 100)  

        Parameters
        ----------
        * `x` :  
            - x corrdinate of the center  
        * `y` :  
            - y coordinate of the center  
        * `radius` :  
            - radius of circle  

        """
        return _DigitalMicrograph.Py_ROI_SetCircle(self, x, y, radius)


    def SetLine(self, sx, sy, ex, ey):
        """


        Set the region of interest to a line with the given start and end coordinates.  
         e.g. roi.SetLine(55, 155, 100, 255)  

        Parameters
        ----------
        * `sx` :  
            - x coordinate of start position of the line  
        * `sy` :  
            - y coordinate of end position of the line  
        * `ex` :  
            - x coordinate of start position of the line  
        * `ey` :  
            - y coordinate of end position of the line  

        """
        return _DigitalMicrograph.Py_ROI_SetLine(self, sx, sy, ex, ey)


    def SetOval(self, top, left, bottom, right):
        """


        Set the region of interest to a oval with the given coordinates.  
         e.g. roi.SetOval(55, 155, 100, 255)  

        Parameters
        ----------
        * `top` :  
            - coordinate for the top  
        * `left` :  
            - coordinate for the left  
        * `bottom` :  
            - coordinate for the bottom  
        * `right` :  
            - coordinate for the right  

        """
        return _DigitalMicrograph.Py_ROI_SetOval(self, top, left, bottom, right)


    def SetPoint(self, x, y):
        """


        Set the region of interest to a point with the given coordinate.  
         e.g. roi.SetPoint(255, 355)  

        Parameters
        ----------
        * `x` :  
            - x corrdinate of the point  
        * `y` :  
            - y coordinate of the point  

        """
        return _DigitalMicrograph.Py_ROI_SetPoint(self, x, y)


    def SetRange(self, start, end):
        """


        Sets the region of interest to a range with the given start and end columns.  
         e.g. roi.SetRange(10, 20)  

        Parameters
        ----------
        * `start` :  
            - start column of the range  
        * `end` :  
            - end column of the range  

        """
        return _DigitalMicrograph.Py_ROI_SetRange(self, start, end)


    def SetRectangle(self, top, left, bottom, right):
        """


        Set the region of interest to a rectangle with the given coordinates.  
         e.g. roi.SetRectangle(10, 20, 30, 40)  

        Parameters
        ----------
        * `top` :  
            - coordinate for the top  
        * `left` :  
            - coordinate for the left  
        * `bottom` :  
            - coordinate for the bottom  
        * `right` :  
            - coordinate for the right  

        """
        return _DigitalMicrograph.Py_ROI_SetRectangle(self, top, left, bottom, right)


    def SetRotationAngle(self, angle):
        """


        Sets ROI rotation angle.  
         e.g. oi.SetRotationAngle(40)  

        Parameters
        ----------
        * `angle` :  
            - ROI rotation angle  

        """
        return _DigitalMicrograph.Py_ROI_SetRotationAngle(self, angle)


    def SetVertex(self, index, x, y):
        """


        Set the coordinates of the given vertex of the region of interest. This is
        typically used after adding vertex.  
         e.g. roi = DM.NewROI()  
         roi.AddVertex(50, 50)  
         roi.AddVertex(150, 150)  
         roi.SetVertex(0, 23, 46)  

        Parameters
        ----------
        * `index` :  
            - index of given vertex  
        * `x` :  
            - x corrdinate  
        * `y` :  
            - y coordinate  

        """
        return _DigitalMicrograph.Py_ROI_SetVertex(self, index, x, y)


    def AddVertex(self, x, y):
        """


        Add a vertex with the given coordinates to the region of interest.  
         e.g. roi.AddVertex(50, 50)  

        Parameters
        ----------
        * `x` :  
            - x corrdinate  
        * `y` :  
            - y coordinate  

        """
        return _DigitalMicrograph.Py_ROI_AddVertex(self, x, y)


    def GetColor(self):
        """


        Stores the color of the region of interest into the variables. Each number will
        be in the range of 0 to 1.  
         e.g. r, g, b = tagGroup.GetColor()  

        Parameters
        ----------
        * `r` :  
            - return red value of the RGB (Red Green Blue) number  
        * `g` :  
            - return green value of the RGB (Red Green Blue) number  
        * `b` :  
            - return blue value of the RGB (Red Green Blue) number  

        """
        return _DigitalMicrograph.Py_ROI_GetColor(self)


    def SetColor(self, r, g, b):
        """


        Set the color of the region of interest. Each number should be in the range will
        be in the range of 0 to 1.  
         e.g. tagGroup.SetColor(1, 1, 0)  

        Parameters
        ----------
        * `r` :  
            - red value of the RGB (Red Green Blue) number  
        * `g` :  
            - green value of the RGB (Red Green Blue) number  
        * `b` :  
            - blue value of the RGB (Red Green Blue) number  

        """
        return _DigitalMicrograph.Py_ROI_SetColor(self, r, g, b)


    def GetDeletable(self):
        """


        Return whether the region of interest is deletable or not.  
         e.g. val = roi.GetDeletable()  

        Returns
        -------
        true for if the region of interest is deletable, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_GetDeletable(self)


    def SetDeletable(self, deletable):
        """


        Sets whether the region of interest should be deletable or not.  
         e.g. tagGroup.SetDeletable(True)  

        Parameters
        ----------
        * `deletable` :  
            - true for deletable, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_SetDeletable(self, deletable)


    def GetMoveable(self):
        """


        Return whether the region of interest is moveable or not.  
         e.g. val = roi.GetMoveable()  

        Returns
        -------
        true for if the region of interest is moveable, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_GetMoveable(self)


    def SetMoveable(self, moveable):
        """


        Sets whether the region of interest should be moveable or not.  
         e.g. tagGroup.SetMoveable(True)  

        Parameters
        ----------
        * `moveable` :  
            - true for moveable, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_SetMoveable(self, moveable)


    def GetResizable(self):
        """


        Return whether the region of interest is resizable or not.  
         e.g. val = roi.GetResizable()  

        Returns
        -------
        true for if the region of interest is resizable, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_GetResizable(self)


    def SetResizable(self, resizable):
        """


        Sets whether the region of interest should be resizable or not.  
         e.g. tagGroup.SetResizable(True)  

        Parameters
        ----------
        * `resizable` :  
            - true for resizable false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_SetResizable(self, resizable)


    def GetSelectable(self):
        """


        Return whether the region of interest is selectable or not.  
         e.g. val = roi.GetSelectable()  

        Returns
        -------
        true for if the region of interest is selectable, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_GetSelectable(self)


    def SetSelectable(self, selectable):
        """


        Sets whether the region of interest should be deletable or not.  
         e.g. tagGroup.SetSelectable(True)  

        Parameters
        ----------
        * `selectable` :  
            - true for selectable, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_SetSelectable(self, selectable)


    def GetVolatile(self):
        """


        Return whether the region of interest is volatile or not.  
         e.g. val = roi.GetVolatile()  

        Returns
        -------
        true for if the region of interest is volatile, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_GetVolatile(self)


    def SetVolatile(self, is_volatile):
        """


        Sets whether the region of interest should be volatile or not.  
         e.g. tagGroup.SetVolatile(True)  

        Parameters
        ----------
        * `is_volatile` :  
            - true for is volatile, false otherwise  

        """
        return _DigitalMicrograph.Py_ROI_SetVolatile(self, is_volatile)

Py_ROI_swigregister = _DigitalMicrograph.Py_ROI_swigregister
Py_ROI_swigregister(Py_ROI)


def GetROIFromID(id):
    """


    Returns the region of interest associated with the ID or NULL if it does not
    exist.  
     e.g. id = roi2.GetID()  
     roi3 = DM.GetROIFromID(id)  

    Parameters
    ----------
    * `id` :  
        - id of region of interest  

    Returns
    -------
    region of interest associated with the ID or NULL if it does not exist  

    """
    return _DigitalMicrograph.GetROIFromID(id)

def NewROI():
    """


    Creates an empty region of interest.  
     e.g. roi5 = DM.NewROI()  

    Returns
    -------
    region of interest  

    """
    return _DigitalMicrograph.NewROI()
class Py_TagGroup(_object):
    """


    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Py_TagGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Py_TagGroup, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m_tg"] = _DigitalMicrograph.Py_TagGroup_m_tg_set
    __swig_getmethods__["m_tg"] = _DigitalMicrograph.Py_TagGroup_m_tg_get
    if _newclass:
        m_tg = _swig_property(_DigitalMicrograph.Py_TagGroup_m_tg_get, _DigitalMicrograph.Py_TagGroup_m_tg_set)

    def __init__(self, *args):
        """


        Constructor that creates a Py_TagGroup with a given DM TagGroup This assumes
        that the TagGroup is already in DM.  

        Parameters
        ----------
        * `tg` :  
            TagGroup retrieved in DM  

        """
        this = _DigitalMicrograph.new_Py_TagGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Py_TagGroup
    __del__ = lambda self: None

    def AddTagGroupAtBeginning(self, newGroup):
        """


        Adds 'newGroup' to the beginning of 'tagList'.  
         e.g. tagGroup2 = myImage2.GetTagGroup() newTagGroup =
        tagGroup.AddTagGroupAtBeginning(tagGroup2)  

        Parameters
        ----------
        * `newGroup` :  
            new group to be added (Py_TagGroup type)  

        Returns
        -------
        new tag group  

        """
        return _DigitalMicrograph.Py_TagGroup_AddTagGroupAtBeginning(self, newGroup)


    def IsValid(self):
        """


        Returns true if 'tagGroup' references a valid object.  
         e.g. isTagGroupValid = tagGroup.IsValid()  

        Returns
        -------
        true if 'tagGroup' references a valid object, false otherwise  

        """
        return _DigitalMicrograph.Py_TagGroup_IsValid(self)


    def AddTagGroupAtEnd(self, newGroup):
        """


        Adds 'newGroup' to the end of 'tagList'.  
         e.g. newTagGroup = tagGroup.AddTagGroupAtEnd(tagGroup2)  

        Parameters
        ----------
        * `newGroup` :  
            new group to be added (Py_TagGroup type)  

        Returns
        -------
        new tag group (Py_TagGroup*)  

        """
        return _DigitalMicrograph.Py_TagGroup_AddTagGroupAtEnd(self, newGroup)


    def CountTags(self):
        """


        Returns the number of sub-tags in this tag group.  
         e.g. noOfTagsNew = newTagGroup.CountTags()  

        Returns
        -------
        number of sub-tags  

        """
        return _DigitalMicrograph.Py_TagGroup_CountTags(self)


    def GetTagAsBoolean(self, tag_path):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a boolean.  
         e.g. returnVal, val = tagGroup.GetTagAsBoolean('Python:TagBoolean')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const String)  
        * `tag_val` :  
            tag value (bool type)  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsBoolean(self, tag_path)


    def SetTagAsBoolean(self, tag_path, tag_valIn):
        """


        Sets the data at 'tagPath' in 'tagGroup' as a boolean.  
         e.g. tagGroup.SetTagAsBoolean('Python:TagBoolean', False)  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `tag_valIn` :  
            tag value (bool type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsBoolean(self, tag_path, tag_valIn)


    def GetTagAsDouble(self, tagPath):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a double.  
         e.g. returnVal, val = tagGroup.GetTagAsDouble('Python:TagDouble')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `number` :  
            tag data (double type)  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsDouble(self, tagPath)


    def SetTagAsDouble(self, tagPath, numberIn):
        """


        Sets the data at 'tagPath' in 'tagGroup' as a double.  
         e.g. tagGroup.SetTagAsDouble('Python:TagDouble', 3.333)  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `number` :  
            tag data (double type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsDouble(self, tagPath, numberIn)


    def GetTagAsDoubleComplex(self, tagPath):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a double complex.  
         e.g. returnVal = tagGroupP.GetTagAsDoubleComplex('Double Complex', x)  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `c` :  
            tag data (complex128_t type)  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsDoubleComplex(self, tagPath)


    def SetTagAsDoubleComplex(self, tagPath, real_complex, imaginary_complex):
        """


        Sets the data at 'tagPath' in 'tagGroup' as a double complex.  
         e.g. tagGroup.SetTagAsDoubleComplex('Python:TagDoubleComplex', 200, 400)  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `real_complex` :  
            real component of complex number (double type)  
        * `imaginary_complex` :  
            imaginary component of complex number (double type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsDoubleComplex(self, tagPath, real_complex, imaginary_complex)


    def GetTagAsFloat(self, tagPath):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a float.  
         e.g. tagGroup.GetTagAsFloat('Python:TagFloat')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `number` :  
            tag data (float type)  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsFloat(self, tagPath)


    def SetTagAsFloat(self, tagPath, numberIn):
        """


        Sets the data at 'tagPath' in 'tagGroup' as a float.  
         e.g. tagGroup.SetTagAsFloat('Python:TagFloat', 9.999)  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `number` :  
            tag data (float type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsFloat(self, tagPath, numberIn)


    def GetTagAsFloatComplex(self, tagPath):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a float complex.  
         e.g. returnVal, val = tagGroupP.GetTagAsFloatComplex('Float Complex')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `c` :  
            tag data (complex128_t* type)  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsFloatComplex(self, tagPath)


    def SetTagAsFloatComplex(self, tagPath, real_complex, imaginary_complex):
        """


        Sets the data at 'tagPath' in 'tagGroup' as a float complex.  
         e.g. tagGroup.SetTagAsFloatComplex('Python:TagFloatComplex', 100, 200)  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `real_complex` :  
            real component of complex number (double type)  
        * `imaginary_complex` :  
            imaginary component of complex number (double type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsFloatComplex(self, tagPath, real_complex, imaginary_complex)


    def GetTagAsLong(self, tagPath):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a long.  
         e.g. returnVal, val = tagGroup.GetTagAsLong('Python:TagLong')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `number` :  
            tag data (long type)  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsLong(self, tagPath)


    def SetTagAsLong(self, tagPath, numberIn):
        """


        Sets the data at 'tagPath' in 'tagGroup' as a long.  
         e.g. tagGroup.SetTagAsLong('Python:TagLong', 2147483647)  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `number` :  
            tag data (long type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsLong(self, tagPath, numberIn)


    def GetTagAsShort(self, tagPath):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a short.  
         e.g. returnVal, val = tagGroup.GetTagAsShort('Python:TagShort')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `number` :  
            tag data (short type))  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsShort(self, tagPath)


    def SetTagAsShort(self, tagPath, numberIn):
        """


        Sets the data at 'tagPath' in 'tagGroup' as a short.  
         e.g. tagGroup.SetTagAsShort('Python:TagShort', 1)  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `number` :  
            tag data (short type))  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsShort(self, tagPath, numberIn)


    def GetTagAsString(self, tagPath):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a string.  
         e.g. returnVal, val = tagGroup.GetTagAsString('Python:TagString')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `str` :  
            tag data (String type)  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsString(self, tagPath)


    def SetTagAsString(self, tagPath, strIn):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a string.  
         e.g. tagGroup.SetTagAsString('Python:TagString', 'testString')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `str` :  
            tag data (String type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsString(self, tagPath, strIn)


    def GetTagAsTagGroup(self, tag_path):
        """


        Gets the data at 'tagPath' in 'TagGroup' as a group.  
         e.g. returnVal, val = tagGroup.GetTagAsTagGroup('Python:GetTagAsTagGroup')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const String type)  
        * `sub_tags` :  
            tag data (Py_TagGroup type)  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsTagGroup(self, tag_path)


    def SetTagAsTagGroup(self, tag_path, sub_tagsIn):
        """


        Sets the data at 'tagPath' in 'TagGroup' as a group.  
         e.g. tagGroup3.SetTagAsTagGroup('Clone2', tagGroup2)  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const String type)  
        * `sub_tagsIn` :  
            tag data (Py_TagGroup type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsTagGroup(self, tag_path, sub_tagsIn)


    def GetTagAsText(self, tagPath):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a string.  
         e.g. returnVal, val = tagGroup.GetTagAsText('Python:TagText')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `str` :  
            tag data (String type)  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsText(self, tagPath)


    def SetTagAsText(self, tagPath, strIn):
        """


        Sets the data at 'tagPath' in 'tagGroup' as a string.  
         e.g. tagGroup.GetTagAsText('Python:TagText', 'text')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `strIn` :  
            tag data (String type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsText(self, tagPath, strIn)


    def GetTagAsUInt16(self, tagPath):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a 16-bit unsigned integer.  
         e.g. returnVal, val = tagGroup.GetTagAsUInt16('Python:TagUInt16')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `number` :  
            tag data (uint16 type)  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsUInt16(self, tagPath)


    def SetTagAsUInt16(self, tagPath, number):
        """


        Sets the data at 'tagPath' in 'tagGroup' as a 16-bit unsigned integer.  
         e.g. tagGroup.SetTagAsUInt16('Python:SetTagAsUInt16', 1111)  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `numberIn` :  
            tag data (unsigned short type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsUInt16(self, tagPath, number)


    def GetTagAsUInt32(self, tagPath):
        """


        Gets the data at 'tagPath' in 'tagGroup' as a 32-bit unsigned integer.  
         e.g. returnVal, val = tagGroup.GetTagAsUInt32('Python:TagUInt32')  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `number` :  
            tag data (ulong type)  

        Returns
        -------
        boolean status  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsUInt32(self, tagPath)


    def SetTagAsUInt32(self, tagPath, numberIn):
        """


        Sets the data at 'tagPath' in 'tagGroup' as a 32-bit unsigned integer.  
         e.g. tagGroup.SetTagAsUInt32('Python:SetTagAsUInt32', 65535)  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `numberIn` :  
            tag data (unsigned long type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsUInt32(self, tagPath, numberIn)


    def GetTagType(self, index, type_index):
        """


        Returns the 'type_index'th element of the tag's type.  
         e.g. returnVal = tagGroup.GetTagType(1, 0)  

        Parameters
        ----------
        * `index` :  
            index (long type)  
        * `type_index` :  
            type index (long type)  

        Returns
        -------
        'type_index'th element (long type)  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagType(self, index, type_index)


    def IsList(self):
        """


        Returns true if the tag group is a list.  
         e.g. isList = tagGroup.IsList()  

        Returns
        -------
        true if the tag group is a list, false otherwise  

        """
        return _DigitalMicrograph.Py_TagGroup_IsList(self)


    def Clone(self):
        """


        Returns an identical copy of 'tagGroup' and its sub-tags.  
         e.g. tagGroup2 = tagGroup.Clone()  

        Returns
        -------
        an identical copy of 'tagGroup' and its sub-tags.  

        """
        return _DigitalMicrograph.Py_TagGroup_Clone(self)


    def CopyTag(self, srcGroup, srcIndex):
        """


        Copies the 'srcIndex'th tag in 'srcGroup' to this'tagGroup'.  
         e.g. returnVal = dstTagGroup.CopyTag(srcTagGroup, 0)  

        Parameters
        ----------
        * `srcGroup` :  
            source tag group  
        * `srcIndex` :  
            source index  

        Returns
        -------
        a index that the tag is being copied into.  

        """
        return _DigitalMicrograph.Py_TagGroup_CopyTag(self, srcGroup, srcIndex)


    def CopyTagsFrom(self, srcGroup):
        """


        Copies tags in 'srcGroup' to this.  
         e.g. dstTagGroup.CopyTagsFrom(srcTagGroup)  

        Parameters
        ----------
        * `srcGroup` :  
            source tag group  

        """
        return _DigitalMicrograph.Py_TagGroup_CopyTagsFrom(self, srcGroup)


    def DeleteAllTags(self):
        """


        Deletes all the tags in 'tagGroup'.  
         e.g. srcTagGroup.DeleteAllTags()  

        """
        return _DigitalMicrograph.Py_TagGroup_DeleteAllTags(self)


    def DeleteTagWithIndex(self, index):
        """


        Deletes the tag at index 'index'.  
         e.g. srcTagGroup.DeleteTagWithIndex(0)  

        Parameters
        ----------
        * `index` :  
            index of the tag to be deleted  

        """
        return _DigitalMicrograph.Py_TagGroup_DeleteTagWithIndex(self, index)


    def DeleteTagWithLabel(self, tagPath):
        """


        Deletes the tag labelled by the path 'tagPath'.  
         e.g. srcTagGroup.DeleteTagWithLabel('tobedeleted')  

        Parameters
        ----------
        * `tagPath` :  
            f the tag to be delted  

        Returns
        -------
        false if the label could not be found.  

        """
        return _DigitalMicrograph.Py_TagGroup_DeleteTagWithLabel(self, tagPath)


    def GetTagAsArray(self, tagPath, image):
        """


        Gets the data at tagPath in 'tagGroup' as an array of data in 'image'.  
         e.g. tagGroup.GetTagAsArray('Python:TagArray', myImage);  

        Parameters
        ----------
        * `<em>` :  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagAsArray(self, tagPath, image)


    def GetIndexedTagAsArray(self, index, image):
        """


        Gets the data at 'index' in 'tagGroup' as an array of data in 'image'.  
         e.g. tagGroup.GetIndexedTagAsArray(0, myImage3);  

        Parameters
        ----------
        * `index` :  
            (unsigned long) index in tag group  
        * `image` :  
            - output image  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsArray(self, index, image)


    def GetIndexedTagAsBoolean(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a boolean.  
         e.g. returnVal, tagVal = srcTagGroup.GetIndexedTagAsBoolean(1)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `tag_val` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsBoolean(self, index)


    def GetIndexedTagAsDouble(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a double.  
         e.g. returnVal, tagVal1 = tagGroup.GetIndexedTagAsDouble(0)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `number` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsDouble(self, index)


    def GetIndexedTagAsDoubleComplex(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a double complex.  
         e.g. returnVal, tagVal = tagGroup.GetIndexedTagAsDoubleComplex(0)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `t` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsDoubleComplex(self, index)


    def GetIndexedTagAsEightBitColor(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as an eight bit color.  
         e.g. returnVal, r, g, b, a = tagGroup.GetIndexedTagAsEightBitColor(0)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `red` :  
            - input red value of the RGBA (Red Green Blue Alpha) number  
        * `green` :  
            - input green value of the RGBA (Red Green Blue Alpha) number  
        * `blue` :  
            - input blue value of the RGBA (Red Green Blue Alpha) number  
        * `alpha` :  
            - input alpha value of the RGBA (Red Green Blue Alpha) number  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsEightBitColor(self, index)


    def GetIndexedTagAsFloat(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a float.  
         e.g. returnVal, tagVal1 = tagGroup.GetIndexedTagAsFloat(0)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `number` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsFloat(self, index)


    def GetIndexedTagAsFloatComplex(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a float complex.  
         e.g. returnVal, tagVal1 = tagGroup.GetIndexedTagAsFloatComplex(0)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `c` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsFloatComplex(self, index)


    def GetIndexedTagAsFloatPoint(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a float point.  
         e.g. returnVal, tagVal1, tagVal2 = tagGroup.GetIndexedTagAsFloatPoint(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `x` :  
            - return value of the tag  
        * `y` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsFloatPoint(self, index)


    def GetIndexedTagAsFloatRect(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a float rect.  
         e.g. returnVal, tagVal1, tagVal2, tagVal3, tagVal4 =
        tagGroup.GetIndexedTagAsFloatRect(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `t` :  
            - return value of the tag  
        * `l` :  
            - return value of the tag  
        * `b` :  
            - return value of the tag  
        * `r` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsFloatRect(self, index)


    def GetIndexedTagAsLong(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a long.  
         e.g. returnVal, tagVal = tagGroup.GetIndexedTagAsLong(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `number` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsLong(self, index)


    def GetIndexedTagAsLongPoint(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a long point.  
         e.g. returnVal, x, y = tagGroup.GetIndexedTagAsLongPoint(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `x` :  
            - return value of the tag  
        * `y` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsLongPoint(self, index)


    def GetIndexedTagAsLongRect(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a long rect.  
         e.g. returnVal, t, l, b, r = tagGroup.GetIndexedTagAsLongRect(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `t` :  
            - return value of the tag  
        * `l` :  
            - return value of the tag  
        * `b` :  
            - return value of the tag  
        * `r` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsLongRect(self, index)


    def GetIndexedTagAsShort(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a short.  
         e.g. returnVal, tagVal = tagGroup.GetIndexedTagAsShort(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `number` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsShort(self, index)


    def GetIndexedTagAsShortPoint(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a short point.  
         e.g. returnVal, tagVal1, tagVal2 = tagGroup.GetIndexedTagAsShortPoint(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `x` :  
            - return value of the tag  
        * `y` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsShortPoint(self, index)


    def GetIndexedTagAsShortRect(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a short rect.  
         e.g. returnVal, tagVal1, tagVal2, tagVal3, tagVal4 =
        tagGroup.GetIndexedTagAsShortRect(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `t` :  
            - return value of the tag  
        * `l` :  
            - return value of the tag  
        * `b` :  
            - return value of the tag  
        * `r` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsShortRect(self, index)


    def GetIndexedTagAsSInt64(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a signed 64-bit integer.  
         e.g. returnVal, val = tagGroup.GetIndexedTagAsSInt64(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `number` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsSInt64(self, index)


    def GetIndexedTagAsString(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a string.  
         e.g. returnVal, tagVal1 = tagGroup.GetIndexedTagAsString(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `str` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsString(self, index)


    def GetIndexedTagAsTagGroup(self, index, subGroup):
        """


        Gets the data at 'index' in 'TagGroup' as a group.  
         e.g. returnVal = tagGroup4.GetIndexedTagAsTagGroup(0, tagGroup4)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `subGroup(in` :  
            out parameter) - return value of the tag group  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsTagGroup(self, index, subGroup)


    def GetIndexedTagAsText(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a string.  
         e.g. returnVal, tagVal1 = tagGroup.GetIndexedTagAsText(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `str` :  
            - return value of the tag group  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsText(self, index)


    def GetIndexedTagAsUInt16(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a 16-bit unsigned integer.  
         e.g. returnVal, tagVal1 = tagGroup.GetIndexedTagAsUInt16(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `number` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsUInt16(self, index)


    def GetIndexedTagAsUInt32(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a 32-bit unsigned integer.  
         e.g. returnVal, tagVal1 = tagGroup.GetIndexedTagAsUInt32(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `number` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsUInt32(self, index)


    def GetIndexedTagAsUInt64(self, index):
        """


        Gets the data at 'index' in 'tagGroup' as a 64-bit unsigned integer.  
         e.g. returnVal, tagVal1 = tagGroup.GetIndexedTagAsUInt64(0)  

        Parameters
        ----------
        * `index` :  
            - index in tag group  
        * `number` :  
            - return value of the tag  

        Returns
        -------
        true for success, false otherwise.  

        """
        return _DigitalMicrograph.Py_TagGroup_GetIndexedTagAsUInt64(self, index)


    def SetTagAsArray(self, tagPath, image):
        """


        Set the data at 'tagPath' in 'tagGroup' as an array of data in 'image'.  
         e.g. tagGroup.SetTagAsArray('Python:TagArray', myImage);  

        Parameters
        ----------
        * `tag_path` :  
            tag path (const char*)  
        * `image` :  
            - (input) a valid image  

        """
        return _DigitalMicrograph.Py_TagGroup_SetTagAsArray(self, tagPath, image)


    def SetIndexedTagAsArray(self, index, image):
        """


        Set the data at 'index' in 'tagGroup' as an array of data in 'image'.  
         e.g. tagGroup.SetIndexedTagAsArray(0, myImage2);  

        Parameters
        ----------
        * `index` :  
            (unsigned long) index in tag group  
        * `image` :  
            - (input) a valid image  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsArray(self, index, image)


    def SetIndexedTagAsBoolean(self, index, val):
        """


        Sets the data at 'index' in 'tagGroup' as a boolean.  
         e.g. tagGroup.SetIndexedTagAsBoolean(0, True)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `val` :  
            - value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsBoolean(self, index, val)


    def SetIndexedTagAsDouble(self, index, number):
        """


        Sets the data at 'index' in 'tagGroup' as a double.  
         e.g. returnVal, tagVal1 = tagGroup.GetIndexedTagAsDouble(0)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `number` :  
            - value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsDouble(self, index, number)


    def SetIndexedTagAsDoubleComplex(self, index, real_complex, imaginary_complex):
        """


        Sets the data at 'index' in 'tagGroup' as a double complex.  
         e.g. tagGroup.SetIndexedTagAsDoubleComplex(0, 333, 404)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `real_complex` :  
            real component of complex number (double type)  
        * `imaginary_complex` :  
            imaginary component of complex number (double type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsDoubleComplex(self, index, real_complex, imaginary_complex)


    def SetIndexedTagAsEightBitColor(self, index, red, green, blue, alpha):
        """


        Sets the data at 'index' in 'tagGroup' as an eight bit color.  
         e.g. tagGroup.SetIndexedTagAsEightBitColor(0, 1, 1, 0, 1)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `red` :  
            - input red value of the RGBA (Red Green Blue Alpha) number  
        * `green` :  
            - input green value of the RGBA (Red Green Blue Alpha) number  
        * `blue` :  
            - input blue value of the RGBA (Red Green Blue Alpha) number  
        * `alpah` :  
            - input alpha value of the RGBA (Red Green Blue Alpha) number  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsEightBitColor(self, index, red, green, blue, alpha)


    def SetIndexedTagAsFloat(self, index, number):
        """


        Sets the data at 'index' in 'tagGroup' as a float.  
         e.g. tagGroup.SetIndexedTagAsFloat(0, 9.000022888183594)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `number` :  
            - value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsFloat(self, index, number)


    def SetIndexedTagAsFloatComplex(self, index, real_complex, imaginary_complex):
        """


        Sets the data at 'index' in 'tagGroup' as a float complex.  
         e.g. tagGroup.SetIndexedTagAsFloatComplex(0, 200, 100)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `real_complex` :  
            real component of complex number (double type)  
        * `imaginary_complex` :  
            imaginary component of complex number (double type)  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsFloatComplex(self, index, real_complex, imaginary_complex)


    def SetIndexedTagAsFloatPoint(self, index, x, y):
        """


        Sets the data at 'index' in 'tagGroup' as a float point.  
         e.g. tagGroup.SetIndexedTagAsFloatPoint(0, 0.032, 0.021)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `x` :  
            - value of the tag  
        * `y` :  
            - value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsFloatPoint(self, index, x, y)


    def SetIndexedTagAsFloatRect(self, index, t, l, b, r):
        """


        Sets the data at 'index' in 'tagGroup' as a float rect.  
         e.g. tagGroup.SetIndexedTagAsFloatRect(0, 0.1, 0.2, 0.3, 0.4)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `t` :  
            - value of top  
        * `l` :  
            - value of left  
        * `b` :  
            - value of bottom  
        * `r` :  
            - value of right  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsFloatRect(self, index, t, l, b, r)


    def SetIndexedTagAsLong(self, index, number):
        """


        Sets the data at 'index' in 'tagGroup' as a long.  
         e.g. tagGroup.SetIndexedTagAsLong(0, 12322)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `number` :  
            - value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsLong(self, index, number)


    def SetIndexedTagAsLongPoint(self, index, x, y):
        """


        Sets the data at 'index' in 'tagGroup' as a long point.  
         e.g. tagGroup.SetIndexedTagAsLongPoint(0, 100, 200)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `x` :  
            coordinate of the point  
        * `y` :  
            coordinate of the point  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsLongPoint(self, index, x, y)


    def SetIndexedTagAsLongRect(self, index, t, l, b, r):
        """


        Sets the data at 'index' in 'tagGroup' as a long rect.  
         e.g. tagGroup.SetIndexedTagAsLongRect(0, 1000, 2000, 3000, 4000)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `t` :  
            - top of the triangle  
        * `l` :  
            - left of the triangle  
        * `b` :  
            - bottom of the triangle  
        * `r` :  
            - right of the triangle  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsLongRect(self, index, t, l, b, r)


    def SetIndexedTagAsRGBUInt16(self, index, r, g, b):
        """


        Sets the data at 'index' in 'tagGroup' as a 16-bit rgb value.  
         e.g. tagGroup.SetIndexedTagAsRGBUInt16(0, 1, 1, 0)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `r` :  
            - red in rgb  
        * `g` :  
            - green in rgb  
        * `b` :  
            - blue in rgb  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsRGBUInt16(self, index, r, g, b)


    def SetIndexedTagAsShort(self, index, number):
        """


        Sets the data at 'index' in 'tagGroup' as a short.  
         e.g. tagGroup.SetIndexedTagAsShort(0, 123)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `number` :  
            - value of the tag to be set  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsShort(self, index, number)


    def SetIndexedTagAsShortPoint(self, index, x, y):
        """


        Sets the data at 'index' in 'tagGroup' as a short point.  
         e.g. tagGroup.SetIndexedTagAsShortPoint(0, -32, -16)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `x` :  
            - x coordinate of the point  
        * `y` :  
            - y coordinate of the point  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsShortPoint(self, index, x, y)


    def SetIndexedTagAsShortRect(self, index, t, l, b, r):
        """


        Sets the data at 'index' in 'tagGroup' as a short rect.  
         e.g. tagGroup.SetIndexedTagAsShortRect(0, 1, 2, 3, 4)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `t` :  
            - top of the triangle  
        * `l` :  
            - left of the triangle  
        * `b` :  
            - bottom of the triangle  
        * `r` :  
            - right of the triangle  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsShortRect(self, index, t, l, b, r)


    def SetIndexedTagAsSInt64(self, index, number):
        """


        Sets the data at 'index' in 'tagGroup' as a signed 64-bit integer.  
         e.g. tagGroup.SetIndexedTagAsSInt64(0, 100000000)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `number` :  
            - value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsSInt64(self, index, number)


    def SetIndexedTagAsString(self, index, s):
        """


        Sets the data at 'index' in 'tagGroup' as a string.  
         e.g. tagGroup.SetIndexedTagAsString(0, 'test')  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `s` :  
            - string value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsString(self, index, s)


    def SetIndexedTagAsTagGroup(self, index, subGroup):
        """


        Sets the data at 'index' in 'TagGroup' as a group.  
         e.g. tagGroup4.SetIndexedTagAsTagGroup(0, tagGroup3)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `subGroup` :  
            - value of the tag to be set  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsTagGroup(self, index, subGroup)


    def SetIndexedTagAsText(self, index, s):
        """


        Sets the data at 'index' in 'tagGroup' as a string.  
         e.g. tagGroup.SetIndexedTagAsText(0, "test")  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `s` :  
            - value of the tag to be set  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsText(self, index, s)


    def SetIndexedTagAsUInt16(self, index, number):
        """


        Sets the data at 'index' in 'tagGroup' as a 16-bit unsigned integer.  
         e.g. tagGroup.SetIndexedTagAsUInt16(0, 111)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `number` :  
            - value of the tag to be set  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsUInt16(self, index, number)


    def SetIndexedTagAsUInt32(self, index, number):
        """


        Sets the data at 'index' in 'tagGroup' as a 32-bit unsigned integer.  
         e.g. tagGroup.SetIndexedTagAsUInt32(0, 65535)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `number` :  
            - value of the tag to be set  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsUInt32(self, index, number)


    def SetIndexedTagAsUInt64(self, index, number):
        """


        Sets the data at 'index' in 'tagGroup' as a 64-bit unsigned integer.  
         e.g. tagGroup.SetIndexedTagAsUInt64(0, 66666)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `number` :  
            - value of the tag to be set  

        """
        return _DigitalMicrograph.Py_TagGroup_SetIndexedTagAsUInt64(self, index, number)


    def InsertTagAsArray(self, ref_index, image):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as an arrayof data in 'image'.  
         e.g. tagList.InsertTagAsArray(0, image2)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `image` :  
            - value of the tag to be set  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsArray(self, ref_index, image)


    def InsertTagAsBoolean(self, ref_index, val):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a boolean.  
         e.g. tagGroup.InsertTagAsBoolean(0, True)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `val` :  
            - value of the tag to be set  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsBoolean(self, ref_index, val)


    def InsertTagAsDouble(self, ref_index, number):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a double.  
         e.g. tagGroup.InsertTagAsDouble(1, 1.02)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `number` :  
            - value of the tag to be set  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsDouble(self, ref_index, number)


    def InsertTagAsDoubleComplex(self, ref_index, real_complex, imaginary_complex):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a double complex.  
         e.g. tagGroup.InsertTagAsDoubleComplex(2, 100, 200)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `real_complex` :  
            real component of complex number (double type)  
        * `imaginary_complex` :  
            imaginary component of complex number (double type)  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsDoubleComplex(self, ref_index, real_complex, imaginary_complex)


    def InsertTagAsEightBitColor(self, ref_index, red, green, blue, alpha):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as an eight bit color.  
         e.g. tagList.InsertTagAsEightBitColor(1, 1, 0, 1, 1)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `red` :  
            - input red value of the RGBA (Red Green Blue Alpha) number  
        * `green` :  
            - input green value of the RGBA (Red Green Blue Alpha) number  
        * `blue` :  
            - input blue value of the RGBA (Red Green Blue Alpha) number  
        * `alpha` :  
            - input alpha value of the RGBA (Red Green Blue Alpha) number  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsEightBitColor(self, ref_index, red, green, blue, alpha)


    def InsertTagAsFloat(self, ref_index, number):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a float.  
         e.g. tagGroup.InsertTagAsFloat(3, 1.023)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `number` :  
            - value of the tag to be set  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsFloat(self, ref_index, number)


    def InsertTagAsFloatComplex(self, ref_index, real_complex, imaginary_complex):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a float complex.  
         e.g. tagGroup.InsertTagAsFloatComplex(4, 300, 400)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `real_complex` :  
            real component of complex number (double type)  
        * `imaginary_complex` :  
            imaginary component of complex number (double type)  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsFloatComplex(self, ref_index, real_complex, imaginary_complex)


    def InsertTagAsFloatPoint(self, ref_index, x, y):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a float point.  
         e.g. tagGroup.InsertTagAsFloatPoint(5, 3, 4)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `x` :  
            - x value of the tag  
        * `y` :  
            - y value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsFloatPoint(self, ref_index, x, y)


    def InsertTagAsFloatRect(self, ref_index, t, l, b, r):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a float rect.  
         e.g. tagGroup.InsertTagAsFloatRect(6, 3.3, 4.4, 5.5, 6.6)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `t` :  
            - value of top  
        * `l` :  
            - value of left  
        * `b` :  
            - value of bottom  
        * `r` :  
            - value of right  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsFloatRect(self, ref_index, t, l, b, r)


    def InsertTagAsLong(self, ref_index, number):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a long.  
         e.g. tagGroup.InsertTagAsLong(7, 345678)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `number` :  
            - value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsLong(self, ref_index, number)


    def InsertTagAsLongPoint(self, ref_index, x, y):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a long point.  
         e.g. tagGroup.InsertTagAsLongPoint(8, 345678, 456789)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `x` :  
            - x value of the tag  
        * `y` :  
            - y value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsLongPoint(self, ref_index, x, y)


    def InsertTagAsLongRect(self, ref_index, t, l, b, r):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a long rect.  
         e.g. tagGroup.InsertTagAsLongRect(9, 33333, 44444, 55555, 66666)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `number` :  
            - return value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsLongRect(self, ref_index, t, l, b, r)


    def InsertTagAsRGBUInt16(self, ref_index, r, g, b):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a 16-bit rgb value.  
         e.g. tagGroup.InsertTagAsRGBUInt16(10, 1, 0, 1)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `r` :  
            - red in rgb  
        * `g` :  
            - green in rgb  
        * `b` :  
            - blue in rgb  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsRGBUInt16(self, ref_index, r, g, b)


    def InsertTagAsShort(self, ref_index, number):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a short.  
         e.g. tagGroup.InsertTagAsShort(11, 11)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `number` :  
            - return value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsShort(self, ref_index, number)


    def InsertTagAsShortPoint(self, ref_index, x, y):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a short point.  
         e.g. tagGroup.InsertTagAsShortPoint(12, 11, 33)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `x` :  
            - x value of the tag  
        * `y` :  
            - y value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsShortPoint(self, ref_index, x, y)


    def InsertTagAsShortRect(self, ref_index, t, l, b, r):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a short rect.  
         e.g. tagGroup.InsertTagAsShortRect(13, 33, 44, 55, 66)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `t` :  
            - value of top  
        * `l` :  
            - value of left  
        * `b` :  
            - value of bottom  
        * `r` :  
            - value of right  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsShortRect(self, ref_index, t, l, b, r)


    def InsertTagAsSInt64(self, ref_index, number):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a signed 64-bit integer.  
         e.g. tagList.InsertTagAsSInt64(2, -6000000)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `number` :  
            - value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsSInt64(self, ref_index, number)


    def InsertTagAsString(self, ref_index, s):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a string.  
         e.g. tagGroup.InsertTagAsString(14, 'test')  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `s` :  
            - string value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsString(self, ref_index, s)


    def InsertTagAsTagGroup(self, ref_index, subGroup):
        """


        Inserts new data before 'ref_index' in 'TagGroup' as a group.  
         e.g. tagGroup.InsertTagAsTagGroup(15, tagGroup)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `subGroup` :  
            - tag data to be added  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsTagGroup(self, ref_index, subGroup)


    def InsertTagAsText(self, ref_index, s):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a string.  
         e.g. tagGroup.InsertTagAsText(16, 'text')  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `d` :  
            - string value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsText(self, ref_index, s)


    def InsertTagAsUInt16(self, ref_index, number):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a 16-bit unsigned integer.  
         e.g. tagGroup.InsertTagAsUInt16(17, 22)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `number` :  
            - value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsUInt16(self, ref_index, number)


    def InsertTagAsUInt32(self, ref_index, number):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a 32-bit unsigned integer.  
         e.g. tagGroup.InsertTagAsUInt32(18, 3333333)  

        Parameters
        ----------
        * `ref_index` :  
            - index in tag group  
        * `number` :  
            - value of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsUInt32(self, ref_index, number)


    def InsertTagAsUInt64(self, ref_index, number):
        """


        Inserts new data before 'ref_index' in 'tagGroup' as a 64-bit unsigned integer.  
         e.g. returnVal = tagList.InsertTagAsUInt64(3, 6000000)  

        Parameters
        ----------
        * `index` :  
            index in tag group  
        * `number` :  
            - alue of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_InsertTagAsUInt64(self, ref_index, number)


    def SaveToFile(self, path):
        """


        Saves the contents of the tag group to the file specified by 'path'.  
         e.g. tagGroup.SaveToFile('C:\temp\tagGroup')  

        Parameters
        ----------
        * `path` :  
            - specified path  

        """
        return _DigitalMicrograph.Py_TagGroup_SaveToFile(self, path)


    def LoadFromFile(self, path):
        """


        Loads the contents of the file specified by 'path' into the tag group.  
         e.g. tagGroup.LoadFromFile('C:\temp\tagGroup')  

        Parameters
        ----------
        * `path` :  
            - specified path  

        Returns
        -------
        success or faillure  

        """
        return _DigitalMicrograph.Py_TagGroup_LoadFromFile(self, path)


    def OpenBrowserWindow(self, isFileBased):
        """


        Opens a browser window for the tag group.  
         e.g. window = tagGroup.OpenBrowserWindow(True)  

        Parameters
        ----------
        * `isFileBased` :  
            - boolean variable indicating if it is file based  

        Returns
        -------
        a Py_window*. Return NULL when there is an exception.  

        """
        return _DigitalMicrograph.Py_TagGroup_OpenBrowserWindow(self, isFileBased)


    def GetTagLabel(self, index):
        """


        Gets tag label at 'index' in 'tagGroup' as a string.  
         e.g. str = tagGroup.GetTagLabel(1)  

        Parameters
        ----------
        * `index` :  
            index of the tag  

        Returns
        -------
        label as string  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagLabel(self, index)


    def GetTagSize(self, index):
        """


        Gets the size of the tag.  
         e.g. size = tagGroup.GetTagSize(1)  

        Parameters
        ----------
        * `index` :  
            index of the tag  

        Returns
        -------
        size of the tag  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagSize(self, index)


    def GetTagTypeLength(self, index):
        """


        Returns number of elements in the tag's type.  
         e.g. len = tagGroup.GetTagTypeLength(1)  

        Parameters
        ----------
        * `index` :  
            index of the tag  

        Returns
        -------
        number of elements in the tag's type  

        """
        return _DigitalMicrograph.Py_TagGroup_GetTagTypeLength(self, index)


    def __len__(self):
        return _DigitalMicrograph.Py_TagGroup___len__(self)

    def __setitem__(self, key, v):
        return _DigitalMicrograph.Py_TagGroup___setitem__(self, key, v)

    def __getitem__(self, *args):
        return _DigitalMicrograph.Py_TagGroup___getitem__(self, *args)
Py_TagGroup_swigregister = _DigitalMicrograph.Py_TagGroup_swigregister
Py_TagGroup_swigregister(Py_TagGroup)


def GetPersistentTagGroup():
    """


    Gets the persistent py tag group.  
     e.g. tagGroupP = DM.GetPersistentTagGroup();  

    Returns
    -------
    persistent py tag group (Py_TagGroup* type)  

    """
    return _DigitalMicrograph.GetPersistentTagGroup()

def NewTagGroup():
    """


    Creates an empty tag group.  
     e.g. tagGroup = DM.NewTagGroup()  

    Returns
    -------
    empty tag group (Py_TagGroup* type)  

    """
    return _DigitalMicrograph.NewTagGroup()

def NewTagList():
    """


    Creates an empty tag list.  
     e.g. tagGroup = DM.NewTagList()  

    Returns
    -------
    empty list (Py_TagGroup* type)  

    """
    return _DigitalMicrograph.NewTagList()
class Py_Camera(_object):
    """


    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Py_Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Py_Camera, name)
    __repr__ = _swig_repr

    def __init__(self, id):
        """


        Constructor that creates a Py_Camera with an id.  

        Parameters
        ----------
        * `id` :  
            id of type long  

        """
        this = _DigitalMicrograph.new_Py_Camera(id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Py_Camera
    __del__ = lambda self: None

    def GetID(self):
        """


        Get the id of the camera.  

        Returns
        -------
        camera id  

        """
        return _DigitalMicrograph.Py_Camera_GetID(self)


    def GetName(self):
        """


        Get the name of the camera.  
         e.g. camera.GetName( )  

        Returns
        -------
        camera name  

        """
        return _DigitalMicrograph.Py_Camera_GetName(self)


    def GetDeviceLocation(self):
        """


        Get the device location.  
         e.g. camera.GetDeviceLocation( )  

        Returns
        -------
        device location  

        """
        return _DigitalMicrograph.Py_Camera_GetDeviceLocation(self)


    def GetSize(self):
        """


        Get the size.  
         e.g. sx, sy = camera.GetSize( )  

        Returns
        -------
        the size  

        """
        return _DigitalMicrograph.Py_Camera_GetSize(self)


    def GetPixelSize(self):
        """


        Get the pixel size.  
         e.g. psx, psy = camera.GetPixelSize( )  

        Returns
        -------
        the pixel size  

        """
        return _DigitalMicrograph.Py_Camera_GetPixelSize(self)


    def IsRetractable(self):
        """


        whether it is retractable.  
         e.g. camera.IsRetractable()  

        Returns
        -------
        whether it is retractable  

        """
        return _DigitalMicrograph.Py_Camera_IsRetractable(self)


    def GetInserted(self):
        """


        Get whether the camera device is currently inserted. (Always true for non-
        retractable cameras.)  

        Returns
        -------
        whether it is inserted  

        """
        return _DigitalMicrograph.Py_Camera_GetInserted(self)


    def SetInserted(self, inserted):
        """


        Set whether the camera device is currently inserted  
         e.g. camera.SetInserted( True )  

        Returns
        -------
        true for success  

        """
        return _DigitalMicrograph.Py_Camera_SetInserted(self, inserted)


    def PrepareForAcquire(self):
        """


        Perform all steps to ensure that the camera device can acquire an image.
        Typically, this involves inserting the camera and retracting all other
        retractable cameras. If such changes are needed, the user is prompted
        beforehand, and the progress window informs about waiting times.  
         e.g. camera.PrepareForAcquire()  

        """
        return _DigitalMicrograph.Py_Camera_PrepareForAcquire(self)


    def GetDefaultParameters(self):
        """


        Get the main acquisition parameters for the camera device as currently specified
        in the "camera acquire" dialog for the Record setting.  
         e.g. parameters = camera.GetDefaultParameters()  

        Parameters
        ----------
        * `exposure` :  
            Return: Exposure time in seconds  
        * `xBin` :  
            Return: Hardware binning of pixels in x direction  
        * `yBin` :  
            Return: Hardware binning of pixels in y direction  
        * `processing` :  
            Return: Processing level (unprocessed, dark subtracted, gain normalized) as
            number  
        * `top` :  
            Return: Top coordinate of the CCD readout area  
        * `left` :  
            Return: Left coordinate of the CCD readout area  
        * `bottom` :  
            Return: Bottom coordinate of the CCD readout area  
        * `right` :  
            Return: Right coordinate of the CCD readout area  

        """
        return _DigitalMicrograph.Py_Camera_GetDefaultParameters(self)


    def CreateImageForAcquire(self, *args):
        """


        Creates an image suitable to contain data acquired from the camera device. The
        returned image has the appropriate size and data type for acquisitions with
        given parameters. Not specified parameters are derived from the parameters as
        specified in the "camera acquire" dialog for the Record setting.  
         Currently, there are 4 CreateImageForAcquire(.) supported.  
         They are:  
         1) Py_Image* CreateImageForAcquire();  
         e.g. img2 = camera.CreateImageForAcquire()  
         2) Py_Image* CreateImageForAcquire( int xBin, int yBin );  
         e.g. img2 = camera.CreateImageForAcquire( 2, 2 )  
         3) Py_Image* CreateImageForAcquire( int xBin, int yBin, int processing );  
         e.g. img2 = camera.CreateImageForAcquire( 2, 2, 1 )  
         4) Py_Image* CreateImageForAcquire( int xBin, int yBin, int processing,  
         int top, int left, int bottom, int right );  
         e.g. img2 = camera.CreateImageForAcquire( 2, 2 , 1, 0, 0, 4096, 4096)  

        Parameters
        ----------
        * `xBin` :  
            Hardware binning of pixels in x direction  
        * `yBin` :  
            Hardware binning of pixels in y direction  
        * `processing` :  
            Processing level (unprocessed, dark subtracted, gain normalized) as number  
        * `top` :  
            op coordinate of the CCD readout area  
        * `left` :  
            Left coordinate of the CCD readout area  
        * `bottom` :  
            Bottom coordinate of the CCD readout area  
        * `right` :  
            Right coordinate of the CCD readout area  

        Returns
        -------
        a Py_Image  

        """
        return _DigitalMicrograph.Py_Camera_CreateImageForAcquire(self, *args)


    def AcquireInPlace(self, *args):
        """


        Acquires an image from the camera device into the provided image container. The
        function returns true if the provided image was suitable and the acquisition
        successful. If the provided image is not suitable, no image is acquired and the
        function returns 0 (false). The acquisition uses the parameter set as specified
        in the "camera acquire" dialog for the Record setting as a basis, but provided
        parameters are used instead. The camera ID value of the currently selected
        camera can be found by CameraGetActiveCameraID(). The image into which the
        acquired data is stored has to be of fitting size and data type. A suitable
        image can always be created using CameraCreateImageForAcquire(). Exposure time
        is given in seconds. Hardware binning of pixels in x and y is specified
        separately. The processing parameter is an integer number representing either no
        processing, subtraction of a dark current, or dark current subtraction followed
        by gain normalization. The camera readout area is specified in the typical top-
        left-bottom-right notation of image selections. It specifies the readout area
        prior to any binning, and the maximum area can be found using CameraGetSize().  
         Currently, there are 5 AcquireInPlace(.) supported.  
         They are:  
         1) bool AcquireInPlace( Py_Image* image );  
         e.g. img2 = camera.CreateImageForAcquire( 2, 2 )  
         img2.ShowImage()  
         camera.AcquireInPlace( img2)  
         img2.UpdateImage()  
         2) bool AcquireInPlace( Py_Image* image, double exposure );  
         e.g. img2 = camera.CreateImageForAcquire( 2, 2 )  
         img2.ShowImage()  
         camera.AcquireInPlace( img2, 0.5)  
         img2.UpdateImage()  
         3) bool AcquireInPlace( Py_Image* image, double exposure, int xBin, int yBin );  
         e.g. img2 = camera.CreateImageForAcquire( 2, 2 )  
         img2.ShowImage()  
         camera.AcquireInPlace( img2, 0.5, 2, 2 )  
         img2.UpdateImage()  
         4) bool AcquireInPlace( Py_Image* image, double exposure, int xBin, int yBin,
        int processing );  
         e.g. img2 = camera.CreateImageForAcquire( 2, 2 )  
         img2.ShowImage()  
         camera.AcquireInPlace( img2, 0.5, 2, 2, 1 )  
         img2.UpdateImage()  
         5) bool AcquireInPlace( Py_Image* image, double exposure, int xBin, int yBin,
        int processing,  
         int top, int left, int bottom, int right );  
         e.g. img2 = camera.CreateImageForAcquire( 2, 2 )  
         img2.ShowImage()  
         camera.AcquireInPlace( img2, 0.5, 2, 2, 1, 0, 0, 4096, 4096)  
         img2.UpdateImage()  

        Parameters
        ----------
        * `image` :  
            Return: Acquired Py_image from the camera  
        * `exposure` :  
            Exposure time in seconds  
        * `xBin` :  
            Hardware binning of pixels in x direction  
        * `yBin` :  
            Hardware binning of pixels in y direction  
        * `processing` :  
            Processing level (unprocessed, dark subtracted, gain normalized) as number  
        * `areaT` :  
            Top coordinate of the CCD readout area  
        * `areaL` :  
            Left coordinate of the CCD readout area  
        * `areaB` :  
            Bottom coordinate of the CCD readout area  
        * `areaR` :  
            Right coordinate of the CCD readout area  

        Returns
        -------
        True if provided image container is suitable and acquisition was successful  

        """
        return _DigitalMicrograph.Py_Camera_AcquireInPlace(self, *args)


    def AcquireImage(self, *args):
        """


        Acquires an image from the camera device. Currently, there are 5 AcquireImage(.)
        supported.  
         They are:  
         1) Py_Image* AcquireImage();  
         e.g. img = camera.AcquireImage()  
         2) Py_Image* AcquireImage( double exposure );  
         e.g. img = camera.AcquireImage(0.03)  
         3) Py_Image* AcquireImage( double exposure, int xBin, int yBin );  
         e.g. img = camera.AcquireImage(0.03, 1, 1)  
         4) Py_Image* AcquireImage( double exposure, int xBin, int yBin, int processing
        );  
         e.g. img = camera.AcquireImage(0.03, 1, 1, 1)  
         5) Py_Image* AcquireImage( double exposure, int xBin, int yBin, int processing,  
         int top, int left, int bottom, int right );  
         e.g. img = camera.AcquireImage(0.03, 1, 1, 1, 0, 0, 4096, 4096)  

        Parameters
        ----------
        * `exposure` :  
            Exposure time in seconds  
        * `xBin` :  
            Hardware binning of pixels in x direction  
        * `yBin` :  
            Hardware binning of pixels in y direction  
        * `processing` :  
            Processing level (unprocessed, dark subtracted, gain normalized) as number  
        * `areaT` :  
            Top coordinate of the CCD readout area  
        * `areaL` :  
            Left coordinate of the CCD readout area  
        * `areaB` :  
            Bottom coordinate of the CCD readout area  
        * `areaR` :  
            Right coordinate of the CCD readout area  

        Returns
        -------
        a Py_Image  

        """
        return _DigitalMicrograph.Py_Camera_AcquireImage(self, *args)


    def StartContinuousAcquisition(self, exposure, xBin, yBin, processing):
        """


        Start a continuous camera acquisition. CameraStartContinuousAcquisition(...),
        GetFrameInContinuousMode(...) and StopContinuousAcquisition() should be used
        together.  
         e.g. camera = DM.GetActiveCamera( )  
         image1 = camera.CreateImageForAcquire(1, 1, 3)  
         camera.StartContinuousAcquisition(1.99, 1, 1, 3)  
         camera.GetFrameInContinuousMode(image1, 5)  
         camera.StopContinuousAcquisition()  

        Parameters
        ----------
        * `exposure` :  
            Exposure time in seconds  
        * `xBin` :  
            Hardware binning of pixels in x direction. This should match the
            corresponding parameter in CreateImageForAcquire().  
        * `yBin` :  
            Hardware binning of pixels in y direction. This should match the
            corresponding parameter in CreateImageForAcquire().  
        * `processing` :  
            Processing level (unprocessed, dark subtracted, gain normalized) as number.
            This should match the corresponding parameter in CreateImageForAcquire().  

        """
        return _DigitalMicrograph.Py_Camera_StartContinuousAcquisition(self, exposure, xBin, yBin, processing)


    def GetFrameInContinuousMode(self, dstImage, max_wait_s):
        """


        Retrieves an image from a continuous camera acquisition and returns true if a
        frame is retrieved. If no frame is available within the specified timeout
        interval, the function returns false. CameraStartContinuousAcquisition(...),
        GetFrameInContinuousMode(...) and StopContinuousAcquisition() should be used
        together.  
         e.g. camera = DM.GetActiveCamera( )  
         image1 = camera.CreateImageForAcquire(1, 1, 3)  
         camera.StartContinuousAcquisition(1.99, 1, 1, 3)  
         camera.GetFrameInContinuousMode(image1, 5)  
         camera.StopContinuousAcquisition()  

        Parameters
        ----------
        * `image` :  
            Return: Py_image updated by the acquisition  
        * `max_wait_s` :  
            max time to wait (in seconds) for a frame to be available before returning  

        Returns
        -------
        True (1) if a frame is retrieved, false otherwise  

        """
        return _DigitalMicrograph.Py_Camera_GetFrameInContinuousMode(self, dstImage, max_wait_s)


    def StopContinuousAcquisition(self):
        """


        Stop a continuous camera acquisition. CameraStartContinuousAcquisition(...),
        GetFrameInContinuousMode(...) and StopContinuousAcquisition() should be used
        together.  
         e.g. camera = DM.GetActiveCamera( )  
         image1 = camera.CreateImageForAcquire(1, 1, 3)  
         camera.StartContinuousAcquisition(1.99, 1, 1, 3)  
         camera.GetFrameInContinuousMode(image1, 5)  
         camera.StopContinuousAcquisition()  

        """
        return _DigitalMicrograph.Py_Camera_StopContinuousAcquisition(self)

Py_Camera_swigregister = _DigitalMicrograph.Py_Camera_swigregister
Py_Camera_swigregister(Py_Camera)


def GetCameraByID(id):
    """


    Get camera by id  

    Parameters
    ----------
    * `id` :  
        camera id  

    Returns
    -------
    a Py_Camera  

    """
    return _DigitalMicrograph.GetCameraByID(id)

def GetActiveCamera():
    """


    Get active camera  
     e.g. camera = DM.GetActiveCamera( )  

    Returns
    -------
    the acive Py_Camera  

    """
    return _DigitalMicrograph.GetActiveCamera()

def SetActiveCameraByID(id):
    """


    Set active camera by ID  
     e.g. DM.SetActiveCameraByID( camID )  

    Parameters
    ----------
    * `id` :  
        camera id  

    """
    return _DigitalMicrograph.SetActiveCameraByID(id)

def GetNumberOfCameras():
    """


    Get the number of cameras  
     e.g. nCams = DM.GetNumberOfCameras( )  

    Returns
    -------
    number of cameras  

    """
    return _DigitalMicrograph.GetNumberOfCameras()

def GetCameraUnprocessedEnum():
    """


    Return the integer value which represents 'unprocessed' processing for acquired
    images.  

    Returns
    -------
    integer value which represents 'unprocessed' processing for acquired images  

    """
    return _DigitalMicrograph.GetCameraUnprocessedEnum()

def GetCameraDarkSubtractedEnum():
    """


    Return the integer value which represents 'dark subtracted' processing for
    acquired images.  

    Returns
    -------
    the integer value which represents 'dark subtracted' processing for acquired
    images.  

    """
    return _DigitalMicrograph.GetCameraDarkSubtractedEnum()

def GetCameraGainNormalizedEnum():
    """


    Return the integer value which represents 'gain normalized' processing for
    acquired images.  

    the integer value which represents 'gain normalized' processing for acquired
    images.  

    """
    return _DigitalMicrograph.GetCameraGainNormalizedEnum()
class ImageSubscriberID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSubscriberID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSubscriberID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["img"] = _DigitalMicrograph.ImageSubscriberID_img_set
    __swig_getmethods__["img"] = _DigitalMicrograph.ImageSubscriberID_img_get
    if _newclass:
        img = _swig_property(_DigitalMicrograph.ImageSubscriberID_img_get, _DigitalMicrograph.ImageSubscriberID_img_set)
    __swig_setmethods__["id"] = _DigitalMicrograph.ImageSubscriberID_id_set
    __swig_getmethods__["id"] = _DigitalMicrograph.ImageSubscriberID_id_get
    if _newclass:
        id = _swig_property(_DigitalMicrograph.ImageSubscriberID_id_get, _DigitalMicrograph.ImageSubscriberID_id_set)

    def __init__(self, aImage, aId):
        this = _DigitalMicrograph.new_ImageSubscriberID(aImage, aId)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_ImageSubscriberID
    __del__ = lambda self: None
ImageSubscriberID_swigregister = _DigitalMicrograph.ImageSubscriberID_swigregister
ImageSubscriberID_swigregister(ImageSubscriberID)

class ImageDisplaySubscriberID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageDisplaySubscriberID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageDisplaySubscriberID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["imgDisp"] = _DigitalMicrograph.ImageDisplaySubscriberID_imgDisp_set
    __swig_getmethods__["imgDisp"] = _DigitalMicrograph.ImageDisplaySubscriberID_imgDisp_get
    if _newclass:
        imgDisp = _swig_property(_DigitalMicrograph.ImageDisplaySubscriberID_imgDisp_get, _DigitalMicrograph.ImageDisplaySubscriberID_imgDisp_set)
    __swig_setmethods__["id"] = _DigitalMicrograph.ImageDisplaySubscriberID_id_set
    __swig_getmethods__["id"] = _DigitalMicrograph.ImageDisplaySubscriberID_id_get
    if _newclass:
        id = _swig_property(_DigitalMicrograph.ImageDisplaySubscriberID_id_get, _DigitalMicrograph.ImageDisplaySubscriberID_id_set)

    def __init__(self, aImageDisp, aId):
        this = _DigitalMicrograph.new_ImageDisplaySubscriberID(aImageDisp, aId)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_ImageDisplaySubscriberID
    __del__ = lambda self: None
ImageDisplaySubscriberID_swigregister = _DigitalMicrograph.ImageDisplaySubscriberID_swigregister
ImageDisplaySubscriberID_swigregister(ImageDisplaySubscriberID)

class WindowSubscriberID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WindowSubscriberID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WindowSubscriberID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["window"] = _DigitalMicrograph.WindowSubscriberID_window_set
    __swig_getmethods__["window"] = _DigitalMicrograph.WindowSubscriberID_window_get
    if _newclass:
        window = _swig_property(_DigitalMicrograph.WindowSubscriberID_window_get, _DigitalMicrograph.WindowSubscriberID_window_set)
    __swig_setmethods__["id"] = _DigitalMicrograph.WindowSubscriberID_id_set
    __swig_getmethods__["id"] = _DigitalMicrograph.WindowSubscriberID_id_get
    if _newclass:
        id = _swig_property(_DigitalMicrograph.WindowSubscriberID_id_get, _DigitalMicrograph.WindowSubscriberID_id_set)

    def __init__(self, aWindow, aId):
        this = _DigitalMicrograph.new_WindowSubscriberID(aWindow, aId)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_WindowSubscriberID
    __del__ = lambda self: None
WindowSubscriberID_swigregister = _DigitalMicrograph.WindowSubscriberID_swigregister
WindowSubscriberID_swigregister(WindowSubscriberID)

class CompoundDocumentSubscriberID(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompoundDocumentSubscriberID, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompoundDocumentSubscriberID, name)
    __repr__ = _swig_repr
    __swig_setmethods__["compoundDoc"] = _DigitalMicrograph.CompoundDocumentSubscriberID_compoundDoc_set
    __swig_getmethods__["compoundDoc"] = _DigitalMicrograph.CompoundDocumentSubscriberID_compoundDoc_get
    if _newclass:
        compoundDoc = _swig_property(_DigitalMicrograph.CompoundDocumentSubscriberID_compoundDoc_get, _DigitalMicrograph.CompoundDocumentSubscriberID_compoundDoc_set)
    __swig_setmethods__["id"] = _DigitalMicrograph.CompoundDocumentSubscriberID_id_set
    __swig_getmethods__["id"] = _DigitalMicrograph.CompoundDocumentSubscriberID_id_get
    if _newclass:
        id = _swig_property(_DigitalMicrograph.CompoundDocumentSubscriberID_id_get, _DigitalMicrograph.CompoundDocumentSubscriberID_id_set)

    def __init__(self, aCompoundDoc, aId):
        this = _DigitalMicrograph.new_CompoundDocumentSubscriberID(aCompoundDoc, aId)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_CompoundDocumentSubscriberID
    __del__ = lambda self: None
CompoundDocumentSubscriberID_swigregister = _DigitalMicrograph.CompoundDocumentSubscriberID_swigregister
CompoundDocumentSubscriberID_swigregister(CompoundDocumentSubscriberID)

class Py_ScriptObject(_object):
    """


    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Py_ScriptObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Py_ScriptObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        """


        Constructor that creates a Py_ScriptObject.  

        """
        if self.__class__ == Py_ScriptObject:
            _self = None
        else:
            _self = self
        this = _DigitalMicrograph.new_Py_ScriptObject(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Py_ScriptObject
    __del__ = lambda self: None

    def ImageHandleDataChangedEvent(self, img, client_id):
        """


        Register Image DataChanged event.  

        Parameters
        ----------
        * `Py_Image` :  
            register event related to the Py_Image  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageHandleDataChangedEvent(self, img, client_id)


    def ImageHandleNameChangedEvent(self, img, client_id):
        """


        Register Image NameChanged event.  

        Parameters
        ----------
        * `Py_Image` :  
            register event related to the Py_Image  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageHandleNameChangedEvent(self, img, client_id)


    def ImageHandleCalibrationChangedEvent(self, img, client_id):
        """


        Register Image CalibrationChanged event.  

        Parameters
        ----------
        * `Py_Image` :  
            register event related to the Py_Image  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageHandleCalibrationChangedEvent(self, img, client_id)


    def ImageHandleShowExtractionEvent(self, img, client_id):
        """


        Register Image ShowExtractionE event.  

        Parameters
        ----------
        * `Py_Image` :  
            register event related to the Py_Image  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageHandleShowExtractionEvent(self, img, client_id)


    def HandleNameChangedEvent(self, *args):
        """


        Default event handler for ImageNameChangedEvent with Py_XXX parameter User can
        overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_Image, the underlying DM::Image is the same as the
        one it subscribes to  

        Parameters
        ----------
        * `change_flag` :  
            change flag  
        * `img` :  
            a Py_image that it subscribes to  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleNameChangedEvent(self, *args)


    def HandleDataChangedEvent(self, *args):
        """


        Default event handler for ImageDataChangedEvent with Py_XXX parameter User can
        overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_Image, the underlying DM::Image is the same as the
        one it subscribes to  

        Parameters
        ----------
        * `change_flag` :  
            change flag  
        * `img` :  
            a Py_image that it subscribes to  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleDataChangedEvent(self, *args)


    def HandleCalibrationChangedEvent(self, *args):
        """


        Default event handler for ImageCalibrationChangedEvent with Py_XXX parameter
        User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_Image, the underlying DM::Image is the same as the
        one it subscribes to  

        Parameters
        ----------
        * `change_flag` :  
            change flag  
        * `img` :  
            a Py_image that it subscribes to  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleCalibrationChangedEvent(self, *args)


    def HandleShowExtractionEvent(self, *args):
        """


        Default event handler for ImageShowExtractionEvent with Py_XXX parameter User
        can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_Image, the underlying DM::Image is the same as the
        one it subscribes to  

        Parameters
        ----------
        * `change_flag` :  
            change flag  
        * `img` :  
            a Py_image that it subscribes to  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleShowExtractionEvent(self, *args)


    def ImageDisplayHandleROIPropertyChangedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleROIPropertyChangedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleROIPropertyChangedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleROIChangedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleROIChangedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleROIChangedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleROIAddedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleROIAddedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleROIAddedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleROIRemovedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleROIRemovedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleROIRemovedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleROIBeginTrackEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleROIBeginTrackEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleROIBeginTrackEvent(self, img_dsp, client_id)


    def ImageDisplayHandleROIEndTrackEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleROIEndTrackEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleROIEndTrackEvent(self, img_dsp, client_id)


    def ImageDisplayHandleROISelectedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleROISelectedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleROISelectedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleROIDeselectedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleROIDeselectedEven.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleROIDeselectedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleCursorChangedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleCursorChangedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleCursorChangedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleComponentAddedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleComponentAddedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleComponentAddedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleComponentPropertyChangedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleComponentPropertyChangedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleComponentPropertyChangedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleComponentChangedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleComponentChangedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleComponentChangedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleComponentRemovedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleComponentRemovedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleComponentRemovedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleComponentBeginTrackEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleComponentBeginTrackEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleComponentBeginTrackEvent(self, img_dsp, client_id)


    def ImageDisplayHandleComponentEndTrackEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleComponentEndTrackEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleComponentEndTrackEvent(self, img_dsp, client_id)


    def ImageDisplayHandleDisplayKeyEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleDisplayKeyEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleDisplayKeyEvent(self, img_dsp, client_id)


    def ImageDisplayHandleSliceRemovedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleSliceRemovedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleSliceRemovedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleSliceChangedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleSliceChangedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleSliceChangedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleSlicePropertyChangedEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleSlicePropertyChangedEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleSlicePropertyChangedEvent(self, img_dsp, client_id)


    def ImageDisplayHandleUnassociatedClickEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleUnassociatedClickEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleUnassociatedClickEvent(self, img_dsp, client_id)


    def ImageDisplayHandleUnassociatedDBClickEvent(self, img_dsp, client_id):
        """


        Register ImageDisplayHandleUnassociatedDBClickEvent.  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay event to subscibe to  
        * `client_id` :  
            client id to be registered to  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageDisplayHandleUnassociatedDBClickEvent(self, img_dsp, client_id)


    def HandleROIPropertyChangedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleROIPropertyChangedEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flags` :  
            img_disp_event_flags of uint32 type  
        * `Py_ImageDisplay` :  
        * `roi_change_flag` :  
            roi_change_flag of uint32 type  
        * `roi_disp_change_flags` :  
            roi_disp_change_flags of uint32 type  
        * `roi` :  
            Py_ROI  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleROIPropertyChangedEvent(self, *args)


    def HandleROIChangedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleROIChangedEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flags` :  
            img_disp_event_flags of uint32 type  
        * `Py_ImageDisplay` :  
        * `roi_change_flag` :  
            roi_change_flag of uint32 type  
        * `roi_disp_change_flags` :  
            roi_disp_change_flags of uint32 type  
        * `roi` :  
            Py_ROI  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleROIChangedEvent(self, *args)


    def HandleROIAddedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleROIAddedEvent with Py_XXX parameter
        User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flags` :  
            img_disp_event_flags of uint32 type  
        * `Py_ImageDisplay` :  
        * `roi_change_flag` :  
            roi_change_flag of uint32 type  
        * `roi_disp_change_flags` :  
            roi_disp_change_flags of uint32 type  
        * `roi` :  
            Py_ROI  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleROIAddedEvent(self, *args)


    def HandleROIRemovedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleROIRemovedEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flags` :  
            img_disp_event_flags of uint32 type  
        * `Py_ImageDisplay` :  
        * `roi_change_flag` :  
            roi_change_flag of uint32 type  
        * `roi_disp_change_flags` :  
            roi_disp_change_flags of uint32 type  
        * `roi` :  
            Py_ROI  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleROIRemovedEvent(self, *args)


    def HandleROIBeginTrackEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleROIBeginTrackEven with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flags` :  
            img_disp_event_flags of uint32 type  
        * `Py_ImageDisplay` :  
        * `roi_change_flag` :  
            roi_change_flag of uint32 type  
        * `roi_disp_change_flags` :  
            roi_disp_change_flags of uint32 type  
        * `roi` :  
            Py_ROI  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleROIBeginTrackEvent(self, *args)


    def HandleROIEndTrackEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleROIEndTrackEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flags` :  
            img_disp_event_flags of uint32 type  
        * `Py_ImageDisplay` :  
        * `roi_change_flag` :  
            roi_change_flag of uint32 type  
        * `roi_disp_change_flags` :  
            roi_disp_change_flags of uint32 type  
        * `roi` :  
            Py_ROI  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleROIEndTrackEvent(self, *args)


    def HandleROISelectedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleROISelectedEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flags` :  
            img_disp_event_flags of uint32 type  
        * `Py_ImageDisplay` :  
        * `roi_change_flag` :  
            roi_change_flag of uint32 type  
        * `roi_disp_change_flags` :  
            roi_disp_change_flags of uint32 type  
        * `roi` :  
            Py_ROI  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleROISelectedEvent(self, *args)


    def HandleROIDeselectedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleROIDeselectedEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flags` :  
            img_disp_event_flags of uint32 type  
        * `Py_ImageDisplay` :  
        * `roi_change_flag` :  
            roi_change_flag of uint32 type  
        * `roi_disp_change_flags` :  
            roi_disp_change_flags of uint32 type  
        * `roi` :  
            Py_ROI  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleROIDeselectedEvent(self, *args)


    def HandleCursorChangedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleCursorChangedEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp` :  
            Py_ImageDisplay  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleCursorChangedEvent(self, *args)


    def HandleComponentAddedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleComponentAddedEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flags` :  
            image display event flags of uint32 type  
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay  
        * `component_change_flag` :  
            component change flag  
        * `component_disp_change_flags` :  
            component display change flags  
        * `component` :  
            Py_Componenet  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleComponentAddedEvent(self, *args)


    def HandleComponentPropertyChangedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleComponentPropertyChangedEvent with
        Py_XXX parameter User can overwrite this function in Python script window for
        handling ImageNameChangedEvent once it registers to this event. Note: this
        method will return a new copy of the Py_ImageDisplay, the underlying
        DM::ImageDisplay is the same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flag` :  
            image display event flag  
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay  
        * `component_change_flag` :  
            component change flag  
        * `component_disp_change_flags` :  
            component display change flags  
        * `component` :  
            Py_Componenet  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleComponentPropertyChangedEvent(self, *args)


    def HandleComponentChangedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleComponentChangedEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flag` :  
            image display event flag  
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay  
        * `component_change_flag` :  
            component change flag  
        * `component_disp_change_flags` :  
            component display change flags  
        * `component` :  
            Py_Componenet  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleComponentChangedEvent(self, *args)


    def HandleComponentRemovedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleComponentRemovedEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flag` :  
            image display event flag  
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay  
        * `component_change_flag` :  
            component change flag  
        * `component_disp_change_flags` :  
            component display change flags  
        * `component` :  
            Py_Componenet  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleComponentRemovedEvent(self, *args)


    def HandleComponentBeginTrackEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleComponentBeginTrackEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flag` :  
            image display event flag  
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay  
        * `component_change_flag` :  
            component change flag  
        * `component_disp_change_flags` :  
            component display change flags  
        * `component` :  
            Py_Componenet  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleComponentBeginTrackEvent(self, *args)


    def HandleComponentEndTrackEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleComponentEndTrackEvent( with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flag` :  
            image display event flag  
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay  
        * `component_change_flag` :  
            component change flag  
        * `component_disp_change_flags` :  
            component display change flags  
        * `component` :  
            Py_Componenet  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleComponentEndTrackEvent(self, *args)


    def HandleDisplayKeyEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleDisplayKeyEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `Py_ImageDisplay` :  
            a Py_ImageDisplay  
        * `keyObject` :  
            a DM::ScriptObject  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleDisplayKeyEvent(self, *args)


    def HandleSliceRemovedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleSliceRemovedEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event.  

        Parameters
        ----------
        * `img_disp_event_flag` :  
            img_disp_event_flag of uint32 type  
        * `img_disp` :  
            a Py_ImageDisplay  
        * `slice_change_flags` :  
            slice change flags  
        * `slice_disp_change_flags` :  
            slice display change flas  
        * `slice_id_beg` :  
            DM::Scriptobject sice id beginning  
        * `slice_id_end` :  
            DM::Scriptobject slice id end  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleSliceRemovedEvent(self, *args)


    def HandleSliceChangedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleSliceChangedEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flag` :  
            img_disp_event_flag of uint32 type  
        * `img_disp` :  
            a Py_ImageDisplay  
        * `slice_change_flags` :  
            slice change flags  
        * `slice_disp_change_flags` :  
            slice display change flas  
        * `slice_id_beg` :  
            DM::Scriptobject slice id beginning  
        * `slice_id_end` :  
            DM::Scriptobject slice id end  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleSliceChangedEvent(self, *args)


    def HandleSlicePropertyChangedEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleSlicePropertyChangedEven with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flag` :  
            img_disp_event_flag of uint32 type  
        * `img_disp` :  
            a Py_ImageDisplay  
        * `slice_change_flags` :  
            slice change flags  
        * `slice_disp_change_flags` :  
            slice display change flas  
        * `slice_id_beg` :  
            DM::Scriptobject slice id beginning  
        * `slice_id_end` :  
            DM::Scriptobject slice id end  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleSlicePropertyChangedEvent(self, *args)


    def HandleUnassociatedClickEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleUnassociatedClickEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flag` :  
            img_disp_event_flag of uint32 type  
        * `img_disp` :  
            a Py_ImageDisplay  x position of uint32  y position of uint32  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleUnassociatedClickEvent(self, *args)


    def HandleUnassociatedDBClickEvent(self, *args):
        """


        Default event handler for ImageDisplayHandleUnassociatedDBClickEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_ImageDisplay, the underlying DM::ImageDisplay is the
        same as the one it subscribes to  

        Parameters
        ----------
        * `img_disp_event_flag` :  
            img_disp_event_flag of uint32 type  
        * `img_disp` :  
            a Py_ImageDisplay  x position of uint32  y position of uint32  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleUnassociatedDBClickEvent(self, *args)


    def WindowHandleWindowAboutToCloseEvent(self, window, client_id):
        """


        Register WindowHandleWindowAboutToCloseEvent.  

        Parameters
        ----------
        * `Py_Window` :  
            a PyWindow  
        * `client_id` :  
            a client_id of string type  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_WindowHandleWindowAboutToCloseEvent(self, window, client_id)


    def WindowHandleWindowClosedEvent(self, window, client_id):
        """


        Register WindowHandleWindowClosedEvent(.  

        Parameters
        ----------
        * `Py_Window` :  
            a PyWindow  a client_id of string type  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_WindowHandleWindowClosedEvent(self, window, client_id)


    def WindowHandleWindowUpdatedEvent(self, window, client_id):
        """


        Register WindowHandleWindowUpdatedEvent(.  

        Parameters
        ----------
        * `Py_Window` :  
            a PyWindow  a client_id of string type  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_WindowHandleWindowUpdatedEvent(self, window, client_id)


    def WindowHandleWindowBeginDrag(self, window, client_id):
        """


        Register WindowHandleWindowBeginDrag.  

        Parameters
        ----------
        * `Py_Window` :  
            a PyWindow  a client_id of string type  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_WindowHandleWindowBeginDrag(self, window, client_id)


    def WindowHandleWindowMoveOrSize(self, window, client_id):
        """


        Register WindowHandleWindowMoveOrSize.  

        Parameters
        ----------
        * `Py_Window` :  
            a PyWindow  a client_id of string type  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_WindowHandleWindowMoveOrSize(self, window, client_id)


    def WindowHandleWindowEndDrag(self, window, client_id):
        """


        Register WindowHandleWindowEndDrag.  

        Parameters
        ----------
        * `Py_Window` :  
            a PyWindow  a client_id of string type  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_WindowHandleWindowEndDrag(self, window, client_id)


    def HandleWindowAboutToCloseEvent(self, *args):
        """


        Default event handler for WindowHandleWindowAboutToCloseEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_Window, the underlying DM::Window is the same as the
        one it subscribes to  

        Parameters
        ----------
        * `event_flags` :  
            event flags of uint32 type  
        * `Py_Window` :  
            a Py_Window that subscribe event to  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleWindowAboutToCloseEvent(self, *args)


    def HandleWindowClosedEvent(self, *args):
        """


        Default event handler for WindowHandleWindowClosedEvent with Py_XXX parameter
        User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_Window, the underlying DM::Window is the same as the
        one it subscribes to  

        Parameters
        ----------
        * `event_flags` :  
            event flags of uint32 type  
        * `Py_Window` :  
            a Py_Window that subscribe event to  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleWindowClosedEvent(self, *args)


    def HandleWindowUpdatedEvent(self, *args):
        """


        Default event handler for WindowHandleWindowUpdatedEvent with Py_XXX parameter
        User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_Window, the underlying DM::Window is the same as the
        one it subscribes to  

        Parameters
        ----------
        * `event_flags` :  
            event flags of uint32 type  
        * `Py_Window` :  
            a Py_Window that subscribe event to  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleWindowUpdatedEvent(self, *args)


    def HandleWindowBeginDragEvent(self, *args):
        """


        Default event handler for WindowHandleWindowBeginDragEventt with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_Window, the underlying DM::Window is the same as the
        one it subscribes to  

        Parameters
        ----------
        * `event_flags` :  
            event flags of uint32 type  
        * `Py_Window` :  
            a Py_Window that subscribe event to  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleWindowBeginDragEvent(self, *args)


    def HandleWindowMoveOrSizeEvent(self, *args):
        """


        Default event handler for WindowHandleWindowMoveOrSizeEvent with Py_XXX
        parameter User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_Window, the underlying DM::Window is the same as the
        one it subscribes to  

        Parameters
        ----------
        * `event_flags` :  
            event flags of uint32 type  
        * `Py_Window` :  
            a Py_Window that subscribe event to  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleWindowMoveOrSizeEvent(self, *args)


    def HandleWindowEndDragEvent(self, *args):
        """


        Default event handler for WindowHandleWindowEndDragEvent with Py_XXX parameter
        User can overwrite this function in Python script window for handling
        ImageNameChangedEvent once it registers to this event. Note: this method will
        return a new copy of the Py_Window, the underlying DM::Window is the same as the
        one it subscribes to  

        Parameters
        ----------
        * `event_flags` :  
            event flags of uint32 type  
        * `Py_Window` :  
            a Py_Window that subscribe event to  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleWindowEndDragEvent(self, *args)


    def WorkspaceHandleWorkspaceCreated(self):
        """


        Register WorkspaceHandleWorkspaceCreated event.  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_WorkspaceHandleWorkspaceCreated(self)


    def WorkspaceHandleWorkspaceClosed(self):
        """


        Register WorkspaceHandleWorkspaceClosed event.  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_WorkspaceHandleWorkspaceClosed(self)


    def WorkspaceHandleWorkspaceRenamed(self):
        """


        Register WorkspaceHandleWorkspaceRenamed event.  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_WorkspaceHandleWorkspaceRenamed(self)


    def WorkspaceHandleWorkspaceActiveTabChanged(self):
        """


        Register Image WorkspaceHandleWorkspaceActiveTabChanged event.  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_WorkspaceHandleWorkspaceActiveTabChanged(self)


    def HandleWorkspaceCreatedEvent(self, arg0):
        """


        Default event handler for wrokspace HandleWorkspaceCreatedEvent User can
        overwrite this function in Python script window for handling the event once it
        registers to it.  

        Parameters
        ----------
        * `event_flags` :  
            event_flags of uint32 type  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleWorkspaceCreatedEvent(self, arg0)


    def HandleWorkspaceClosedEvent(self, arg0):
        """


        Default event handler for wrokspace HandleWorkspaceClosedEvent User can
        overwrite this function in Python script window for handling the event once it
        registers to it.  

        Parameters
        ----------
        * `event_flags` :  
            event_flags of uint32 type  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleWorkspaceClosedEvent(self, arg0)


    def HandleWorkspaceRenamedEvent(self, arg0):
        """


        Default event handler for wrokspace HandleWorkspaceRenamedEvent User can
        overwrite this function in Python script window for handling the event once it
        registers to it.  

        Parameters
        ----------
        * `event_flags` :  
            event_flags of uint32 type  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleWorkspaceRenamedEvent(self, arg0)


    def HandleWorkspaceActiveTabChangedEvent(self, arg0):
        """


        Default event handler for wrokspace HandleWorkspaceActiveTabChangedEvent User
        can overwrite this function in Python script window for handling the event once
        it registers to it.  

        Parameters
        ----------
        * `event_flags` :  
            event_flags of uint32 type  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleWorkspaceActiveTabChangedEvent(self, arg0)


    def CompoundDocumentHandleLegendButtonPressed(self, compoundDoc):
        """


        Register CompoundDocumentHandleLegendButtonPressed event.  

        Parameters
        ----------
        * `CompoundDocument` :  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_CompoundDocumentHandleLegendButtonPressed(self, compoundDoc)


    def HandleCompoundDocumentLegendButtonPressedEvent(self, arg0, arg1, arg2):
        """


        Default event handler for HandleCompoundDocumentLegendButtonPressedEvent User
        can overwrite this function in Python script window for handling this event once
        it registers to it.  

        Parameters
        ----------
        * `event_flags` :  
            event_flags of uint32 type  
        * `img_doc` :  
            img_doc of DM::CompoundDocument type  
        * `cmd_id` :  
            cmd_id of uint32 type  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleCompoundDocumentLegendButtonPressedEvent(self, arg0, arg1, arg2)


    def HandleCompoundDocumentSaveEvent(self, arg0, arg1, arg2):
        """


        Default event handler for HandleCompoundDocumentLegendButtonPressedEvent User
        can overwrite this function in Python script window for handling this event once
        it registers to it.  

        Parameters
        ----------
        * `event_flags` :  
            event_flags of uint32 type  
        * `img_doc` :  
            img_doc of DM::CompoundDocument type  
        * `cmd_id` :  
            cmd_id of uint32 typ  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleCompoundDocumentSaveEvent(self, arg0, arg1, arg2)


    def ImageOrderHandleFrontImageChangedEvent(self, client_id):
        """


        Register front image changed event.  

        Parameters
        ----------
        * `client_id` :  
            client id of string type  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_ImageOrderHandleFrontImageChangedEvent(self, client_id)


    def HandleFrontImageChangedEvent(self, arg0, arg1):
        """


        Default event handler for HandleFrontImageChangedEvent User can overwrite this
        function in Python script window for handling this event once it registers to
        it.  

        Parameters
        ----------
        * `event_flags` :  
            event_flags of uint32 type  
        * `obj` :  
            object of const DM::Scriptobject type  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleFrontImageChangedEvent(self, arg0, arg1)


    def DMApplicationAboutToCloseEvent(self, client_id):
        """


        register application about to close event.  

        Parameters
        ----------
        * `client_id` :  
            client id of const string tpe  

        Returns
        -------
        subscriber id  

        """
        return _DigitalMicrograph.Py_ScriptObject_DMApplicationAboutToCloseEvent(self, client_id)


    def HandleDMApplicationAboutToCloseEvent(self, arg0, arg1):
        """


        Default event handler for Handle application about to close event User can
        overwrite this function in Python script window for handling this event once it
        registers to it.  

        Parameters
        ----------
        * `event_flags` :  
            event_flags of uint32 type  
        * `obj` :  
            ScriptObject of DM::ScriptObject type  

        """
        return _DigitalMicrograph.Py_ScriptObject_HandleDMApplicationAboutToCloseEvent(self, arg0, arg1)

    def __disown__(self):
        self.this.disown()
        _DigitalMicrograph.disown_Py_ScriptObject(self)
        return weakref_proxy(self)
Py_ScriptObject_swigregister = _DigitalMicrograph.Py_ScriptObject_swigregister
Py_ScriptObject_swigregister(Py_ScriptObject)


def ClearResults():
    """


    Clear result window.  
     e.g. DM.ClearResults()  

    """
    return _DigitalMicrograph.ClearResults()

def Output(argument_1):
    """


    Set text to the set output window.  

    """
    return _DigitalMicrograph.Output(argument_1)

def SetOutputTo(type):
    """


    Set text to the set output window.  
     e.g. DM.SetOutputTo(1) print("Print text to Notes window") DM.SetOutputTo(2)
    print("Print text to Debug window") DM.SetOutputTo(0) print("Print text to
    back to Results window")  

    Parameters
    ----------
    * `type` :  
        - output type: 0 for Results, 1 for Notes, 2 for Debug  

    """
    return _DigitalMicrograph.SetOutputTo(type)

def GetPATH():
    """


    Get system PATH used by the application  
     e.g. path = DM.GetPATH()  

    Returns
    -------
    PATH  

    """
    return _DigitalMicrograph.GetPATH()

def GetPYTHONPATH():
    """


    Get PYTHONPATH used by the application  
     e.g. pythonpath = DM.GetPYTHONPATH()  

    Returns
    -------
    PYTHONPATH  

    """
    return _DigitalMicrograph.GetPYTHONPATH()

def GetPYTHONHOME():
    """


    Get PYTHONHOME used by the application  
     e.g. pythonhome = DM.GetPYTHONHOME()  

    Returns
    -------
    PATHHOME  

    """
    return _DigitalMicrograph.GetPYTHONHOME()

def IsScriptOnMainThread():
    """


    To indicate whether the python script is running in main thread or not.  
     e.g. pythonpath = DM.IsScriptOnMainThread()  

    Returns
    -------
    true if run from main thread, false otherwise.  

    """
    return _DigitalMicrograph.IsScriptOnMainThread()

def DS_DialogEnabled(enabled):
    """


    Enable or disable all dialog buttons and fields in the DigiScan tool dialog.
    This is useful to prevent user interaction during scripted acquisition.  

    Parameters
    ----------
    * `enabled` :  
        - (bool) Enable (1) or disable (0) DigitScan-tool dialog elements  

    """
    return _DigitalMicrograph.DS_DialogEnabled(enabled)

def DS_Restart(scanMode):
    """


    Restart acquisition in the front image if it is a valid DigiScan image. The
    scanMode parameter can be used to change continuous or single frame acquisition.
    The function returns immediately.  

    Parameters
    ----------
    * `scanMode` :  
        - (long) 0 (same as before), 1(single frame) 2 (continuous)  

    """
    return _DigitalMicrograph.DS_Restart(scanMode)

def DS_InvokeAcquisitionButton(buttonID):
    """


    This function is the same as pressing a button in the DigiScan tool dialog. The
    function returns immediately.  

    Parameters
    ----------
    * `buttonID` :  
        - (long) 1(View), 2(Search/Preview), 3(Capture), 4(Stop)  
         5(Spot), 6(Focus), 7(Rotate)  

    """
    return _DigitalMicrograph.DS_InvokeAcquisitionButton(buttonID)

def DS_InvokeAcquisitionButtonEx(buttonID, subValue):
    """


    This function is the same as pressing a button in the DigiScan tool dialog. The
    function returns immediately. For Spot, Focus and Rotate the option parameter
    may be set to 0 (deactivate) or 1 (activate). For Search/Preview the option
    parameter may be set to 0 (Search) or 1 (Preview). For the other buttons the
    option parameter does not have an effect.  

    Parameters
    ----------
    * `buttonID` :  
        - (long) 1(View), 2(Search/Preview), 3(Capture), 4(Stop)  
         5(Spot), 6(Focus), 7(Rotate)  
    * `subValue` :  
        - (long) Optional value for some buttons  

    """
    return _DigitalMicrograph.DS_InvokeAcquisitionButtonEx(buttonID, subValue)

def DS_CreateParameters(*args):
    """


    Create a parameter set for acquiring DigiScan images. You need to specify the
    width, height, subscan width, subscan height, dataType, rotation, sample time
    per pixel and whether to synchronize with the line mains. These parameters are
    all equivalent to what you would do when setting up an acquisition from the
    DigiScan user interface. The function does not verify validity of all
    parameters. The function returns the ID of the parameter set it has generated.
    This value is needed in the other functions. Note that a created parameter set
    and the according ID stay in memory until deleted with DSDeleteParameters() or
    until DigitalMicrograph is closed.  

    Parameters
    ----------
    * `width` :  
        - (long) Scan width in pixels  
    * `height` :  
        - (long) Scan height in pixels  
    * `subScanWidth` :  
        - (long) Sub Scan width in pixels  
    * `subScanHeight` :  
        - (long) Sub Scan height in pixels  
    * `dataType` :  
        - (long) pixel data type size in bytes  
    * `rotation` :  
        - (float) Scan rotation in degrees  
    * `acqTime` :  
        - (float) Pixel dwell-time in microseconds  
    * `lineSynchEnabled` :  
        - (bool) Activate synchronization with line mains  

    Returns
    -------
    (long) ID of the created parameter set  

    """
    return _DigitalMicrograph.DS_CreateParameters(*args)

def DS_DeleteParameters(paramID):
    """


    Delete the parameter set with the parameter ID provided. After deleting it you
    can not re-use the parameter ID.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  

    """
    return _DigitalMicrograph.DS_DeleteParameters(paramID)

def DS_SetParametersSignal(paramID, signalIndex, dataType, selected, imageID):
    """


    Add/Modify a specific signal in the specified, existing parameter set. The
    signal is specified by its index according to the DigiScan setup, and a data
    depth in bytes. To remove a signal from a parameter set, set the parameter
    selected to false. The imageID specifies the image into which the acquired data
    should be stored. If an ID of 0 (zero) is given, the system will either reuse an
    appropriate image or create a new one. Please note that there are certain
    restrictions on what combination of data types can be used when acquiring
    multiple signals (see the DigiScan set-up dialog). These restrictions may not be
    checked for by the software and you may get DMA error messages.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  
    * `signalIndex` :  
        - (long) Signal ID as defined DigiScan setup  
    * `dataType` :  
        - (float) Signal depth in bytes (1, 2 or 4)  
    * `selected` :  
        - (float) Include this signal in acquisition  
    * `imageID` :  
        - (bool) ID of image into which should be acquired. If set to 0,  
         reuse/create appropriate image  

    Returns
    -------
    True if given parameter set could be successfully modified  

    """
    return _DigitalMicrograph.DS_SetParametersSignal(paramID, signalIndex, dataType, selected, imageID)

def DS_StartAcquisition(paramID, continuous, synchronous):
    """


    Start the acquisition with the parameter set of given ID.  
     Either acquire 1 frame (continuous = 0) or multiple frames (continuous = 1).
    The function can return immediately (synchronous = 0) or after the acquisition
    finishes (synchronous = 1). Note that calling the function with both continuous
    and synchronous activated at the same time is generally not advisable and will
    result in an indefinite loop. It may freeze the application when run from the
    main thread.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  
    * `continuous` :  
        - (bool) Continuous, repeated acquisition  
    * `synchronous` :  
        - (bool) Hold script execution until acquisition finishes  

    """
    return _DigitalMicrograph.DS_StartAcquisition(paramID, continuous, synchronous)

def DS_StopAcquisition(paramID):
    """


    Stop the acquisition belonging to the parameter sot of given ID. Use paramID =
    -1 to stop any currently running acquisition.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  

    """
    return _DigitalMicrograph.DS_StopAcquisition(paramID)

def DS_FinishAcquisition():
    """


    Stop the currently running acquisition when the frame has finished. The command
    returns immediately. Note that the current acquisition can be stopped
    immediately with DSStopAcquisition(-1).  

    """
    return _DigitalMicrograph.DS_FinishAcquisition()

def DS_WaitUntilFinished():
    """


    Pause script until DigiScan acquisition has stopped.  

    """
    return _DigitalMicrograph.DS_WaitUntilFinished()

def DS_GetActiveParameterID():
    """


    Return the parameter ID of the DigiScan parameter set currently used during
    acquisition or -1 if no acquisition is running.  

    Returns
    -------
    (long) ParameterID of currently running acquisition (or -1)  

    """
    return _DigitalMicrograph.DS_GetActiveParameterID()

def DS_GetAcquiredImageID(signalIndex):
    """


    Return the image ID of the last image into which data of the specified signal
    was stored, independent of how this acquisition was started (script or user-
    interface button). The function returns the value -1 if no such image could be
    found.  

    Parameters
    ----------
    * `signalIndex` :  
        - (long) Signal ID as defined DigiScan setup  

    Returns
    -------
    (long) ImageID of image containing signal. -1 if no image was found.  

    """
    return _DigitalMicrograph.DS_GetAcquiredImageID(signalIndex)

def DS_GetDoFlip():
    """


    Return the globally defined value of the "Flip Horizontal Scan" property as
    defined in the DigiScan advanced setup dialog. If true (1), images are
    horizontally mirrored along the fast scan direction.  

    Returns
    -------
    (bool) Flip Horizontal Scan property. Either activated (1) or not (0)  

    """
    return _DigitalMicrograph.DS_GetDoFlip()

def DS_GetFlyBackTime():
    """


    Return the globally defined "Flyback Time" in microseconds as defined in the
    DigiScan advanced setup dialog.  

    Returns
    -------
    (double) Flyback Time in microseconds  

    """
    return _DigitalMicrograph.DS_GetFlyBackTime()

def DS_SetFlyBackTime(flyBacktime):
    """


    Set the "Flyback Time" in microseconds. Note that this will change the
    globally defined "Flyback Time" which can also be set via the DigiScan
    advanced setup dialog. It will therefore be valid for all DigiScan acquisitions
    and not only for the currently scripted one.  

    Parameters
    ----------
    * `flyBacktime` :  
        - (double) Flyback Time in microseconds  

    """
    return _DigitalMicrograph.DS_SetFlyBackTime(flyBacktime)

def DS_GetLineFrequency():
    """


    Return the globally defined "Line frequency" in Hertz as defined in the
    DigiScan advanced setup dialog  

    Returns
    -------
    (double) Line frequency in Hertz  

    """
    return _DigitalMicrograph.DS_GetLineFrequency()

def DS_GetRotationOffset():
    """


    Return the globally defined "Rotation Offset" in degree as defined in the
    DigiScan advanced setup dialog. The angle specifies the rotation of the scan
    with respect to the image. A positive value results in clock-wise rotation of
    the image if Flip Horizontal Scan is switched off.  

    Returns
    -------
    (double) Rotation Offset in degree  

    """
    return _DigitalMicrograph.DS_GetRotationOffset()

def DS_GetParameters(paramID):
    """


    Return the parameters of the specified parameter set of given ID into the
    according variables. The function returns false (0) if no parameter set of given
    ID is found and true (1) otherwise.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  
    * `width_out` :  
        - (long) Return: scan width in pixels  
    * `height_out` :  
        - (long) Return: scan height in pixels  
    * `rotation_out` :  
        - (long) Return: scan rotation in degree  
    * `acqTime_out` :  
        - (long) Return: pixel dwell-time in microseconds  
    * `lineSynchEnabled_out` :  
        - (long) Return: synchronization with line mains active (1) or not (0)  

    Returns
    -------
    (bool) Parameter set of given ID does exist  

    """
    return _DigitalMicrograph.DS_GetParameters(paramID)

def DS_ParametersExist(paramID):
    """


    The function returns true (1) if a parameter set of given ID is found and false
    (0) otherwise.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  

    Returns
    -------
    (bool) Parameter set of given ID does exist  

    """
    return _DigitalMicrograph.DS_ParametersExist(paramID)

def DS_GetRotation(*args):
    """


    Return the rotation value (in degree) of the specified parameter set of given
    ID. Do not confuse this with the command DSGetRotation() without a parameter.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  

    Returns
    -------
    (double) Scan rotation in degree  

    """
    return _DigitalMicrograph.DS_GetRotation(*args)

def DS_GetWidth(paramID):
    """


    Return the scan width value (in pixels) of the specified parameter set of given
    ID.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  

    Returns
    -------
    (long) Scan width in pixels  

    """
    return _DigitalMicrograph.DS_GetWidth(paramID)

def DS_GetHeight(paramID):
    """


    Return the scan height value (in pixels) of the specified parameter set of given
    ID.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  

    Returns
    -------
    (long) Scan width in pixels  

    """
    return _DigitalMicrograph.DS_GetHeight(paramID)

def DS_GetSignalAcquired(paramID, signalIndex):
    """


    Return if the specified signal is acquired in the specified parameter set of
    given ID.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  
    * `signalIndex` :  
        - (long) Signal ID as defined DigiScan setup  

    Returns
    -------
    (bool) The signal is acquired in the parameter set  

    """
    return _DigitalMicrograph.DS_GetSignalAcquired(paramID, signalIndex)

def DS_PixelTime(paramID):
    """


    Return the rotation value (in microseconds) of the specified parameter set of
    given ID. Do not confuse this with the command DSGetPixelTime() without a
    parameter.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  

    Returns
    -------
    (double) pixel dwell-time in microseconds  

    """
    return _DigitalMicrograph.DS_PixelTime(paramID)

def DS_LineSynch(paramID):
    """


    Return whether or not LineSynch is enabled in the specified parameter set of
    given ID.  

    Parameters
    ----------
    * `paramID` :  
        - (long) ID number of parameter set  

    Returns
    -------
    (bool) True (1) if LineSynch is enabled  

    """
    return _DigitalMicrograph.DS_LineSynch(paramID)

def DS_IsViewActive():
    """


    Return if DigitScan is actively acquiring data.  

    Returns
    -------
    (bool) True (1) if DigiScan is currently acquiring  

    """
    return _DigitalMicrograph.DS_IsViewActive()

def DS_CountSignals():
    """


    Return number of available signals from the DigiScan unit.  

    Returns
    -------
    (long) Number of available signals  

    """
    return _DigitalMicrograph.DS_CountSignals()

def DS_GetMaxPixelTime():
    """


    Return the longest pixel dwell-time (in microseconds) allowed for the device.  

    Returns
    -------
    (double) Pixel dwell-time in microseconds  

    """
    return _DigitalMicrograph.DS_GetMaxPixelTime()

def DS_GetMinPixelTime(signal_depth, nChennels):
    """


    Return the shortest pixel dwell-time (in microseconds) allowed for the device
    for the given data depth (1, 2 or 4 byte) and number of digitized signals.  

    Parameters
    ----------
    * `signal_depth` :  
        - (long) Data depth of digitized signal  
    * `nChennels` :  
        - (long) Number of different signals  

    Returns
    -------
    (double) Pixel dwell-time in microseconds  

    """
    return _DigitalMicrograph.DS_GetMinPixelTime(signal_depth, nChennels)

def DS_GetMaxSignal(card, depth, time):
    """


    Return the maximum signal value which may be returned for an acquisition of
    given pixel dwell-time (in microseconds) and data depth (1, 2 or 4 byte). The
    parameter CardID is only used for DigiScan1 devices.  

    Parameters
    ----------
    * `card` :  
        - (short) CardID (DigiScan1 only)  
    * `depth` :  
        - (short) Data depth of digitized signal  
    * `time` :  
        - (float) Pixel dwell-time in microseconds  

    Returns
    -------
    (double) Maximum signal value  

    """
    return _DigitalMicrograph.DS_GetMaxSignal(card, depth, time)

def DS_GetScanControl():
    """


    Returns whether or not DigiScan has control of the electron beam.  

    Returns
    -------
    (bool) True (1) if DigiScan is controlling the beam  

    """
    return _DigitalMicrograph.DS_GetScanControl()

def DS_GetBeamDSPosition():
    """


    Return the current beam position in the DigiScan (DS) coordinate system. Note
    that the beam will only be there, if DigiScan is controlling the beam. See also
    DSHasScanControl() and DSSetScanControl().  

    Parameters
    ----------
    * `x` :  
        - (double) Return: X coordinate in DS coordinate system  
    * `y` :  
        - (double) Return: Y coordinate in DS coordinate system  

    """
    return _DigitalMicrograph.DS_GetBeamDSPosition()

def DS_MoveBeamTo(ds_x, ds_y):
    """


    Set the beam to the specified position given by X/Y in the DigiScan (DS)
    coordinate system. Note that the beam will only be physically moved, if DigiScan
    is controlling the beam. See also DSHasScanControl() and DSSetScanControl().
    There is a slight speed advantage of DSSetBeamDSPosition() over
    DSPositionBeam().  

    Parameters
    ----------
    * `ds_x` :  
        - (double) Return: X coordinate in DS coordinate system  
    * `ds_y` :  
        - (double) Return: Y coordinate in DS coordinate system  

    """
    return _DigitalMicrograph.DS_MoveBeamTo(ds_x, ds_y)

def DS_SetBeamToSafePosition():
    """


    Set the beam to the Beam Safe Position as specified in the advanced DigiScan
    setup dialog. Note that the beam will only be physically moved, if DigiScan is
    controlling the beam. See also DSHasScanControl() and DSSetScanControl().  

    """
    return _DigitalMicrograph.DS_SetBeamToSafePosition()

def DS_SetBeamSafePosition(safePosX, safePosY):
    """


    Set the Beam Safe Position as specified in the advanced DigiScan setup dialog.
    Note that the beam will not be physically moved, only the setting will be
    updated.  

    """
    return _DigitalMicrograph.DS_SetBeamSafePosition(safePosX, safePosY)
class Py_Microscope(_object):
    """


    """

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Py_Microscope, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Py_Microscope, name)
    __repr__ = _swig_repr

    def __init__(self):
        """


        Constructor that creates a Py_Microscope.  

        """
        this = _DigitalMicrograph.new_Py_Microscope()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DigitalMicrograph.delete_Py_Microscope
    __del__ = lambda self: None

    def CanGetCameraLength(self):
        """


        Return if the current microscope communication allows access to the camera
        length. A positive check does not imply that the camera length is currently
        available as the current operation mode may prevent a meaningful camera length
        readout.  
         e.g. DM.Py_Microscope().CanGetCameraLength()  

        Returns
        -------
        bool | Microscope is capable of returning a camera length value to
        DigitalMicrograph  

        """
        return _DigitalMicrograph.Py_Microscope_CanGetCameraLength(self)


    def CanGetHighTension(self):
        """


        Return if the current microscope communication allows access to the accelerating
        voltage.  
         e.g. DM.Py_Microscope().CanGetHighTension()  

        Returns
        -------
        bool | Microscope is capable of returning the accelerating voltage to
        DigitalMicrograph  

        """
        return _DigitalMicrograph.Py_Microscope_CanGetHighTension(self)


    def CanGetIlluminationMode(self):
        """


        Return if the current microscope communication allows access to the current mode
        of the illumination lens system. If true, the current mode can be retrieved with
        the EMGetIlluminationMode() command, and a list of available modes can be
        retrieved with the EMGetIlluminationModes() command.  
         e.g. DM.Py_Microscope().CanGetIlluminationMode()  

        Returns
        -------
        bool | Microscope is capable of returning the current illumination mode to
        DigitalMicrograph  

        """
        return _DigitalMicrograph.Py_Microscope_CanGetIlluminationMode(self)


    def CanGetImagingOpticsMode(self):
        """


        Return if the current microscope communication allows access to the current mode
        of the imaging optics lens system. If true, the current mode con be retrieved
        with the EMGetImagingOpticsMode() command, and a list of available modes can be
        retrieved with the EMGetImagingOpticsModes() command.  
         e.g. DM.Py_Microscope().CanGetImagingOpticsMode()  

        Returns
        -------
        bool | Microscope is capable of returning the current imaging mode to
        DigitalMicrograph  

        """
        return _DigitalMicrograph.Py_Microscope_CanGetImagingOpticsMode(self)


    def CanGetMagnification(self):
        """


        Return if the current microscope communication allows access to the
        magnification. A positive check does not imply that the magnification is
        currently available as the current operation mode may prevent a meaningful
        magnification readout.  
         e.g. DM.Py_Microscope().CanGetMagnification()  

        Returns
        -------
        bool | Microscope is capable of returning a magnification value to
        DigitalMicrograph  

        """
        return _DigitalMicrograph.Py_Microscope_CanGetMagnification(self)


    def ChangeBeamShift(self, xAmount, yAmount):
        """


        Change the beam shift values by the given amount along the shift X and the shift
        Y axes. The parameters are given in raw units as used by the microscope specific
        communication interface.  
         e.g. shiftX, shiftY = DM.Py_Microscope().GetCalibratedBeamShift()  

        Parameters
        ----------
        * `xAmount` :  
            - (double) Change of beam shift X value in raw units, not calibrated  
        * `yAmount` :  
            - (double) Change of beam shift Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeBeamShift(self, xAmount, yAmount)


    def ChangeBeamTilt(self, xAmount, yAmount):
        """


        Change the beam tilt values by the given amount along the tilt X and the tilt Y
        axes. The parameters are given in raw units as used by the microscope specific
        communication interface.  
         e.g. tiltX, tiltY = DM.Py_Microscope().GetCalibratedBeamTilt()  

        Parameters
        ----------
        * `xAmount` :  
            - (double) Change of beam tilt X value in raw units, not calibrated  
        * `yAmount` :  
            - (double) Change of beam tilt Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeBeamTilt(self, xAmount, yAmount)


    def ChangeCalibratedBeamShift(self, xAmount, yAmount):
        """


        Change the beam shift values by the given amount along the shift X and the shift
        Y axes. The parameters are given in calibrated units according to the stored
        calibration. If no calibration is found for the current operation mode, the
        command throws an error message and displays an according dialog.  
         e.g. DM.Py_Microscope().ChangeBeamShift(50, 50)  

        Parameters
        ----------
        * `xAmount` :  
            - (double) Change of beam shift X value in calibrated units  
        * `yAmount` :  
            - (double) Change of beam shift Y value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeCalibratedBeamShift(self, xAmount, yAmount)


    def ChangeCalibratedBeamTilt(self, xAmount, yAmount):
        """


        Change the beam tilt values by the given amount along the tilt X and the tilt Y
        axes. The parameters are given in calibrated units according to the stored
        calibration. If no calibration is found for the current operation mode, the
        command throws an error message and displays an according dialog.  
         e.g. tiltX, tiltY = DM.Py_Microscope().GetCalibratedBeamTilt()  
         DM.Py_Microscope().ChangeBeamTilt(tiltX+1, tiltY+1)  

        Parameters
        ----------
        * `xAmount` :  
            - (double) Change of beam shift X value in calibrated units  
        * `yAmount` :  
            - (double) Change of beam shift Y value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeCalibratedBeamTilt(self, xAmount, yAmount)


    def ChangeCalibratedCondenserStigmation(self, xAmount, yAmount):
        """


        Change the stigmator values of the condenser lens by the given amount along the
        X and Y axes. The parameters are given in calibrated units according to the
        stored calibration. If no calibration is found for the current operation mode,
        the command throws an error message and displays an according dialog  
         e.g. DM.Py_Microscope().ChangeCalibratedCondenserStigmation(100, 101)  

        Parameters
        ----------
        * `xAmount` :  
            - (double) Change of condenser stigmator X value in calibrated units  
        * `yAmount` :  
            - (double) Change of condenser stigmator X value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeCalibratedCondenserStigmation(self, xAmount, yAmount)


    def ChangeCalibratedFocus(self, amount):
        """


        Change the focus value by the given amount. The parameter amount is given in
        calibrated units according to the stored calibration. If no calibration is found
        for the current operation mode, the command throws an error message and displays
        an according dialog.  
         e.g. DM.Py_Microscope()..ChangeCalibratedFocus(50)  

        Parameters
        ----------
        * `amount` :  
            - (double) Change of focus value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeCalibratedFocus(self, amount)


    def ChangeCalibratedImageShift(self, xAmount, yAmount):
        """


        Change the image shift values by the given amount along the shift X and the
        shift Y axes. The parameters are given in calibrated units according to the
        stored calibration. If no calibration is found for the current operation mode,
        the command throws an error message and displays an according dialog.  
         e.g. DM.Py_Microscope().ChangeCalibratedImageShift(50, 50)  

        Parameters
        ----------
        * `xAmount` :  
            - (double) Change of image shift X value in calibrated units  
        * `yAmount` :  
            - (double) Change of image shift Y value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeCalibratedImageShift(self, xAmount, yAmount)


    def ChangeCalibratedObjectiveStigmation(self, xAmount, yAmount):
        """


        Change the stigmator values of the objective lens by the given amount along the
        X and Y axes. The parameters are given in calibrated units according to the
        stored calibration. If no calibration is found for the current operation mode,
        the command throws an error message and displays an according dialog  
         e.g. DM.Py_Microscope().ChangeCalibratedObjectiveStigmation(51, 51)  

        Parameters
        ----------
        * `xAmount` :  
            - (double) Change of objective stigmator X value in calibrated units  
        * `yAmount` :  
            - (double) Change of objective stigmator X value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeCalibratedObjectiveStigmation(self, xAmount, yAmount)


    def ChangeCondenserStigmation(self, xAmount, yAmount):
        """


        Change the stigmator values of the condenser lens by the given amount along the
        X and Y axes. The parameters are given in raw units as used by the microscope
        specific communication interface.  
         e.g. DM.Py_Microscope().ChangeCondenserStigmation(51, 51)  

        Parameters
        ----------
        * `xAmount` :  
            - (double) Change of condenser stigmator X value in raw units, not
            calibrated  
        * `yAmount` :  
            - (double) Change of condenser stigmator Y value in raw units, not
            calibrateds  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeCondenserStigmation(self, xAmount, yAmount)


    def ChangeFocus(self, amount):
        """


        Change the focus value by the given amount. The parameter amount is given in raw
        units as used by the microscope specific communication interface.  
         e.g. DM.Py_Microscope().ChangeFocus(50)  

        Parameters
        ----------
        * `amount` :  
            - (double) Change of focus value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeFocus(self, amount)


    def ChangeImageShift(self, xAmount, yAmount):
        """


        The parameters are given in raw units as used by the microscope specific
        communication interface.  
         e.g. DM.Py_Microscope().ChangeImageShift(55, 55)  

        Parameters
        ----------
        * `xAmount` :  
            - (double) Change the image shift values by the given amount along the shift
            X and the shift Y axes.  
        * `yAmount` :  
            - (double) Change of image shift Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeImageShift(self, xAmount, yAmount)


    def ChangeObjectiveStigmation(self, xAmount, yAmount):
        """


        Change the stigmator values of the objective lens by the given amount along the
        X and Y axes.  


         e.g. DM.Py_Microscope().ChangeObjectiveStigmation(58, 58)  

        Parameters
        ----------
        * `xAmount` :  
            - (double) Change of objective stigmator X value in raw units, not
            calibrated  
        * `yAmount` :  
            - (double) The parameters are given in raw units as used by the microscope  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeObjectiveStigmation(self, xAmount, yAmount)


    def ChangeProjectorShift(self, xamount, yamount):
        """


        Change the projector shift values by the given amount along the shift X and the
        shift Y axes. The parameters are given in raw units as used by the microscope
        specific communication interface.  


         e.g. DM.Py_Microscope().ChangeProjectorShift(60, 60)  

        Parameters
        ----------
        * `xAmount` :  
            - (double) Change of objective stigmator X value in raw units, not
            calibrated  
        * `yAmount` :  
            - (double) The parameters are given in raw units as used by the microscope  

        """
        return _DigitalMicrograph.Py_Microscope_ChangeProjectorShift(self, xamount, yamount)


    def GetBeamShift(self):
        """


        Read the current beam shift values into the provided number variables. The
        values are given in raw units along the beam shift X and beam shift Y axes as
        used by the microscope specific communication interface.  


         e.g. shiftX, shiftY = DM.Py_Microscope().GetBeamShift()  

        Parameters
        ----------
        * `shiftX` :  
            - (double out parameter) Beam shift X value in raw units, not calibrated  
        * `shiftY` :  
            - (double out parameter) Beam shift Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_GetBeamShift(self)


    def GetBeamTilt(self):
        """


        Read the current beam tilt values into the provided number variables. The values
        are given in raw units along the beam tilt X and beam tilt Y axes as used by the
        microscope specific communication interface.  


         e.g. tiltX, tiltY = DM.Py_Microscope().GetBeamTilt()  

        Parameters
        ----------
        * `tiltX` :  
            - (double out parameter) Beam tilt X value in raw units, not calibrated  
        * `tiltY` :  
            - (double out parameter) Beam tilt Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_GetBeamTilt(self)


    def GetBrightness(self):
        """


        Return the current brightness value in raw units as used by the microscope
        specific communication interface.  


         e.g. brightness = DM.Py_Microscope().GetBrightness()  

        Returns
        -------
        Brightness value (double) in raw units  

        """
        return _DigitalMicrograph.Py_Microscope_GetBrightness(self)


    def GetCalibratedBeamShift(self):
        """


        Read the current beam shift values into the provided number variables. The
        values are given in calibrated units according to the stored calibration. If no
        calibration is found for the current operation mode, the command throws an error
        message and displays an according dialog.  


         e.g. shiftX, shiftY = DM.Py_Microscope().GetBeamShift()  

        Parameters
        ----------
        * `shiftX` :  
            - (double out parameter) Beam shift X value in calibrated units  
        * `shiftY` :  
            - (double out parameter) Beam shift Y value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_GetCalibratedBeamShift(self)


    def GetCalibratedBeamTilt(self):
        """


        Read the current beam tilt values into the provided number variables. The values
        are given in calibrated units according to the stored calibration. If no
        calibration is found for the current operation mode, the command throws an error
        message and displays an according dialog..  


         e.g. tiltX, tiltY = DM.Py_Microscope().GetBeamTilt()  

        Parameters
        ----------
        * `tiltX` :  
            - (double out parameter) Beam tilt X value in calibrated units  
        * `tiltY` :  
            - (double out parameter) Beam tilt Y value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_GetCalibratedBeamTilt(self)


    def GetCalibratedCameraLength(self, deviceLocationIn, stateInfoIn, matchOptions):
        """


        Return the current camera length in calibrated units according to the stored
        calibration. If no calibration is found applying 'matchOptions' interpolation,
        the command returns false. Otherwise, it returns true and stores the calibrated
        camera length in the calCL variable. The input parameter deviceLocation
        describes the position of the detector and can be retrieved by script command of
        the detector (e.g. using CameraGetDeviceLocation()or DSGetDeviceLocation()) The
        stateInfo TagGroup is returned by the command EMGetCalibrationStateTags(). The
        command throws an error if the microscope is not in a mode in which camera
        length has a meaningful value.  

        Parameters
        ----------
        * `deviceLocation` :  
            - (string) String which describes position of detector/camera as derived by
            command.  
        * `stateInfo` :  
            - (Py_TagGroup) StateInfo tags as retrieved by command  
        * `actualCameraLength` :  
            - (double out parameter) Return: Calibrated camera length value  
        * `matchOptions` :  
            - (long) Allowed interpolation options (cumulative):  
             0 ... only exact matches  
             1 ... approximate HT allowed  
             2 ... interpolation of camera length entries allowed  

        Returns
        -------
        (long) True (1) if a calibrated camera length was retrieved  

        """
        return _DigitalMicrograph.Py_Microscope_GetCalibratedCameraLength(self, deviceLocationIn, stateInfoIn, matchOptions)


    def GetCalibratedCondenserStigmation(self):
        """


        Read the current Condenser lens stigmator values into the provided number
        variables. The values are given in calibrated units according to the stored
        calibration. If no calibration is found for the current operation mode, the
        command throws an error message and displays an according dialog.  


         e.g. stigX, stigY = DM.Py_Microscope().GetCalibratedCondenserStigmation()  

        Parameters
        ----------
        * `stigX` :  
            - (double out parameter) Condenser lens stigmator X value in calibrated
            units  
        * `stigY` :  
            - (double out parameter) Condenser lens stigmator Y value in calibrated
            units  

        """
        return _DigitalMicrograph.Py_Microscope_GetCalibratedCondenserStigmation(self)


    def GetCalibratedFieldOfView(self, deviceLocationIn, stateInfoIn, matchOptions):
        """


        Return the current STEM field-of-view (FOV) in calibrated units according to the
        stored calibration. If no calibration is found applying 'matchOptions'
        interpolation, the command returns false. Otherwise, it returns true and stores
        the calibrated FOV in the calFOV variable. The input parameter deviceLocation
        describes the position of the detector and can be retrieved by script command of
        the detector (e.g. using CameraGetDeviceLocation()or DSGetDeviceLocation()). The
        stateInfo TagGroup is returned by the command EMGetCalibrationStateTags(). The
        command throws an error if the microscope is not in a mode in which STEM FOV has
        a meaningful value.  

        Parameters
        ----------
        * `deviceLocation` :  
            - (string) String which describes position of detector/camera as derived by
            command.  
        * `stateInfo` :  
            - (Py_TagGroup) StateInfo tags as retrieved by command  
        * `actualCameraLength` :  
            - (double out parameter) Return: Calibrated FOV value  
        * `matchOptions` :  
            - (long) Allowed interpolation options (cumulative):  
             0 ... only exact matches  
             1 ... approximate HT allowed  
             2 ... interpolation of FOV entries allowed  

        Returns
        -------
        (long) True (1) if a calibrated FOV was retrieved  

        """
        return _DigitalMicrograph.Py_Microscope_GetCalibratedFieldOfView(self, deviceLocationIn, stateInfoIn, matchOptions)


    def GetCalibratedFocus(self):
        """


        Return the current focus in calibrated units according to the stored
        calibration. If no calibration is found for the current operation mode, the
        command throws an error message and displays an according dialog.nd.  
         e.g. focus = DM.Py_Microscope().GetCalibratedFocus()  

        Returns
        -------
        Focus value (double) in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_GetCalibratedFocus(self)


    def GetCalibratedImageShift(self):
        """


        Read the current image shift values into the provided number variables. The
        values are given in calibrated units according to the stored calibration. If no
        calibration is found for the current operation mode, the command throws an error
        message and displays an according dialog.  


         e.g. shiftX, shiftY = DM.Py_Microscope().GetCalibratedImageShift()  

        Parameters
        ----------
        * `shiftX` :  
            - (double out parameter) Image shift X value in calibrated units  
        * `shiftY` :  
            - (double out parameter) Image shift Y value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_GetCalibratedImageShift(self)


    def GetCalibratedMag(self, deviceLocationIn, stateInfoIn, matchOptions):
        """


        Return the current TEM magnification in calibrated units according to the stored
        calibration. If no calibration is found applying 'matchOptions' interpolation,
        the command returns false. Otherwise, it returns true and stores the calibrated
        magnification in the calMag variable. The input parameter deviceLocation
        describes the position of the detector and can be retrieved by script command of
        the detector (e.g. using CameraGetDeviceLocation()or DSGetDeviceLocation()) The
        stateInfo TagGroup is returned by the command EMGetCalibrationStateTags(). The
        command throws an error if the microscope is not in a mode in which TEM
        magnification has a meaningful value.  


         e.g. tagGroup = DM.Py_Microscope().GetCalibrationStateTags()  
         returnVal, GetCalibratedMag= DM.Py_Microscope().GetCalibratedMag('HIGHRES',
        tagGroup, 1)  

        Parameters
        ----------
        * `deviceLocation` :  
            - (string) String which describes position of detector/camera as derived by
            command.  
        * `stateInfo` :  
            - (Py_TagGroup) StateInfo tags as retrieved by command  
        * `actualMag` :  
            - (double out parameter) Return: Calibrated magnification value  
        * `matchOptions` :  
            - (long) Allowed interpolation options (cumulative):  
             0 ... only exact matches  
             1 ... approximate HT allowed  
             2 ... interpolation of magnification entries allowed  

        Returns
        -------
        (long) True (1) if a calibrated magnification was retrieved  

        """
        return _DigitalMicrograph.Py_Microscope_GetCalibratedMag(self, deviceLocationIn, stateInfoIn, matchOptions)


    def GetCalibratedObjectiveStigmation(self):
        """


        Read the current objective lens stigmator values into the provided number
        variables. The values are given in calibrated units according to the stored
        calibration. If no calibration is found for the current operation mode, the
        command throws an error message and displays an according dialog.  


         e.g. stigX, stigY = DM.Py_Microscope().GetCalibratedObjectiveStigmation()  

        Parameters
        ----------
        * `stigX` :  
            - (double out parameter) Objective lens stigmator X value in calibrated
            units  
        * `stigY` :  
            - (double out parameter) Objective lens stigmator Y value in calibrated
            units  

        """
        return _DigitalMicrograph.Py_Microscope_GetCalibratedObjectiveStigmation(self)


    def GetCalibrationStateTags(self):
        """


        Return the currently cached microscope state as a TagGroup. Use
        EMUpdateCalibrationState()to force an update of the cache. The returned TagGroup
        is needed as input in some commands like EMGetCalibratedMag(),
        EMGetCalibratedCameraLength() and EMGetCalibratedFOV().  
         e.g. tagGroup = DM.Py_Microscope().GetCalibrationStateTags()  

        Returns
        -------
        Cached microscope state (Py_TagGroup)  

        """
        return _DigitalMicrograph.Py_Microscope_GetCalibrationStateTags(self)


    def GetCameraLength(self):
        """


        Return the camera length in raw units as used by the microscope specific
        communication interface, provided the camera length is meaningful in the current
        operation mode. Otherwise, an error is thrown and a dialog is displayed.  
         e.g. cameraLength = DM.Py_Microscope().GetCameraLength()  

        Returns
        -------
        Camera length value (double) in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_GetCameraLength(self)


    def GetCondenserStigmation(self):
        """


        Read the current condenser lens stigmator values into the provided number
        variables. The values are given in raw units as used by the microscope specific
        communication interface.  


         e.g. stigX, stigY = DM.Py_Microscope().GetCondenserStigmation()  

        Parameters
        ----------
        * `stigX` :  
            - (double out parameter) Condenser lens stigmator X value in raw units, not
            calibrated  
        * `stigY` :  
            - (double out parameter) Condenser lens stigmator Y value in raw units, not
            calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_GetCondenserStigmation(self)


    def GetFocus(self):
        """


        Return the current focus in raw units as used by the microscope specific
        communication interface.  
         e.g. focus = DM.Py_Microscope().GetFocus()  

        Returns
        -------
        Focus value (double) in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_GetFocus(self)


    def GetHighTension(self):
        """


        Return the current accelerating voltage in Volt.  
         e.g. highTension = DM.Py_Microscope().GetHighTension()  

        Returns
        -------
        Acceleration voltage (double) in Volt  

        """
        return _DigitalMicrograph.Py_Microscope_GetHighTension(self)


    def GetIlluminationMode(self):
        """


        Return the current mode of the illumination lens system.  
         e.g. GetIlluminationMode = DM.Py_Microscope().GetIlluminationMode()  

        Returns
        -------
        Mode of the illumination lens system  

        """
        return _DigitalMicrograph.Py_Microscope_GetIlluminationMode(self)


    def GetIlluminationModes(self):
        """


        Return all available modes of the illumination lens system as a TagGroup.  
         e.g. tagGroup = DM.Py_Microscope().GetIlluminationModes()  

        Returns
        -------
        List of all available modes of the illumination lens system (Py_TagGroup)  

        """
        return _DigitalMicrograph.Py_Microscope_GetIlluminationModes(self)


    def GetImageShift(self):
        """


        Read the current image shift values into the provided number variables. The
        values are given in raw units as used by the microscope specific communication
        interface.  


         e.g. shiftX, shiftY = DM.Py_Microscope().GetImageShift()  

        Parameters
        ----------
        * `shiftX` :  
            - (double out parameter) Image shift X value in raw units, not calibrated  
        * `shiftY` :  
            - (double out parameter) Image shift Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_GetImageShift(self)


    def GetImagingOpticsMode(self):
        """


        Return the current mode of the imaging optics lens system.  
         e.g. GetImagingOpticsMode = DM.Py_Microscope().GetImagingOpticsMode()  

        Returns
        -------
        Mode of the imaging optics lens system (string)  

        """
        return _DigitalMicrograph.Py_Microscope_GetImagingOpticsMode(self)


    def GetImagingOpticsModes(self):
        """


        Return all available modes of the imaging optics lens system as a TagGroup.  
         e.g. tagGroup = DM.Py_Microscope().GetImagingOpticsModes()  

        Returns
        -------
        List of all available modes of the imaging optics lens system (Py_TagGroup)  

        """
        return _DigitalMicrograph.Py_Microscope_GetImagingOpticsModes(self)


    def GetMagIndex(self):
        """


        Return the current magnification as an index in the list of available
        magnifications for the current operation mode  
         e.g. magIndex = DM.Py_Microscope().GetMagIndex()  

        Returns
        -------
        Index of current magnification in the list of available magnifications (long)  

        """
        return _DigitalMicrograph.Py_Microscope_GetMagIndex(self)


    def GetMagnification(self):
        """


        Return the current magnification in raw units as used by the microscope specific
        communication interface, provided the magnification is meaningful in the current
        operation mode. Otherwise, an error is thrown and a dialog is displayed.  
         e.g. magnification = DM.Py_Microscope().GetMagnification()  

        Returns
        -------
        Magnification in raw units, not calibrated (double)  

        """
        return _DigitalMicrograph.Py_Microscope_GetMagnification(self)


    def GetMicroscopeName(self):
        """


        eturn the name of the microscope.  
         e.g. GetMicroscopeName = DM.Py_Microscope().GetMicroscopeName()  

        Returns
        -------
        Name of the microscope (string)  

        """
        return _DigitalMicrograph.Py_Microscope_GetMicroscopeName(self)


    def GetObjectiveStigmation(self):
        """


        Read the current objective lens stigmator values into the provided number
        variables. The values are given in raw units as used by the microscope specific
        communication interface.  


         e.g. stigX, stigY = DM.Py_Microscope().GetObjectiveStigmation()  

        Parameters
        ----------
        * `stigX` :  
            - (double out parameter) IObjective lens stigmator X value in raw units, not
            calibrated  
        * `stigY` :  
            - (double out parameter) Objective lens stigmator Y value in raw units, not
            calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_GetObjectiveStigmation(self)


    def GetOperationMode(self):
        """


        Return the current operation mode of the microscope, i.e imaging, scanning or
        diffraction.  
         e.g. GetOperationMode = DM.Py_Microscope().GetOperationMode()  

        Returns
        -------
        Operation mode of the microscope (string)  

        """
        return _DigitalMicrograph.Py_Microscope_GetOperationMode(self)


    def GetProjectorShift(self):
        """


        Read the current projector shift values into the provided number variables. The
        values are given in raw units as used by the microscope specific communication
        interface.  


         e.g. shiftX, shiftY = DM.Py_Microscope().GetProjectorShift()  

        Parameters
        ----------
        * `shiftX` :  
            - (double out parameter) Projector shift X value in raw units, not
            calibrated  
        * `shiftY` :  
            - (double out parameter) Projector shift Y value in raw units, not
            calibrated raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_GetProjectorShift(self)


    def GetScreenPosition(self):
        """


        Return the current position of the fluorescent screen as an index.  
         e.g. screenPos = DM.Py_Microscope().GetScreenPosition()  

        Returns
        -------
        Position index of the fluorescent screen (short)  

        """
        return _DigitalMicrograph.Py_Microscope_GetScreenPosition(self)


    def GetSpotSize(self):
        """


        Return the current spot size as an index.  
         e.g. spotPos = DM.Py_Microscope().GetSpotSize()  

        Returns
        -------
        Spot size index (double)  

        """
        return _DigitalMicrograph.Py_Microscope_GetSpotSize(self)


    def GetStageAlpha(self):
        """


        Return the current stage alpha tilt in degrees.  
         e.g. stageAlpha = DM.Py_Microscope().GetStageAlpha()  

        Returns
        -------
        Stage tilt alpha, in degrees (double)  

        """
        return _DigitalMicrograph.Py_Microscope_GetStageAlpha(self)


    def GetStageBeta(self):
        """


        Return the current stage beta tilt in degrees.  
         e.g. stageBeta = DM.Py_Microscope().GetStageBeta()  

        Returns
        -------
        Stage tilt beta, in degrees (double)  

        """
        return _DigitalMicrograph.Py_Microscope_GetStageBeta(self)


    def GetStagePositions(self, axisFlags):
        """


        Read the current stage positions into the provided variables. The cumulative
        flag axisFlags is used to specify which axes are read, For example, axixFlags=11
        reads x(1), y(2) and alpha(8).  
         e.g. x, y, z, a, b = DM.Py_Microscope().GetStagePositions(1);  

        Parameters
        ----------
        * `axisFlags` :  
            - (long) Cumulative flag of queried axes: x=1 , y=2, z=4, alpha=8, beta=16  
        * `x` :  
            - (double out parameter) Return: Stage X, in micrometer  
        * `y` :  
            - (double out parameter) Return: Stage Y, in micrometer  
        * `z` :  
            - (double out parameter) Return: Stage Z, in micrometer  
        * `a` :  
            - (double out parameter) Return: Stage tilt alpha, in degrees  
        * `b` :  
            - (double out parameter) Return: Stage tilt beta, in degrees  

        """
        return _DigitalMicrograph.Py_Microscope_GetStagePositions(self, axisFlags)


    def GetStageXY(self):
        """


        Read the current stage X and stage Y values into the provided variables. Values
        are in micrometer.  
         e.g. x, y = DM.Py_Microscope().GetStageXY()  

        Parameters
        ----------
        * `x` :  
            - (double out parameter) Return: Stage X, in micrometer  
        * `y` :  
            - (double out parameter) Return: Stage Y, in micrometer  

        """
        return _DigitalMicrograph.Py_Microscope_GetStageXY(self)


    def GetStageX(self):
        """


        Return the current stage X value in micrometer.  
         e.g. x = DM.Py_Microscope().GetStageX()  

        Returns
        -------
        Stage X, in micrometer (double)  

        """
        return _DigitalMicrograph.Py_Microscope_GetStageX(self)


    def GetStageY(self):
        """


        Stage Y, in micrometer  
         e.g. y = DM.Py_Microscope().GetStageY()  

        Returns
        -------
        Stage Y, in micrometer (double)  

        """
        return _DigitalMicrograph.Py_Microscope_GetStageY(self)


    def GetStageZ(self):
        """


        Return the current stage Z value in micrometer.  
         e.g. z = DM.Py_Microscope().GetStageZ()  

        Returns
        -------
        Stage Z, in micrometer (double)  

        """
        return _DigitalMicrograph.Py_Microscope_GetStageZ(self)


    def GetCondenserAperture(self):
        """


        Return the current condenser aperture index.  
         e.g. condenserAperture = DM.Py_Microscope().GetCondenserAperture()  

        Returns
        -------
        Index of current condenser aperture (long)  

        """
        return _DigitalMicrograph.Py_Microscope_GetCondenserAperture(self)


    def GetNumberOfCondenserApertures(self):
        """


        Return the number of condenser apertures.  
         e.g. noCondenserAperture = DM.Py_Microscope().GetNumberOfCondenserApertures()  

        Returns
        -------
        Number of condenser apertures (long)  

        """
        return _DigitalMicrograph.Py_Microscope_GetNumberOfCondenserApertures(self)


    def GetCondenserApertureName(self, index):
        """


        Return the number of condenser apertures.  

        Parameters
        ----------
        * `index` :  
            - (long) Index of condenser aperture  

        Returns
        -------
        Name of condenser aperture (string)  

        """
        return _DigitalMicrograph.Py_Microscope_GetCondenserApertureName(self, index)


    def GetObjectiveAperture(self):
        """


        Return the current objective aperture index.  
         e.g. objAperture = DM.Py_Microscope().GetObjectiveAperture()  

        Returns
        -------
        Index of objective aperture (long)  

        """
        return _DigitalMicrograph.Py_Microscope_GetObjectiveAperture(self)


    def GetNumberOfObjectiveApertures(self):
        """


        Return the number of objective apertures.  
         e.g. noObjAperture = DM.Py_Microscope().GetNumberOfObjectiveApertures()  

        Returns
        -------
        number of objective apertures (long)  

        """
        return _DigitalMicrograph.Py_Microscope_GetNumberOfObjectiveApertures(self)


    def GetObjectiveApertureName(self, index):
        """


        Return the name of objective aperture of index passed.  

        Parameters
        ----------
        * `index` :  
            - (long) Index of objective aperture  

        Returns
        -------
        Name of objective aperture of index passed (string)  

        """
        return _DigitalMicrograph.Py_Microscope_GetObjectiveApertureName(self, index)


    def IsReady(self):
        """


        Return true if the microscope is ready.  
         e.g. isReady = DM.Py_Microscope().IsReady()  

        Returns
        -------
        Ready-state of the microscope (bool)  

        """
        return _DigitalMicrograph.Py_Microscope_IsReady(self)


    def SetBeamShift(self, shiftX, shiftY):
        """


        Set the beam shift to the given values along the beam shift X and beam shift Y
        axes in raw units as used by the microscope specific communication interface.  


         e.g. DM.Py_Microscope().SetBeamShift(50, 50)  

        Parameters
        ----------
        * `shiftX` :  
            - (double) Beam shift X value in raw units, not calibrated  
        * `shiftY` :  
            - (double) Beam shift Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_SetBeamShift(self, shiftX, shiftY)


    def SetBeamTilt(self, tiltX, tiltY):
        """


        Set the beam tilt to the given values along the beam tilt X and beam tilt Y axes
        in raw units as used by the microscope specific communication interface.  


         e.g. DM.Py_Microscope().SetBeamTilt(55, 55)  

        Parameters
        ----------
        * `tiltX` :  
            - (double) Beam tilt X value in raw units, not calibrated  
        * `tiltY` :  
            - (double) Beam tilt Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_SetBeamTilt(self, tiltX, tiltY)


    def SetBrightness(self, brightness):
        """


        Set the current brightness value in raw units as used by the microscope specific
        communication interface.  


         e.g. DM.Py_Microscope().SetBrightness(99)  

        Parameters
        ----------
        * `brightness` :  
            - (double) Brightness value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_SetBrightness(self, brightness)


    def SetCalibratedBeamShift(self, shiftX, shiftY):
        """


        Set the beam shift to the given values along the beam shift X and beam shift Y
        axes in calibrated units according to the stored calibration. If no calibration
        is found for the current operation mode, the command throws an error message and
        displays an according dialog.  


         e.g. DM.Py_Microscope().SetCalibratedBeamShift(30, 30)  

        Parameters
        ----------
        * `shiftX` :  
            - (double) Beam shift X value in raw units, not calibrated  
        * `shiftY` :  
            - (double) Beam shift Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_SetCalibratedBeamShift(self, shiftX, shiftY)


    def SetCalibratedBeamTilt(self, tiltX, tiltY):
        """


        Set the beam tilt to the given values along the beam tilt X and beam tilt Y axes
        in calibrated units according to the stored calibration. If no calibration is
        found for the current operation mode, the command throws an error message and
        displays an according dialog.  


         e.g. DM.Py_Microscope().SetCalibratedBeamTilt(65, 65)  

        Parameters
        ----------
        * `tiltX` :  
            - (double) Beam tilt X value in calibrated units  
        * `tiltY` :  
            - (double) Beam tilt Y value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_SetCalibratedBeamTilt(self, tiltX, tiltY)


    def SetCalibratedCondenserStigmation(self, stigX, stigY):
        """


        Set the Condenser lens stigmator to the given values in calibrated units
        according to the stored calibration. If no calibration is found for the current
        operation mode, the command throws an error message and displays an according
        dialog.  


         e.g. DM.Py_Microscope().SetCalibratedCondenserStigmation(35, 36)  

        Parameters
        ----------
        * `stigX` :  
            - (double) Condenser lens stigmator X value in calibrated units  
        * `stigY` :  
            - (double) Condenser lens stigmator Y value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_SetCalibratedCondenserStigmation(self, stigX, stigY)


    def SetCalibratedFocus(self, focus):
        """


        Set the focus in calibrated units according to the stored calibration. If no
        calibration is found for the current operation mode, the command throws an error
        message and displays an according dialog.  


         e.g. DM.Py_Microscope().SetCalibratedFocus(22)  

        Parameters
        ----------
        * `focus` :  
            - (double) Focus value in in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_SetCalibratedFocus(self, focus)


    def SetCalibratedImageShift(self, shiftX, shiftY):
        """


        Set the image shift to the given values along the image shift X and image shift
        Y axes in calibrated units according to the stored calibration. If no
        calibration is found for the current operation mode, the command throws an error
        message and displays an according dialog.  


         e.g. DM.Py_Microscope().SetCalibratedImageShift(40, 42)  

        Parameters
        ----------
        * `shiftX` :  
            - (double) Image shift X value in calibrated units  
        * `shiftY` :  
            - (double) Image shift Y value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_SetCalibratedImageShift(self, shiftX, shiftY)


    def SetCalibratedObjectiveStigmation(self, stigX, stigY):
        """


        Set the objective lens stigmator to the given values in calibrated units
        according to the stored calibration. If no calibration is found for the current
        operation mode, the command throws an error message and displays an according
        dialog.  


         e.g. DM.Py_Microscope().SetCalibratedObjectiveStigmation(36, 36)  

        Parameters
        ----------
        * `stigX` :  
            - (double) Objective lens stigmator X value in calibrated units  
        * `stigY` :  
            - (double) Objective lens stigmator Y value in calibrated units  

        """
        return _DigitalMicrograph.Py_Microscope_SetCalibratedObjectiveStigmation(self, stigX, stigY)


    def SetCondenserStigmation(self, stigX, stigY):
        """


        Set the condenser lens stigmator to the given values in raw units as used by the
        microscope specific communication interface.  


         e.g. DM.Py_Microscope().SetCondenserStigmation(38, 38)  

        Parameters
        ----------
        * `stigX` :  
            - (double) Condenser lens stigmator X value in raw units, not calibrated  
        * `stigY` :  
            - (double) Condenser lens stigmator Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_SetCondenserStigmation(self, stigX, stigY)


    def SetFocus(self, focus):
        """


        Set the focus in raw units as used by the microscope specific communication
        interface..  


         e.g. DM.Py_Microscope().SetFocus(36)  

        Parameters
        ----------
        * `focus` :  
            - (double) Focus value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_SetFocus(self, focus)


    def SetImageShift(self, shiftX, shiftY):
        """


        Set the image shift to the given values along the image shift X and image shift
        Y axes in raw units as used by the microscope specific communication interface.  


         e.g. DM.Py_Microscope().SetImageShift(48, 44)  

        Parameters
        ----------
        * `shiftX` :  
            - (double) Image shift X value in raw units, not calibrated  
        * `shiftY` :  
            - (double) Image shift Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_SetImageShift(self, shiftX, shiftY)


    def SetMagIndex(self, index):
        """


        Set the magnification in the current operation mode to the value at given index
        in the list of available magnifications.  


         e.g. DM.Py_Microscope().SetMagIndex(38)  

        Parameters
        ----------
        * `index` :  
            - (long) Focus value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_SetMagIndex(self, index)


    def SetObjectiveStigmation(self, stigX, stigY):
        """


        Set the objective lens stigmator to the given values in raw units as used by the
        microscope specific communication interface.  


         e.g. DM.Py_Microscope().SetCalibratedObjectiveStigmation(36, 36)  

        Parameters
        ----------
        * `stigX` :  
            - (double) Objective lens stigmator X value in raw units, not calibrated  
        * `stigY` :  
            - (double) Objective lens stigmator Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_SetObjectiveStigmation(self, stigX, stigY)


    def SetProjectorShift(self, shiftX, shiftY):
        """


        Set the projector shift values to the given values along the projector shift X
        and projector shift Y axes in raw units as used by the microscope specific
        communication interface.  


         e.g. DM.Py_Microscope().SetProjectorShift(22, 32)  

        Parameters
        ----------
        * `shiftX` :  
            - (double) Projector shift X value in raw units, not calibrated  
        * `shiftY` :  
            - (double) Projector shift Y value in raw units, not calibrated  

        """
        return _DigitalMicrograph.Py_Microscope_SetProjectorShift(self, shiftX, shiftY)


    def SetScreenPosition(self, screen):
        """


        Set the position of the fluorescent screen.  


         e.g. DM.Py_Microscope().SetScreenPosition(48)  

        Parameters
        ----------
        * `screen` :  
            - (short) Position index of the fluorescent screen  

        """
        return _DigitalMicrograph.Py_Microscope_SetScreenPosition(self, screen)


    def SetSpotSize(self, spotSize):
        """


        Set the spot size.  


         e.g. DM.Py_Microscope().SetSpotSize(28)  

        Parameters
        ----------
        * `spotSize` :  
            - (double) Spot size index  

        """
        return _DigitalMicrograph.Py_Microscope_SetSpotSize(self, spotSize)


    def SetStageAlpha(self, pos):
        """


        Set the stage alpha tilt in degrees.  


         e.g. DM.Py_Microscope().SetStageAlpha(12)  

        Parameters
        ----------
        * `pos` :  
            - (double) Stage tilt alpha, in degrees  

        """
        return _DigitalMicrograph.Py_Microscope_SetStageAlpha(self, pos)


    def SetStageBeta(self, pos):
        """


        Set the stage beta tilt in degrees.  


         e.g. DM.Py_Microscope().SetStageBeta(24)  

        Parameters
        ----------
        * `pos` :  
            - (double) Stage tilt beta, in degrees  

        """
        return _DigitalMicrograph.Py_Microscope_SetStageBeta(self, pos)


    def SetStagePositions(self, axisFlags, x, y, z, a, b):
        """


        Set the stage position to the provided values. The cumulative flag axisFlags is
        used to specify which axes are set, e.g. axixFlags=14 sets only y(2),z(4) and
        alpha(8) and ignores the other input. The command returns immediately  


         e.g. DM.Py_Microscope().SetStagePositions(20, 22, 26, 32, 68, 88)  

        Parameters
        ----------
        * `axisFlags` :  
            - (long) Cumulative flag of queried axes: x=1 , y=2, z=4,  
             alpha=8, beta=16  
        * `x` :  
            - (double) Stage X, in micrometer  
        * `y` :  
            - (double) Stage Y, in micrometer  
        * `z` :  
            - (double) Stage Z, in micrometer  
        * `a` :  
            - (double) Stage tilt alpha, in degrees  
        * `b` :  
            - (double) Stage tilt beta, in degrees  

        """
        return _DigitalMicrograph.Py_Microscope_SetStagePositions(self, axisFlags, x, y, z, a, b)


    def SetStageXY(self, x, y):
        """


        Set the stage X and stage Y values in micrometer.  


         e.g. DM.Py_Microscope().SetStageX(48)  

        Parameters
        ----------
        * `x` :  
            - (double) Stage X, in micrometer  
        * `y` :  
            - (double) Stage Y, in micrometer  

        """
        return _DigitalMicrograph.Py_Microscope_SetStageXY(self, x, y)


    def SetStageX(self, pos):
        """


        Set the stage X position in micrometer.  


         e.g. DM.Py_Microscope().SetStageX(48)  

        Parameters
        ----------
        * `pos` :  
            - (double) Stage X, in micrometer  

        """
        return _DigitalMicrograph.Py_Microscope_SetStageX(self, pos)


    def SetStageY(self, pos):
        """


        Set the stage Y position in micrometer.  


         e.g. DM.Py_Microscope().SetStageY(68)  

        Parameters
        ----------
        * `pos` :  
            - (double) Stage Y, in micrometer  

        """
        return _DigitalMicrograph.Py_Microscope_SetStageY(self, pos)


    def SetStageZ(self, pos):
        """


        Set the stage Z position in micrometer.  


         e.g. DM.Py_Microscope().SetStageZ(78)  

        Parameters
        ----------
        * `pos` :  
            - (double) Stage Z, in micrometer  

        """
        return _DigitalMicrograph.Py_Microscope_SetStageZ(self, pos)


    def UpdateCalibrationState(self):
        """


        Updates cached microscope values.  


         e.g. DM.Py_Microscope().UpdateCalibrationState()  

        """
        return _DigitalMicrograph.Py_Microscope_UpdateCalibrationState(self)


    def WaitUntilReady(self):
        """


        The command returns after the microscope is in ready state.  


         e.g. DM.Py_Microscope().WaitUntilReady()  

        """
        return _DigitalMicrograph.Py_Microscope_WaitUntilReady(self)


    def HasProjectorShift(self):
        """


        Return if the current microscope communication allows access to the projector
        shift controls.  


         e.g. hasProjectorShift = DM.Py_Microscope().HasProjectorShift()  

        Returns
        -------
        bool | Microscope has script access to Projector Shift  

        """
        return _DigitalMicrograph.Py_Microscope_HasProjectorShift(self)


    def HasCondenserApertureControl(self):
        """


        Return if the current microscope communication allows access to the condenser
        aperture controls.  


         e.g. hasCondenserApertureControl =
        DM.Py_Microscope().HasCondenserApertureControl()  

        Returns
        -------
        bool | Microscope has Condenser Aperture Control which can be accessed by script  

        """
        return _DigitalMicrograph.Py_Microscope_HasCondenserApertureControl(self)


    def SetCondenserAperture(self, index):
        """


        Sets the condenser aperture by index.  


         e.g. DM.Py_Microscope().SetCondenserAperture(2)  

        Parameters
        ----------
        * `index` :  
            - (long) Index of condenser aperture  

        """
        return _DigitalMicrograph.Py_Microscope_SetCondenserAperture(self, index)


    def HasObjectiveApertureControl(self):
        """


        Return if the current microscope communication allows access to the condenser
        aperture controls.  


         e.g. hasObjectiveApertureControl =
        DM.Py_Microscope().HasObjectiveApertureControl()  

        Returns
        -------
        bool | Microscope has Condenser Aperture Control which can be accessed by script  

        """
        return _DigitalMicrograph.Py_Microscope_HasObjectiveApertureControl(self)


    def SetObjectiveAperture(self, index):
        """


        Sets objective aperture by index.  


         e.g. DM.Py_Microscope().SetObjectiveAperture(3)  

        Parameters
        ----------
        * `index` :  
            - (long) Index of objective aperture  

        """
        return _DigitalMicrograph.Py_Microscope_SetObjectiveAperture(self, index)


    def SetCondenserApertureName(self, index, name):
        """


        Sets condenser aperture name by index.  


         e.g. DM.Py_Microscope().SetCondenserApertureName(2, 'new name')  

        Parameters
        ----------
        * `index` :  
            - (long) Index of the aperture  
        * `name` :  
            - (String) Name of the aperture  

        """
        return _DigitalMicrograph.Py_Microscope_SetCondenserApertureName(self, index, name)


    def SetObjectiveApertureName(self, index, name):
        """


        Sets objective aperture name by index.  


         e.g. DM.Py_Microscope().SetObjectiveApertureName(2, 'new ObjectiveAperture
        name')  

        Parameters
        ----------
        * `index` :  
            - (long) Index of the aperture  
        * `name` :  
            - (String) Name of the aperturee  

        """
        return _DigitalMicrograph.Py_Microscope_SetObjectiveApertureName(self, index, name)


    def HasStageSpeedControl(self, axisFlags):
        """


        Return if the current microscope communication allows access to the stage speed
        controls of the specified axes. AxisFlag specifies the axes x, y, z, alpha and
        beta as bits 1 to 5, respectively.  


         e.g. hasStageSpeedControl, nSteps = DM.Py_Microscope().HasStageSpeedControl(10)  

        Parameters
        ----------
        * `axisFlags` :  
            - (long) Cumulative flag of queried axes: x=1, y=2, z=4, alpha=8, beta=16  
        * `nSteps` :  
            - (long) nSteps  

        Returns
        -------
        bool | Microscope has stage speed control which can be accessed by script  

        """
        return _DigitalMicrograph.Py_Microscope_HasStageSpeedControl(self, axisFlags)


    def SetStagePositionsWithSpeed(self, axisFlags, x, y, z, a, b, speed):
        """


        Set the stage position to the provided values with given speed. The cumulative
        flag axisFlags is used to specify which axes are set. It specifies the axes x,
        y, z, alpha and beta as bits 1 to 5, respectively. So, using axixFlags = 14 sets
        only y(2), z(4) and alpha(8) and ignores the other input. The command returns
        immediately.  


         e.g. DM.Py_Microscope().SetStagePositionsWithSpeed(20, 10, 12, 14, 16, 18, 20)  

        Parameters
        ----------
        * `axisFlags` :  
            - (long) Cumulative flag of queried axes: x=1 , y=2, z=4, alpha=8, beta=16  
        * `x` :  
            - (double) Stage X, in micrometer  
        * `y` :  
            - (double) Stage Y, in micrometer  
        * `z` :  
            - (double) Stage Z, in micrometer  
        * `a` :  
            - (double) Stage tilt alpha, in degrees  
        * `b` :  
            - (double) Stage Stage tilt beta, in degrees  
        * `speed` :  
            - (double) Stage speed  

        """
        return _DigitalMicrograph.Py_Microscope_SetStagePositionsWithSpeed(self, axisFlags, x, y, z, a, b, speed)


    def HasColumnValvesControl(self):
        """


        Return if the current microscope communication allows access to the column
        valves.  


         e.g. HasColumnValvesControl = DM.Py_Microscope().HasColumnValvesControl()  

        Returns
        -------
        bool | Microscope has a column valves which can be accessed by script  

        """
        return _DigitalMicrograph.Py_Microscope_HasColumnValvesControl(self)


    def SetColumnValvesOpen(self, open):
        """


        Open or closes microscope column valves.  


         e.g. DM.Py_Microscope().SetColumnValvesOpen(True)  

        Parameters
        ----------
        * `open` :  
            - (bool) The column valves open/closed state  

        """
        return _DigitalMicrograph.Py_Microscope_SetColumnValvesOpen(self, open)


    def GetColumnValvesOpen(self):
        """


        Return if the microscope column valves are currently open.  


         e.g. GetColumnValvesOpen = DM.Py_Microscope().GetColumnValvesOpen()  

        Returns
        -------
        bool | Status of the the microscope column valves  

        """
        return _DigitalMicrograph.Py_Microscope_GetColumnValvesOpen(self)


    def StartColumnValvesCountdown(self):
        """


        Starts a 1h count-down after which the microscope column vales are closed.  


         e.g. DM.Py_Microscope().StartColumnValvesCountdown()  

        """
        return _DigitalMicrograph.Py_Microscope_StartColumnValvesCountdown(self)


    def AbortColumnValvesCountdown(self):
        """


        Aborts any running microscope column vales close count-down.  


         e.g. DM.Py_Microscope().AbortColumnValvesCountdown()  

        """
        return _DigitalMicrograph.Py_Microscope_AbortColumnValvesCountdown(self)


    def HasBeamBlanker(self):
        """


        Return if the current microscope communication allows access to a beam blanker.  


         e.g. HasBeamBlanker = DM.Py_Microscope().HasBeamBlanker()  

        Returns
        -------
        bool | Microscope has a beam blanker which can be accessed by script  

        """
        return _DigitalMicrograph.Py_Microscope_HasBeamBlanker(self)


    def SetBeamBlanked(self, on_off):
        """


        Enables or disables the microscope beam blanking.  


         e.g. DM.Py_Microscope().SetBeamBlanked(True)  

        Parameters
        ----------
        * `on_off` :  
            - (bool) The microscope blanker state  

        """
        return _DigitalMicrograph.Py_Microscope_SetBeamBlanked(self, on_off)


    def GetBeamBlanked(self):
        """


        Return if the microscope beam blanker is currently enabled.  


         e.g. GetBeamBlanked = DM.Py_Microscope().GetBeamBlanked()  

        Returns
        -------
        bool | Status of the the microscope blanker  

        """
        return _DigitalMicrograph.Py_Microscope_GetBeamBlanked(self)


    def SetImagingOpticsMode(self, imagingOpticsMode):
        """


        Set Imaging optics mode.  


         e.g. DM.Py_Microscope().SetImagingOpticsMode("MAG1")  

        Parameters
        ----------
        * `imagingOpticsMode` :  
            - (string) imaging optics mode  

        """
        return _DigitalMicrograph.Py_Microscope_SetImagingOpticsMode(self, imagingOpticsMode)


    def SetIlluminationMode(self, illuminationMode):
        """


        Set Illumination mode.  


         e.g. DM.Py_Microscope().SetIlluminationMode( "TEM" )  

        Parameters
        ----------
        * `illuminationMode` :  
            - (string) illumination mode  

        """
        return _DigitalMicrograph.Py_Microscope_SetIlluminationMode(self, illuminationMode)


    def SetIlluminationSubMode(self, modeIndex):
        """


        Set Illumination Sub Mode. Sub mode can be 0,1,2, etc.  


         e.g. DM.Py_Microscope().SetIlluminationSubMode(1)  

        Parameters
        ----------
        * `mode` :  
            - (unsigned long) illumination sub mode  

        """
        return _DigitalMicrograph.Py_Microscope_SetIlluminationSubMode(self, modeIndex)


    def GetIlluminationSubMode(self):
        """


        Return Illumination Sub mode.  


         e.g. mode = DM.Py_Microscope().GetIlluminationSubMode()  

        Returns
        -------
        Illumination Sub Mode (unsigned long)  

        """
        return _DigitalMicrograph.Py_Microscope_GetIlluminationSubMode(self)

Py_Microscope_swigregister = _DigitalMicrograph.Py_Microscope_swigregister
Py_Microscope_swigregister(Py_Microscope)


def GetNumber(prompt, initalValue):
    """


    Puts up a dialog with the given prompt and allows the user to enter a number  
     e.g. bVal, num = DM.GetNumber('Please enter a number', 0)  

    Parameters
    ----------
    * `prompt` :  
        - given prompt to user  
    * `initalValue` :  
        - initial value for the number  
    * `result` :  
        - return to user  

    Returns
    -------
    Returns 1 for OK and 0 for Cancel  

    """
    return _DigitalMicrograph.GetNumber(prompt, initalValue)

def OkCancelDialog(prompt):
    """


    Puts up a dialog with the given prompt.  
     e.g. bVal = DM.OkCancelDialog('Please select ok or cancel')  

    Parameters
    ----------
    * `prompt` :  
        - given prompt to user  

    Returns
    -------
    Returns 1 for OK and 0 for Cancel.  

    """
    return _DigitalMicrograph.OkCancelDialog(prompt)

def OkDialog(prompt):
    """


    Puts up a OK dialog with the given prompt  
     e.g. DM.OkDialog('Please acknowledge')  

    Parameters
    ----------
    * `prompt` :  
        - given prompt to user  

    """
    return _DigitalMicrograph.OkDialog(prompt)

def Result(argument_1):
    return _DigitalMicrograph.Result(argument_1)
Result = _DigitalMicrograph.Result

def Sleep(seconds):
    return _DigitalMicrograph.Sleep(seconds)
Sleep = _DigitalMicrograph.Sleep

def DoEvents():
    return _DigitalMicrograph.DoEvents()
DoEvents = _DigitalMicrograph.DoEvents

def ExecuteScriptString(text):
    return _DigitalMicrograph.ExecuteScriptString(text)
ExecuteScriptString = _DigitalMicrograph.ExecuteScriptString
# This file is compatible with both classic and new-style classes.


